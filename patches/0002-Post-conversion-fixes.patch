From 8508ec7924e8d514b3f960f96607e44208ce1ae7 Mon Sep 17 00:00:00 2001
From: Eli Barzilay <eli@barzilay.org>
Date: Thu, 28 Oct 2021 13:26:41 -0400
Subject: [PATCH 2/6] Post conversion fixes

---
 Gulpfile.js                                   |  9 ++++---
 src/harness/fourslashImpl.ts                  |  4 ++-
 src/harness/harnessIO.ts                      | 26 ++++++++++---------
 src/harness/virtualFileSystemWithWatch.ts     | 21 ++++++++-------
 src/server/session.ts                         |  6 +++--
 src/testRunner/parallel/host.ts               |  6 ++---
 .../unittests/tsbuild/moduleResolution.ts     |  4 ++-
 .../unittests/tsbuildWatch/programUpdates.ts  |  4 +--
 .../unittests/tsserver/compileOnSave.ts       |  5 ++--
 src/testRunner/unittests/tsserver/helpers.ts  | 16 +++++++-----
 src/testRunner/unittests/tsserver/session.ts  |  4 +--
 .../unittests/tsserver/typingsInstaller.ts    |  3 ++-
 12 files changed, 61 insertions(+), 47 deletions(-)

diff --git a/Gulpfile.js b/Gulpfile.js
index c9d3feff80..6dc97369b3 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -18,6 +18,7 @@ const { buildProject, cleanProject, watchProject } = require("./scripts/build/pr
 const cmdLineOptions = require("./scripts/build/options");
 
 const copyright = "CopyrightNotice.txt";
+const testRoot = "built/local/testRunner/Harness.js";
 const cleanTasks = [];
 
 const buildScripts = () => buildProject("scripts");
@@ -442,7 +443,7 @@ preTest.displayName = "preTest";
 
 const postTest = (done) => cmdLineOptions.lint ? lint(done) : done();
 
-const runTests = () => runConsoleTests("built/local/run.js", "mocha-fivemat-progress-reporter", /*runInParallel*/ false, /*watchMode*/ false);
+const runTests = () => runConsoleTests(testRoot, "mocha-fivemat-progress-reporter", /*runInParallel*/ false, /*watchMode*/ false);
 task("runtests", series(preBuild, preTest, runTests, postTest));
 task("runtests").description = "Runs the tests using the built run.js file.";
 task("runtests").flags = {
@@ -462,7 +463,7 @@ task("runtests").flags = {
     "   --shardId": "1-based ID of this shard (default: 1)",
 };
 
-const runTestsParallel = () => runConsoleTests("built/local/run.js", "min", /*runInParallel*/ cmdLineOptions.workers > 1, /*watchMode*/ false);
+const runTestsParallel = () => runConsoleTests(testRoot, "min", /*runInParallel*/ cmdLineOptions.workers > 1, /*watchMode*/ false);
 task("runtests-parallel", series(preBuild, preTest, runTestsParallel, postTest));
 task("runtests-parallel").description = "Runs all the tests in parallel using the built run.js file.";
 task("runtests-parallel").flags = {
@@ -611,10 +612,10 @@ task("publish-nightly").description = "Runs `npm publish --tag next` to create a
 // write some kind of trigger file that indicates build completion that we could listen for instead.
 const watchRuntests = () => watch(["built/local/*.js", "tests/cases/**/*.ts", "tests/cases/**/tsconfig.json"], { delay: 5000 }, async () => {
     if (cmdLineOptions.tests || cmdLineOptions.failed) {
-        await runConsoleTests("built/local/run.js", "mocha-fivemat-progress-reporter", /*runInParallel*/ false, /*watchMode*/ true);
+        await runConsoleTests(testRoot, "mocha-fivemat-progress-reporter", /*runInParallel*/ false, /*watchMode*/ true);
     }
     else {
-        await runConsoleTests("built/local/run.js", "min", /*runInParallel*/ true, /*watchMode*/ true);
+        await runConsoleTests(testRoot, "min", /*runInParallel*/ true, /*watchMode*/ true);
     }
 });
 task("watch", series(preBuild, preTest, parallel(watchLib, watchDiagnostics, watchServices, watchLssl, watchTests, watchRuntests)));
diff --git a/src/harness/fourslashImpl.ts b/src/harness/fourslashImpl.ts
index cf83aa0754..8b4232c6ff 100644
--- a/src/harness/fourslashImpl.ts
+++ b/src/harness/fourslashImpl.ts
@@ -9,7 +9,9 @@ import { memoize, assertInvariants, assertDiagnosticsEquals, assertStructuralEqu
 import { SessionClient, protocol } from "./ts.server";
 import * as FourSlashInterface from "./FourSlashInterface";
 import * as ts from "./ts";
-import ArrayOrSingle = FourSlashInterface.ArrayOrSingle;
+
+type ArrayOrSingle<T> = FourSlashInterface.ArrayOrSingle<T>;
+
 export const enum FourSlashTestType {
     Native,
     Shims,
diff --git a/src/harness/harnessIO.ts b/src/harness/harnessIO.ts
index 04df01bedb..12d1b60e11 100644
--- a/src/harness/harnessIO.ts
+++ b/src/harness/harnessIO.ts
@@ -1,13 +1,13 @@
 import { RunnerBase, TypeWriterWalker, TypeWriterResult } from "./Harness";
-import { FileSystemEntries, sys, compareStringsCaseSensitive, compareStringsCaseInsensitive, combinePaths, ScriptTarget, createSourceFile, ESMap, SourceFile, getEntries, CompilerOptions, getEmitScriptTarget, CommandLineOption, Diagnostic, parseListTypeOption, parseCustomTypeOption, CommandLineOptionOfCustomType, cloneCompilerOptions, NewLineKind, map, getNormalizedAbsolutePath, fileExtensionIs, Extension, forEach, getAllowJSCompilerOption, removeFileExtension, getDeclarationEmitExtensionForPath, formatDiagnosticsWithColorAndContext, formatDiagnostics, getErrorSummaryText, getErrorCountForSummary, getFilesInErrorForSummary, sort, compareDiagnostics, createGetCanonicalFileName, flattenDiagnosticMessageText, diagnosticCategoryName, formatLocation, identity, DiagnosticWithLocation, comparePaths, Comparison, computeLineStarts, TextSpan, textSpanEnd, countWhere, Program, endsWith, flatMap, getAreDeclarationMapsEnabled, contains, convertToBase64, getBaseFileName, CharacterCodes, ScriptKind, length, normalizeSlashes, toPath, startsWith, findIndex, arrayFrom, orderedRemoveItemAt, ReadonlyESMap, optionDeclarations, equateStringsCaseInsensitive, hasProperty, ParsedCommandLine, ParseConfigHost, parseJsonText, normalizePath, getDirectoryPath, parseJsonSourceFileConfigFileContent, ForegroundColorEscapeSequences, find } from "./ts";
+import { FileSystemEntries, sys, compareStringsCaseSensitive, compareStringsCaseInsensitive, combinePaths, ScriptTarget, createSourceFile, Map, ESMap, SourceFile, getEntries, CompilerOptions, getEmitScriptTarget, CommandLineOption, Diagnostic, parseListTypeOption, parseCustomTypeOption, CommandLineOptionOfCustomType, cloneCompilerOptions, NewLineKind, map, getNormalizedAbsolutePath, fileExtensionIs, Extension, forEach, getAllowJSCompilerOption, removeFileExtension, getDeclarationEmitExtensionForPath, formatDiagnosticsWithColorAndContext, formatDiagnostics, getErrorSummaryText, getErrorCountForSummary, getFilesInErrorForSummary, sort, compareDiagnostics, createGetCanonicalFileName, flattenDiagnosticMessageText, diagnosticCategoryName, formatLocation, identity, DiagnosticWithLocation, comparePaths, Comparison, computeLineStarts, TextSpan, textSpanEnd, countWhere, Program, endsWith, flatMap, getAreDeclarationMapsEnabled, contains, convertToBase64, getBaseFileName, CharacterCodes, ScriptKind, length, normalizeSlashes, toPath, startsWith, findIndex, arrayFrom, orderedRemoveItemAt, ReadonlyESMap, optionDeclarations, equateStringsCaseInsensitive, hasProperty, ParsedCommandLine, ParseConfigHost, parseJsonText, normalizePath, getDirectoryPath, parseJsonSourceFileConfigFileContent, ForegroundColorEscapeSequences, find } from "./ts";
 import { findUpRoot, assertInvariants, removeByteOrderMark, removeTestPathPrefixes, canonicalizeForHarness, splitContentByNewlines, encodeString } from "./Utils";
 import { combine, dirname, isDeclaration, isJson, isTypeScript, isJavaScript, addTrailingSeparator } from "./vpath";
 import { FileSet, srcFolder, builtFolder, testLibFolder, createFromFileSystem, Symlink } from "./vfs";
 import { CompilationResult } from "./compiler";
 import { TextDocument } from "./documents";
 import { CompilerHost } from "./fakes";
-import * as ts from "./ts";
 import * as compiler from "./compiler";
+
 export interface IO {
     newLine(): string;
     getCurrentDirectory(): string;
@@ -231,7 +231,7 @@ export namespace Compiler {
             return undefined;
         }
         if (!libFileNameSourceFileMap) {
-            libFileNameSourceFileMap = new ts.Map(getEntries({
+            libFileNameSourceFileMap = new Map(getEntries({
                 [defaultLibFileName]: createSourceFileAndAssertInvariants(defaultLibFileName, IO.readFile(libFolder + "lib.es5.d.ts")!, /*languageVersion*/ ScriptTarget.Latest)
             }));
         }
@@ -267,7 +267,8 @@ export namespace Compiler {
         libFiles?: string;
         noTypesAndSymbols?: boolean;
     }
-    // Additional options not already in ts.optionDeclarations
+
+    // Additional options not already in optionDeclarations
     const harnessOptionDeclarations: CommandLineOption[] = [
         { name: "allowNonTsExtensions", type: "boolean", defaultValueDescription: false },
         { name: "useCaseSensitiveFileNames", type: "boolean", defaultValueDescription: false },
@@ -288,9 +289,9 @@ export namespace Compiler {
     let optionsIndex: ESMap<string, CommandLineOption>;
     function getCommandLineOption(name: string): CommandLineOption | undefined {
         if (!optionsIndex) {
-            optionsIndex = new ts.Map<string, CommandLineOption>();
-            const optionDeclarations = harnessOptionDeclarations.concat(ts.optionDeclarations);
-            for (const option of optionDeclarations) {
+            optionsIndex = new Map<string, CommandLineOption>();
+            const optionDecls = harnessOptionDeclarations.concat(optionDeclarations);
+            for (const option of optionDecls) {
                 optionsIndex.set(option.name.toLowerCase(), option);
             }
         }
@@ -532,7 +533,7 @@ export namespace Compiler {
         outputLines = "";
         errorsReported = 0;
         // 'merge' the lines of each input file with any errors associated with it
-        const dupeCase = new ts.Map<string, number>();
+        const dupeCase = new Map<string, number>();
         for (const inputFile of inputFiles.filter(f => f.content !== undefined)) {
             // Filter down to the errors in the file
             const fileErrors = diagnostics.filter((e): e is DiagnosticWithLocation => {
@@ -692,7 +693,8 @@ export namespace Compiler {
             if (skipBaseline) {
                 return;
             }
-            const dupeCase = new ts.Map<string, number>();
+            const dupeCase = new Map<string, number>();
+
             for (const file of allFiles) {
                 const { unitName } = file;
                 let typeLines = "=== " + unitName + " ===\r\n";
@@ -850,7 +852,7 @@ export namespace Compiler {
         // Collect, test, and sort the fileNames
         const files = Array.from(outputFiles);
         files.slice().sort((a, b) => compareStringsCaseSensitive(cleanName(a.file), cleanName(b.file)));
-        const dupeCase = new ts.Map<string, number>();
+        const dupeCase = new Map<string, number>();
         // Yield them
         for (const outputFile of files) {
             yield [checkDuplicatedFileName(outputFile.file, dupeCase), "/*====== " + outputFile.file + " ======*/\r\n" + removeByteOrderMark(outputFile.text)];
@@ -969,7 +971,7 @@ function getVaryByStarSettingValues(varyBy: string): ReadonlyESMap<string, strin
             return option.type;
         }
         if (option.type === "boolean") {
-            return booleanVaryByStarSettingValues || (booleanVaryByStarSettingValues = new ts.Map(getEntries({
+            return booleanVaryByStarSettingValues || (booleanVaryByStarSettingValues = new Map(getEntries({
                 true: 1,
                 false: 0
             })));
@@ -1277,7 +1279,7 @@ export namespace Baseline {
         string
     ]> | null, opts?: BaselineOptions, referencedExtensions?: string[]): void {
         const gen = generateContent();
-        const writtenFiles = new ts.Map<string, true>();
+        const writtenFiles = new Map<string, true>();
         const errors: Error[] = [];
         // eslint-disable-next-line no-null/no-null
         if (gen !== null) {
diff --git a/src/harness/virtualFileSystemWithWatch.ts b/src/harness/virtualFileSystemWithWatch.ts
index 2de9434cc1..8981f61e82 100644
--- a/src/harness/virtualFileSystemWithWatch.ts
+++ b/src/harness/virtualFileSystemWithWatch.ts
@@ -1,7 +1,7 @@
-import { Path, combinePaths, getDirectoryPath, ESMap, patchWriteFileEnsuringDirectory, isString, SortedArray, isArray, MultiMap, FileWatcher, forEach, arrayFrom, ReadonlyESMap, arrayToMap, isNumber, identity, PollingInterval, WatchOptions, FileWatcherCallback, FsWatchCallback, FormatDiagnosticsHost, ModuleResolutionHost, createMultiMap, RequireResult, WatchFileKind, HostWatchFile, HostWatchDirectory, createGetCanonicalFileName, toPath, createSystemWatchFunctions, createSingleFileWatcherPerName, getNormalizedAbsolutePath, directorySeparator, Debug, clone, returnFalse, FileWatcherEventKind, getBaseFileName, insertSorted, compareStringsCaseSensitive, filterMutate, FileSystemEntryKind, createFileWatcherCallback, getRelativePathToDirectoryOrUrl, mapDefined, matchFiles, generateDjb2Hash, sys, clear, WatchDirectoryKind, PollingWatchKind } from "./ts";
+import { Path, combinePaths, getDirectoryPath, Set, Map, ESMap, patchWriteFileEnsuringDirectory, isString, SortedArray, isArray, MultiMap, FileWatcher, forEach, arrayFrom, ReadonlyESMap, arrayToMap, isNumber, identity, PollingInterval, WatchOptions, FileWatcherCallback, FsWatchCallback, FormatDiagnosticsHost, ModuleResolutionHost, createMultiMap, RequireResult, WatchFileKind, HostWatchFile, HostWatchDirectory, createGetCanonicalFileName, toPath, createSystemWatchFunctions, createSingleFileWatcherPerName, getNormalizedAbsolutePath, directorySeparator, Debug, clone, returnFalse, FileWatcherEventKind, getBaseFileName, insertSorted, compareStringsCaseSensitive, filterMutate, FileSystemEntryKind, createFileWatcherCallback, getRelativePathToDirectoryOrUrl, mapDefined, matchFiles, generateDjb2Hash, sys, clear, WatchDirectoryKind, PollingWatchKind } from "./ts";
 import { ServerHost } from "./ts.server";
 import { IO } from "./Harness";
-import * as ts from "./ts";
+
 export const libFile: File = {
     path: "/a/lib/lib.d.ts",
     content: `/// <reference no-default-lib="true"/>
@@ -115,7 +115,7 @@ export function getDiffInKeys<T>(map: ESMap<string, T>, expectedKeys: readonly s
     }
     const notInActual: string[] = [];
     const duplicates: string[] = [];
-    const seen = new ts.Map<string, true>();
+    const seen = new Map<string, true>();
     forEach(expectedKeys, expectedKey => {
         if (seen.has(expectedKey)) {
             duplicates.push(expectedKey);
@@ -207,8 +207,8 @@ export function checkWatchedDirectoriesDetailed(host: TestServerHost, expectedDi
     }
 }
 export function checkOutputContains(host: TestServerHost, expected: readonly string[]) {
-    const mapExpected = new ts.Set(expected);
-    const mapSeen = new ts.Set<string>();
+    const mapExpected = new Set(expected);
+    const mapSeen = new Set<string>();
     for (const f of host.getOutput()) {
         assert.isFalse(mapSeen.has(f), `Already found ${f} in ${JSON.stringify(host.getOutput())}`);
         if (mapExpected.has(f)) {
@@ -219,7 +219,7 @@ export function checkOutputContains(host: TestServerHost, expected: readonly str
     assert.equal(mapExpected.size, 0, `Output has missing ${JSON.stringify(arrayFrom(mapExpected.keys()))} in ${JSON.stringify(host.getOutput())}`);
 }
 export function checkOutputDoesNotContain(host: TestServerHost, expectedToBeAbsent: string[] | readonly string[]) {
-    const mapExpectedToBeAbsent = new ts.Set(expectedToBeAbsent);
+    const mapExpectedToBeAbsent = new Set(expectedToBeAbsent);
     for (const f of host.getOutput()) {
         assert.isFalse(mapExpectedToBeAbsent.has(f), `Contains ${f} in ${JSON.stringify(host.getOutput())}`);
     }
@@ -305,7 +305,8 @@ export interface TestServerHostOptions {
 export class TestServerHost implements ServerHost, FormatDiagnosticsHost, ModuleResolutionHost {
     args: string[] = [];
     private readonly output: string[] = [];
-    private fs: ESMap<Path, FSEntry> = new ts.Map();
+
+    private fs: ESMap<Path, FSEntry> = new Map();
     private time = timeIncrements;
     getCanonicalFileName: (s: string) => string;
     private toPath: (f: string) => Path;
@@ -872,7 +873,7 @@ export class TestServerHost implements ServerHost, FormatDiagnosticsHost, Module
         this.clearOutput();
     }
     snap(): ESMap<Path, FSEntry> {
-        const result = new ts.Map<Path, FSEntry>();
+        const result = new Map<Path, FSEntry>();
         this.fs.forEach((value, key) => {
             const cloneValue = clone(value);
             if (isFsFolder(cloneValue)) {
@@ -883,7 +884,7 @@ export class TestServerHost implements ServerHost, FormatDiagnosticsHost, Module
         return result;
     }
     writtenFiles?: ESMap<Path, number>;
-    diff(baseline: string[], base: ESMap<string, FSEntry> = new ts.Map()) {
+    diff(baseline: string[], base: ESMap<string, FSEntry> = new Map()) {
         this.fs.forEach(newFsEntry => {
             diffFsEntry(baseline, base.get(newFsEntry.path), newFsEntry, this.writtenFiles);
         });
@@ -1036,7 +1037,7 @@ export type TestServerHostTrackingWrittenFiles = TestServerHost & {
 export function changeToHostTrackingWrittenFiles(inputHost: TestServerHost) {
     const host = inputHost as TestServerHostTrackingWrittenFiles;
     const originalWriteFile = host.writeFile;
-    host.writtenFiles = new ts.Map<Path, number>();
+    host.writtenFiles = new Map<Path, number>();
     host.writeFile = (fileName, content) => {
         originalWriteFile.call(host, fileName, content);
         const path = host.toFullPath(fileName);
diff --git a/src/server/session.ts b/src/server/session.ts
index 1725a6095f..6e50bd611a 100644
--- a/src/server/session.ts
+++ b/src/server/session.ts
@@ -1,7 +1,9 @@
-import { HostCancellationToken, CompilerOptions, getEmitDeclarations, Diagnostic, flattenDiagnosticMessageText, diagnosticCategoryName, map, DiagnosticRelatedInformation, getLineAndCharacterOfPosition, LineAndCharacter, TextChange, textSpanEnd, Debug, tracing, OperationCanceledException, MultiMap, Path, flatMapToMutable, isArray, flatMap, deduplicate, equateValues, NavigateToItem, DocumentPosition, UserPreferences, RenameLocation, contains, documentSpansEqual, firstOrUndefined, ReferencedSymbol, ReferencedSymbolDefinitionInfo, createTextSpan, find, memoize, Push, tryAddToSet, DocumentSpan, TextSpan, LanguageServiceMode, PerformanceEvent, PossibleProgramFileInfo, getSnapshotText, perfLogger, WithMetadata, isString, arrayFrom, SemanticClassificationFormat, filter, concatenate, DefinitionInfo, EmitOutput, JSDocTagInfo, SymbolDisplayPart, JSDocLinkDisplayPart, SignatureHelpItem, ImplementationLocation, TextInsertion, DocumentHighlights, RenameInfo, identity, displayPartsToString, ReferenceEntry, ScriptKind, QuickInfo, createTextSpanFromBounds, formatting, CompletionTriggerKind, mapDefined, startsWith, cast, fileExtensionIs, Extension, outFile, server, singleIterator, normalizePath, NavigationBarItem, NavigationTree, getSupportedCodeFixes, TextRange, RefactorEditInfo, FileTextChanges, decodedTextSpanIntersectsWith, CodeActionCommand, toArray, CodeAction, stringContains, SelectionRange, CallHierarchyItem, CallHierarchyIncomingCall, CallHierarchyOutgoingCall, mapOneOrMany, toFileNameLowerCase, getEntries, version, mapIterator, arrayIterator, mapDefinedIterator, arrayReverseIterator, FormatCodeSettings, first, computeLineAndCharacterOfPosition, computeLineStarts, CompletionEntryData } from "./ts";
-import { Project, NormalizedPath, isInferredProject, isExternalProject, protocol, Logger, LogLevel, indent, ServerHost, toNormalizedPath, ProjectService, isConfiguredProject, ITypingsInstaller, ProjectServiceEventHandler, GcTimer, ProjectServiceOptions, ProjectServiceEvent, ProjectsUpdatedInBackgroundEvent, ProjectLoadingStartEvent, ProjectLoadingFinishEvent, LargeFileReferencedEvent, ConfigFileDiagEvent, ProjectLanguageServiceStateEvent, ProjectInfoTelemetryEvent, ProjectKind, Msg, emptyArray, updateProjectIfDirty, ScriptInfo, Errors, convertFormatOptions, convertUserPreferences, convertScriptKindName, stringifyIndented, ScriptInfoOrConfig, isConfigFile } from "./ts.server";
+import { HostCancellationToken, CompilerOptions, getEmitDeclarations, Diagnostic, flattenDiagnosticMessageText, diagnosticCategoryName, map, DiagnosticRelatedInformation, getLineAndCharacterOfPosition, LineAndCharacter, TextChange, textSpanEnd, Debug, tracing, OperationCanceledException, MultiMap, Path, flatMapToMutable, isArray, flatMap, deduplicate, equateValues, contains, filter, DocumentPosition, UserPreferences, RenameLocation, documentSpansEqual, firstOrUndefined, ReferencedSymbol, ReferencedSymbolDefinitionInfo, createTextSpan, find, ReferenceEntry, memoize, Push, tryAddToSet, DocumentSpan, TextSpan, LanguageServiceMode, PerformanceEvent, PossibleProgramFileInfo, getSnapshotText, perfLogger, WithMetadata, isString, arrayFrom, SemanticClassificationFormat, concatenate, DefinitionInfo, EmitOutput, JSDocTagInfo, SymbolDisplayPart, JSDocLinkDisplayPart, SignatureHelpItem, ImplementationLocation, TextInsertion, DocumentHighlights, RenameInfo, identity, displayPartsToString, ScriptKind, QuickInfo, createTextSpanFromBounds, formatting, CompletionTriggerKind, mapDefined, startsWith, cast, fileExtensionIs, Extension, outFile, server, singleIterator, normalizePath, NavigationBarItem, NavigationTree, NavigateToItem, getSupportedCodeFixes, TextRange, RefactorEditInfo, FileTextChanges, decodedTextSpanIntersectsWith, CodeActionCommand, toArray, CodeAction, stringContains, SelectionRange, CallHierarchyItem, CallHierarchyIncomingCall, CallHierarchyOutgoingCall, mapOneOrMany, toFileNameLowerCase, getEntries, version, mapIterator, arrayIterator, mapDefinedIterator, arrayReverseIterator, FormatCodeSettings, first, computeLineAndCharacterOfPosition, computeLineStarts, CompletionEntryData } from "./ts";
+import { Project, NormalizedPath, isInferredProject, isExternalProject, Logger, LogLevel, indent, ServerHost, ProjectService, emptyArray, toNormalizedPath, isConfiguredProject, ITypingsInstaller, ProjectServiceEventHandler, GcTimer, ProjectServiceOptions, ProjectServiceEvent, ProjectsUpdatedInBackgroundEvent, ProjectLoadingStartEvent, ProjectLoadingFinishEvent, LargeFileReferencedEvent, ConfigFileDiagEvent, ProjectLanguageServiceStateEvent, ProjectInfoTelemetryEvent, ProjectKind, Msg, updateProjectIfDirty, ScriptInfo, Errors, convertFormatOptions, convertUserPreferences, convertScriptKindName, stringifyIndented, ScriptInfoOrConfig, isConfigFile } from "./ts.server";
 import { Location, DiagnosticWithFileName, CommandTypes, Message, PerformanceData, RequestCompletedEventBody, ProjectLoadingStartEventBody, ProjectLoadingFinishEventBody, LargeFileReferencedEventBody, ConfigFileDiagnosticEventBody, ProjectLanguageServiceStateEventName, ProjectLanguageServiceStateEventBody, TelemetryEventName, TelemetryEventBody, ProjectsUpdatedInBackgroundEventBody, FileRequestArgs, Response, DiagnosticEventKind, DiagnosticEventBody, EncodedSyntacticClassificationsRequestArgs, EncodedSemanticClassificationsRequestArgs, DiagnosticWithLinePosition, CompilerOptionsDiagnosticsRequestArgs, FileLocationRequestArgs, FileSpanWithContext, DefinitionInfoAndBoundSpan, EmitOutputRequestArgs, FileSpan, OccurrencesResponseItem, SyntacticDiagnosticsSyncRequestArgs, SemanticDiagnosticsSyncRequestArgs, SuggestionDiagnosticsSyncRequestArgs, JsxClosingTagRequestArgs, DocumentHighlightsRequestArgs, DocumentHighlightsItem, InlayHintsRequestArgs, InlayHintItem, SetCompilerOptionsForInferredProjectsArgs, ProjectInfoRequestArgs, ProjectInfo, RenameRequestArgs, RenameResponseBody, RenameInfoSuccess, SpanGroup, ReferencesResponseBody, ReferencesResponseItem, FileReferencesResponseBody, OutliningSpan, TodoCommentRequestArgs, SpanOfEnclosingCommentRequestArgs, IndentationRequestArgs, BraceCompletionRequestArgs, QuickInfoResponseBody, FormatRequestArgs, CodeEdit, FormatOnKeyRequestArgs, CompletionsRequestArgs, CompletionEntry, CompletionInfo, CompletionDetailsRequestArgs, CompletionEntryDetails, CompileOnSaveAffectedFileListSingleProject, CompileOnSaveEmitFileRequestArgs, EmitResult, SignatureHelpRequestArgs, SignatureHelpItems, ChangeRequestArgs, ReloadRequestArgs, NavtoRequestArgs, NavtoItem, FileLocationOrRangeRequestArgs, FileRangeRequestArgs, GetApplicableRefactorsRequestArgs, ApplicableRefactorInfo, GetEditsForRefactorRequestArgs, OrganizeImportsRequestArgs, FileCodeEdits, GetEditsForFileRenameRequestArgs, CodeFixRequestArgs, CodeFixAction, GetCombinedCodeFixRequestArgs, CombinedCodeActions, ApplyCodeActionCommandRequestArgs, ConfigurePluginRequestArguments, SelectionRangeRequestArgs, Request, StatusResponseBody, OpenExternalProjectRequest, OpenExternalProjectsRequest, CloseExternalProjectRequest, SynchronizeProjectListRequest, UpdateOpenRequest, ApplyChangedToOpenFilesRequest, DefinitionRequest, EmitOutputRequest, FileLocationRequest, RenameRequest, RenameFullRequest, OpenRequest, QuickInfoRequest, FileRequest, TodoCommentRequest, IndentationRequest, BraceCompletionRequest, DocCommentTemplateRequest, SpanOfEnclosingCommentRequest, FileReferencesRequest, FormatRequest, FormatOnKeyRequest, CompletionsRequest, CompletionDetailsRequest, CompileOnSaveAffectedFileListRequest, CompileOnSaveEmitFileRequest, SignatureHelpRequest, CompilerOptionsDiagnosticsRequest, EncodedSyntacticClassificationsRequest, EncodedSemanticClassificationsRequest, SemanticDiagnosticsSyncRequest, SyntacticDiagnosticsSyncRequest, SuggestionDiagnosticsSyncRequest, GeterrRequest, GeterrForProjectRequest, ChangeRequest, ConfigureRequest, ReloadRequest, SavetoRequestArgs, NavtoRequest, DocumentHighlightsRequest, SetCompilerOptionsForInferredProjectsRequest, ProjectInfoRequest, JsxClosingTagRequest, CodeFixRequest, GetCombinedCodeFixRequest, ApplyCodeActionCommandRequest, GetApplicableRefactorsRequest, GetEditsForRefactorRequest, OrganizeImportsRequest, GetEditsForFileRenameRequest, ConfigurePluginRequest, SelectionRangeRequest, PrepareCallHierarchyRequest, ProvideCallHierarchyIncomingCallsRequest, ProvideCallHierarchyOutgoingCallsRequest, ToggleLineCommentRequest, ToggleMultilineCommentRequest, CommentSelectionRequest, UncommentSelectionRequest, InlayHintsRequest, TextSpanWithContext } from "./ts.server.protocol";
 import * as ts from "./ts";
+import * as protocol from "./ts.server.protocol";
+
 interface StackTraceError extends Error {
     stack?: string;
 }
diff --git a/src/testRunner/parallel/host.ts b/src/testRunner/parallel/host.ts
index 101021a793..e61650eef7 100644
--- a/src/testRunner/parallel/host.ts
+++ b/src/testRunner/parallel/host.ts
@@ -1,8 +1,8 @@
 import { findUpFile } from "../Utils";
 import { configOption, IO, TestRunnerKind, runners, workerCount, noColors, TestConfig, lightMode, runUnitTests, stackTraceLimit, globalTimeout, taskConfigsFolder, keepFailed } from "../Harness";
 import { Task, ErrorInfo, TestInfo, TaskTimeout, ParallelClientMessage, ParallelHostMessage, shimNoopTestInterface } from "../Harness.Parallel";
-import { combinePaths, Debug } from "../ts";
-import * as ts from "../ts";
+import { Map, combinePaths, Debug } from "../ts";
+
 export function start() {
     const Mocha = require("mocha") as typeof import("mocha");
     const Base = Mocha.reporters.Base;
@@ -25,7 +25,7 @@ export function start() {
     let unknownValue: string | undefined;
     let totalCost = 0;
     class RemoteSuite extends Mocha.Suite {
-        suiteMap = new ts.Map<string, RemoteSuite>();
+        suiteMap = new Map<string, RemoteSuite>();
         constructor(title: string) {
             super(title);
             this.pending = false;
diff --git a/src/testRunner/unittests/tsbuild/moduleResolution.ts b/src/testRunner/unittests/tsbuild/moduleResolution.ts
index 5c672e99a6..281cad4866 100644
--- a/src/testRunner/unittests/tsbuild/moduleResolution.ts
+++ b/src/testRunner/unittests/tsbuild/moduleResolution.ts
@@ -1,6 +1,8 @@
-import { CompilerOptions, emptyArray, verifyTsc, loadProjectFromFiles } from "../../ts";
+import { CompilerOptions, emptyArray, loadProjectFromFiles } from "../../ts";
+import { verifyTsc } from "../tsc/helpers";
 import { createWatchedSystem, projectRoot, libFile, verifyTscWatch, replaceFileText, runQueuedTimeoutCallbacks } from "../../ts.tscWatch";
 import { dedent } from "../../Utils";
+
 describe("unittests:: tsbuild:: moduleResolution:: handles the modules and options from referenced project correctly", () => {
     function sys(optionsToExtend?: CompilerOptions) {
         return createWatchedSystem([
diff --git a/src/testRunner/unittests/tsbuildWatch/programUpdates.ts b/src/testRunner/unittests/tsbuildWatch/programUpdates.ts
index 652b729291..b890429f92 100644
--- a/src/testRunner/unittests/tsbuildWatch/programUpdates.ts
+++ b/src/testRunner/unittests/tsbuildWatch/programUpdates.ts
@@ -1,7 +1,7 @@
 import { TestFSWithWatch, isString, emptyArray, createSolutionBuilderWithWatchHost, createSolutionBuilderWithWatch, noop } from "../../ts";
 import { createWatchedSystem, File, TscWatchCompileChange, checkSingleTimeoutQueueLengthAndRun, libFile, verifyTscWatch, checkWatchedFiles, checkWatchedDirectories, checkOutputErrorsInitial, checkSingleTimeoutQueueLengthAndRunAndVerifyNoTimeout, WatchedSystem, projectRoot, runQueuedTimeoutCallbacks, noopChange, commonFile1, commonFile2 } from "../../ts.tscWatch";
-import * as ts from "../../ts";
-import projectsLocation = ts.TestFSWithWatch.tsbuildProjectsLocation;
+import projectsLocation = TestFSWithWatch.tsbuildProjectsLocation;
+
 describe("unittests:: tsbuildWatch:: watchMode:: program updates", () => {
     type TsBuildWatchSystem = TestFSWithWatch.TestServerHostTrackingWrittenFiles;
     function createTsBuildWatchSystem(fileOrFolderList: readonly TestFSWithWatch.FileOrFolderOrSymLink[], params?: TestFSWithWatch.TestServerHostCreationParameters) {
diff --git a/src/testRunner/unittests/tsserver/compileOnSave.ts b/src/testRunner/unittests/tsserver/compileOnSave.ts
index c80ef6f75c..9294be364e 100644
--- a/src/testRunner/unittests/tsserver/compileOnSave.ts
+++ b/src/testRunner/unittests/tsserver/compileOnSave.ts
@@ -1,9 +1,8 @@
-import { ServerHost, Session, protocol } from "../../ts.server";
+import { CommandNames, ServerHost, Session, protocol } from "../../ts.server";
 import { TestTypingsInstaller, File, makeSessionRequest, createServerHost, libFile, createSession, openFilesForSession, checkNumberOfProjects, checkProjectRootFiles, toExternalFiles, protocolTextSpanFromSubstring, TestSession, checkProjectActualFiles } from "../../ts.projectSystem";
 import { compareStringsCaseSensitive, map, arrayIsEqualTo, CompilerOptions, projectSystem, Extension, stringContains, emptyArray, formatStringFromArgs, Diagnostics, diagnosticCategoryName, changeExtension } from "../../ts";
 import { projectRoot } from "../../ts.tscWatch";
-import * as ts from "../../ts";
-import CommandNames = ts.server.CommandNames;
+
 function createTestTypingsInstaller(host: ServerHost) {
     return new TestTypingsInstaller("/a/data/", /*throttleLimit*/ 5, host);
 }
diff --git a/src/testRunner/unittests/tsserver/helpers.ts b/src/testRunner/unittests/tsserver/helpers.ts
index b27f23eb1b..2ff84496e4 100644
--- a/src/testRunner/unittests/tsserver/helpers.ts
+++ b/src/testRunner/unittests/tsserver/helpers.ts
@@ -1,11 +1,15 @@
-import { TestFSWithWatch, convertToObject, parseJsonText, Path, server, noop, returnFalse, returnUndefined, Debug, returnTrue, version, MapLike, notImplemented, TypeAcquisition, SortedReadonlyArray, isString, ESMap, map, filterMutate, sys, clear, mapDefined, isArray, HostCancellationToken, arrayFrom, mapDefinedIterator, normalizePath, forEachAncestorDirectory, combinePaths, directorySeparator, computeLineStarts, computeLineAndCharacterOfPosition, textSpanEnd, TextSpan, createTextSpan } from "../../ts";
+import { TestFSWithWatch, convertToObject, parseJsonText, Path, noop, returnFalse, returnUndefined, Debug, returnTrue, version, MapLike, notImplemented, TypeAcquisition, SortedReadonlyArray, isString, ESMap, map, filterMutate, sys, clear, mapDefined, isArray, HostCancellationToken, arrayFrom, mapDefinedIterator, normalizePath, forEachAncestorDirectory, combinePaths, directorySeparator, computeLineStarts, computeLineAndCharacterOfPosition, textSpanEnd, TextSpan, createTextSpan } from "../../ts";
 import { Baseline } from "../../Harness";
 import { ProjectService, Project, ITypingsInstaller, ServerHost, SetTypings, InvalidateCachedTypings, createInstallTypingsRequest, FileStats, ProjectServiceEvent, ProjectInfoTelemetryEventData, ProjectInfoTelemetryEvent, OpenFileInfo, OpenFileInfoTelemetryEventData, OpenFileInfoTelemetryEvent, SessionOptions, Session, LogLevel, toEvent, nullCancellationToken, ProjectServiceOptions, nullTypingsInstaller, ProjectKind, ServerCancellationToken } from "../../ts.server";
 import { byteLength } from "../../Utils";
 import * as ts from "../../ts";
-export import TI = ts.server.typingsInstaller;
-export import protocol = ts.server.protocol;
-export import CommandNames = ts.server.CommandNames;
+import { commonFile1, commonFile2 } from "../tscWatch/helpers";
+import * as TI from "../../../typingsInstallerCore/typingsInstaller";
+export { TI };
+import * as protocol from "../../../server/ts.server.protocol";
+export { protocol };
+import * as server from "../../../server/ts.server";
+export import CommandNames = server.CommandNames;
 export import TestServerHost = ts.TestFSWithWatch.TestServerHost;
 export type File = TestFSWithWatch.File;
 export type SymLink = TestFSWithWatch.SymLink;
@@ -17,8 +21,8 @@ export import checkWatchedFiles = ts.TestFSWithWatch.checkWatchedFiles;
 export import checkWatchedFilesDetailed = ts.TestFSWithWatch.checkWatchedFilesDetailed;
 export import checkWatchedDirectories = ts.TestFSWithWatch.checkWatchedDirectories;
 export import checkWatchedDirectoriesDetailed = ts.TestFSWithWatch.checkWatchedDirectoriesDetailed;
-export import commonFile1 = ts.tscWatch.commonFile1;
-export import commonFile2 = ts.tscWatch.commonFile2;
+export { commonFile1, commonFile2 };
+
 const outputEventRegex = /Content\-Length: [\d]+\r\n\r\n/;
 export function mapOutputToJson(s: string) {
     return convertToObject(parseJsonText("json.json", s.replace(outputEventRegex, "")), []);
diff --git a/src/testRunner/unittests/tsserver/session.ts b/src/testRunner/unittests/tsserver/session.ts
index 1da2b15303..d57e1ee3c9 100644
--- a/src/testRunner/unittests/tsserver/session.ts
+++ b/src/testRunner/unittests/tsserver/session.ts
@@ -4,8 +4,8 @@ import { mockHash } from "../../Harness";
 import { byteLength } from "../../Utils";
 import { nullLogger, createHasErrorMessageLogger } from "../../ts.projectSystem";
 import * as ts from "../../ts";
-const _chai: typeof import("chai") = require("chai");
-const expect: typeof _chai.expect = _chai.expect;
+import { expect } from "chai";
+
 let lastWrittenToHost: string;
 const noopFileWatcher: FileWatcher = { close: noop };
 const mockHost: ServerHost = {
diff --git a/src/testRunner/unittests/tsserver/typingsInstaller.ts b/src/testRunner/unittests/tsserver/typingsInstaller.ts
index d19467b157..8b44936c85 100644
--- a/src/testRunner/unittests/tsserver/typingsInstaller.ts
+++ b/src/testRunner/unittests/tsserver/typingsInstaller.ts
@@ -5,6 +5,8 @@ import { projects } from "../../ts.tscWatch";
 import * as ts from "../../ts";
 import validatePackageName = ts.JsTyping.validatePackageName;
 import NameValidationResult = ts.JsTyping.NameValidationResult;
+import { typingsName } from "../../../typingsInstallerCore/typingsInstaller";
+
 interface InstallerParams {
     globalTypingsCacheLocation?: string;
     throttleLimit?: number;
@@ -41,7 +43,6 @@ function trackingLogger(): {
         }
     };
 }
-import typingsName = ts.projectSystem.TI.typingsName;
 describe("unittests:: tsserver:: typingsInstaller:: local module", () => {
     it("should not be picked up", () => {
         const f1 = {
-- 
2.35.1

