From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Wed, 14 Sep 2022 16:33:10 -0700
Subject: [PATCH] One last test for esbuilding emitted output

---
 Gulpfile.js                | 17 +++++++++++------
 src/tsserver/nodeServer.ts |  2 +-
 2 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/Gulpfile.js b/Gulpfile.js
index c6df40edc5..ac8d5ac176 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -100,7 +100,8 @@ async function esbuild(entrypoint, outfile) {
         "--bundle",
         `--outfile=${outfile}`,
         "--platform=node",
-        "--target=node10", // Node 10; oldest benchmarker.
+        "--target=node12",
+        "--format=esm",
         "--sourcemap",
         "--external:./node_modules/*",
         "--conditions=require",
@@ -120,11 +121,15 @@ const writeHackyCJSShim = (infile, outfile) => {
     };
 };
 
+const writePackageJsonWithModuleType = (done) => {
+    fs.writeFileSync("./built/local/package.json", JSON.stringify({ name: "local", private: true, type: "module" }));
+    done();
+};
+
 /** @type {(infile: string, outfile: string) => (done: () => void) => void} */
 const writeHackyMJSShim = (infile, outfile) => {
     const writeHackyMJSShim = (done) => {
         const inRelativeToOut = infile = path.relative(path.dirname(outfile), infile);
-        fs.writeFileSync(path.join(path.dirname(outfile), "package.json"), JSON.stringify({ name: "local", private: true, type: "module" }));
         fs.writeFileSync(outfile, `import "./${inRelativeToOut}"`);
         done();
     };
@@ -187,9 +192,9 @@ const lkgPreBuild = parallel(generateLibs, series(buildScripts, generateDiagnost
 const buildTsc = () => buildProject("src/tsc");
 
 // task("tsc", series(preBundleFromSrc, bundleTscFromSrc)); // esbuild on ./src
-// task("tsc", series(preBundleFromEmit, bundleTscFromEmit)); // esbuild on emitted ./built/local
+task("tsc", series(preBuildSrc, buildTsc, writePackageJsonWithModuleType, bundleTscFromEmit)); // esbuild on emitted ./built/local
 // task("tsc", series(preBuildSrc, buildSrc, writeHackyCJSShim("./built/local/tsc/tsc.js", "./built/local/tsc.js"))); // CJS
-task("tsc", series(preBuildSrc, buildTsc, writeHackyMJSShim("./built/local/tsc/tsc.js", "./built/local/tsc.js"))); // MJS
+// task("tsc", series(preBuildSrc, buildTsc, writePackageJsonWithModuleType, writeHackyMJSShim("./built/local/tsc/tsc.js", "./built/local/tsc.js"))); // MJS
 task("tsc").description = "Builds the command-line compiler";
 
 const cleanTsc = () => cleanProject("src/tsc");
@@ -317,9 +322,9 @@ const buildServer = series(buildDynamicImportCompat, buildServerMain);
 buildServer.displayName = "buildServer";
 
 // task("tsserver", series(preBundleFromSrc, bundleServerFromSrc)); // esbuild on ./src
-// task("tsserver", series(preBundleFromEmit, bundleServerFromEmit)); // esbuild on emitted ./built/local
+task("tsserver", series(preBuildSrc, buildTypingsInstaller, buildServer, writePackageJsonWithModuleType, bundleServerFromEmit)); // esbuild on emitted ./built/local
 // task("tsserver", series(preBuildSrc, buildSrc, writeHackyCJSShim("./built/local/tsserver/server.js", "./built/local/tsserver.js"))); // CJS
-task("tsserver", series(preBuildSrc, buildTypingsInstaller, buildServerMain, writeHackyMJSShim("./built/local/tsserver/server.js", "./built/local/tsserver.js"))); // CJS
+// task("tsserver", series(preBuildSrc, buildTypingsInstaller, buildServerMain, writePackageJsonWithModuleType, writeHackyMJSShim("./built/local/tsserver/server.js", "./built/local/tsserver.js"))); // CJS
 task("tsserver").description = "Builds the language server";
 task("tsserver").flags = {
     "   --built": "Compile using the built version of the compiler."
diff --git a/src/tsserver/nodeServer.ts b/src/tsserver/nodeServer.ts
index 0d03ef0986..7c83cc6080 100644
--- a/src/tsserver/nodeServer.ts
+++ b/src/tsserver/nodeServer.ts
@@ -533,7 +533,7 @@ function startNodeSession(options: StartSessionOptions, logger: Logger, cancella
             }
 
             // TODO(jakebailey): fix this for module transform
-            this.installer = childProcess.fork(combinePaths(__dirname, "..", "typingsInstaller", "nodeTypingsInstaller.js"), args, { execArgv });
+            this.installer = childProcess.fork(combinePaths(__dirname, "typingsInstaller", "nodeTypingsInstaller.js"), args, { execArgv });
             this.installer.on("message", m => this.handleMessage(m));
 
             // We have to schedule this event to the next tick
-- 
2.37.1

