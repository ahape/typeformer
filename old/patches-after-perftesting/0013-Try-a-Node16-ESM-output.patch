From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Wed, 14 Sep 2022 14:05:55 -0700
Subject: [PATCH] Try a Node16 (ESM) output

---
 Gulpfile.js                                   |  17 ++-
 scripts/processDiagnosticMessages.ts          |   2 +-
 .../_namespaces/ts.moduleSpecifiers.ts        |   2 +-
 src/compiler/_namespaces/ts.performance.ts    |   2 +-
 src/compiler/_namespaces/ts.ts                | 140 +++++++++---------
 src/compiler/binder.ts                        |   2 +-
 src/compiler/builder.ts                       |   4 +-
 src/compiler/builderPublic.ts                 |   2 +-
 src/compiler/builderState.ts                  |   2 +-
 src/compiler/builderStatePublic.ts            |   2 +-
 src/compiler/checker.ts                       |   4 +-
 src/compiler/commandLineParser.ts             |   2 +-
 src/compiler/core.ts                          |   2 +-
 src/compiler/debug.ts                         |   4 +-
 src/compiler/emitter.ts                       |   4 +-
 src/compiler/factory/baseNodeFactory.ts       |   2 +-
 src/compiler/factory/emitHelpers.ts           |   2 +-
 src/compiler/factory/emitNode.ts              |   2 +-
 src/compiler/factory/nodeConverters.ts        |   2 +-
 src/compiler/factory/nodeFactory.ts           |   2 +-
 src/compiler/factory/nodeTests.ts             |   2 +-
 src/compiler/factory/parenthesizerRules.ts    |   2 +-
 src/compiler/factory/utilities.ts             |   2 +-
 src/compiler/factory/utilitiesPublic.ts       |   4 +-
 src/compiler/moduleNameResolver.ts            |   2 +-
 src/compiler/moduleSpecifiers.ts              |   2 +-
 src/compiler/parser.ts                        |   4 +-
 src/compiler/path.ts                          |   2 +-
 src/compiler/perfLogger.ts                    |   2 +-
 src/compiler/performance.ts                   |   2 +-
 src/compiler/performanceCore.ts               |   2 +-
 src/compiler/program.ts                       |   4 +-
 src/compiler/resolutionCache.ts               |   4 +-
 src/compiler/scanner.ts                       |   2 +-
 src/compiler/semver.ts                        |   2 +-
 src/compiler/sourcemap.ts                     |   2 +-
 src/compiler/symbolWalker.ts                  |   2 +-
 src/compiler/sys.ts                           |  12 +-
 src/compiler/tracing.ts                       |   5 +-
 src/compiler/transformer.ts                   |   2 +-
 src/compiler/transformers/classFields.ts      |   2 +-
 src/compiler/transformers/declarations.ts     |   2 +-
 .../transformers/declarations/diagnostics.ts  |   2 +-
 src/compiler/transformers/destructuring.ts    |   2 +-
 src/compiler/transformers/es2015.ts           |   2 +-
 src/compiler/transformers/es2016.ts           |   2 +-
 src/compiler/transformers/es2017.ts           |   2 +-
 src/compiler/transformers/es2018.ts           |   2 +-
 src/compiler/transformers/es2019.ts           |   2 +-
 src/compiler/transformers/es2020.ts           |   2 +-
 src/compiler/transformers/es2021.ts           |   2 +-
 src/compiler/transformers/es5.ts              |   2 +-
 src/compiler/transformers/esnext.ts           |   2 +-
 src/compiler/transformers/generators.ts       |   2 +-
 src/compiler/transformers/jsx.ts              |   2 +-
 src/compiler/transformers/legacyDecorators.ts |   2 +-
 .../transformers/module/esnextAnd2015.ts      |   2 +-
 src/compiler/transformers/module/module.ts    |   2 +-
 src/compiler/transformers/module/node.ts      |   2 +-
 src/compiler/transformers/module/system.ts    |   2 +-
 src/compiler/transformers/taggedTemplate.ts   |   2 +-
 src/compiler/transformers/ts.ts               |   2 +-
 src/compiler/transformers/typeSerializer.ts   |   2 +-
 src/compiler/transformers/utilities.ts        |   2 +-
 src/compiler/tsbuild.ts                       |   2 +-
 src/compiler/tsbuildPublic.ts                 |   4 +-
 src/compiler/types.ts                         |   2 +-
 src/compiler/utilities.ts                     |   2 +-
 src/compiler/utilitiesPublic.ts               |   2 +-
 src/compiler/visitorPublic.ts                 |   2 +-
 src/compiler/watch.ts                         |   4 +-
 src/compiler/watchPublic.ts                   |   4 +-
 src/compiler/watchUtilities.ts                |   4 +-
 src/debug/_namespaces/Debug.ts                |   2 +-
 src/debug/dbg.ts                              |   2 +-
 .../4.0/nodeFactoryTopLevelExports.ts         |   2 +-
 .../4.0/renamedMapInterfaces.ts               |   4 +-
 src/deprecatedCompat/4.0/renamedNodeTests.ts  |   4 +-
 .../4.2/abstractConstructorTypes.ts           |   4 +-
 src/deprecatedCompat/4.2/renamedNodeTests.ts  |   4 +-
 .../4.6/importTypeAssertions.ts               |   4 +-
 .../4.7/typeParameterModifiers.ts             |   4 +-
 .../4.8/mergeDecoratorsAndModifiers.ts        |  14 +-
 src/deprecatedCompat/_namespaces/ts.ts        |  20 +--
 src/deprecatedCompat/deprecations.ts          |   2 +-
 .../_namespaces/ts.server.ts                  |   2 +-
 src/dynamicImportCompat/_namespaces/ts.ts     |   2 +-
 src/executeCommandLine/_namespaces/ts.ts      |   4 +-
 src/executeCommandLine/executeCommandLine.ts  |   4 +-
 src/harness/_namespaces/FourSlash.ts          |   2 +-
 src/harness/_namespaces/FourSlashInterface.ts |   2 +-
 .../_namespaces/Harness.LanguageService.ts    |   2 +-
 .../_namespaces/Harness.SourceMapRecorder.ts  |   2 +-
 src/harness/_namespaces/Harness.ts            |  10 +-
 src/harness/_namespaces/Utils.ts              |   6 +-
 src/harness/_namespaces/collections.ts        |   2 +-
 src/harness/_namespaces/compiler.ts           |   2 +-
 src/harness/_namespaces/documents.ts          |   2 +-
 src/harness/_namespaces/evaluator.ts          |   2 +-
 src/harness/_namespaces/fakes.ts              |   2 +-
 src/harness/_namespaces/ts.TestFSWithWatch.ts |   2 +-
 src/harness/_namespaces/ts.server.ts          |   8 +-
 src/harness/_namespaces/ts.ts                 |  18 +--
 src/harness/_namespaces/vfs.ts                |   2 +-
 src/harness/_namespaces/vpath.ts              |   2 +-
 src/harness/client.ts                         |   4 +-
 src/harness/collectionsImpl.ts                |   2 +-
 src/harness/compilerImpl.ts                   |  14 +-
 src/harness/documentsUtil.ts                  |   6 +-
 src/harness/evaluatorImpl.ts                  |  12 +-
 src/harness/fakesHosts.ts                     |  14 +-
 src/harness/fourslashImpl.ts                  |  14 +-
 src/harness/fourslashInterfaceImpl.ts         |   4 +-
 src/harness/harnessGlobals.ts                 |   2 +-
 src/harness/harnessIO.ts                      |  16 +-
 src/harness/harnessLanguageService.ts         |  14 +-
 src/harness/harnessUtils.ts                   |   4 +-
 src/harness/runnerbase.ts                     |   6 +-
 src/harness/sourceMapRecorder.ts              |   8 +-
 src/harness/typeWriter.ts                     |   4 +-
 src/harness/util.ts                           |   4 +-
 src/harness/vfsUtil.ts                        |  10 +-
 src/harness/virtualFileSystemWithWatch.ts     |   6 +-
 src/harness/vpathUtil.ts                      |   4 +-
 src/jsTyping/_namespaces/ts.JsTyping.ts       |   2 +-
 src/jsTyping/_namespaces/ts.server.ts         |   4 +-
 src/jsTyping/_namespaces/ts.ts                |   6 +-
 src/jsTyping/jsTyping.ts                      |   2 +-
 src/jsTyping/shared.ts                        |   2 +-
 src/jsTyping/types.ts                         |   4 +-
 src/loggedIO/_namespaces/Harness.ts           |   4 +-
 src/loggedIO/_namespaces/Playback.ts          |   2 +-
 src/loggedIO/_namespaces/ts.server.ts         |  10 +-
 src/loggedIO/_namespaces/ts.ts                |  14 +-
 src/loggedIO/loggedIO.ts                      |   4 +-
 src/package.json                              |   5 +
 src/server/_namespaces/ts.server.protocol.ts  |   2 +-
 src/server/_namespaces/ts.server.ts           |  26 ++--
 src/server/_namespaces/ts.ts                  |   8 +-
 src/server/editorServices.ts                  |   4 +-
 src/server/moduleSpecifierCache.ts            |   2 +-
 src/server/packageJsonCache.ts                |   4 +-
 src/server/project.ts                         |   6 +-
 src/server/protocol.ts                        |   4 +-
 src/server/scriptInfo.ts                      |   4 +-
 src/server/scriptVersionCache.ts              |   4 +-
 src/server/session.ts                         |   4 +-
 src/server/types.ts                           |   2 +-
 src/server/typingsCache.ts                    |   4 +-
 src/server/utilities.ts                       |   4 +-
 src/server/utilitiesPublic.ts                 |   4 +-
 .../_namespaces/ts.BreakpointResolver.ts      |   2 +-
 src/services/_namespaces/ts.CallHierarchy.ts  |   2 +-
 .../ts.Completions.StringCompletions.ts       |   2 +-
 src/services/_namespaces/ts.Completions.ts    |   4 +-
 .../_namespaces/ts.FindAllReferences.ts       |   4 +-
 src/services/_namespaces/ts.GoToDefinition.ts |   2 +-
 src/services/_namespaces/ts.InlayHints.ts     |   2 +-
 src/services/_namespaces/ts.JsDoc.ts          |   2 +-
 src/services/_namespaces/ts.NavigateTo.ts     |   2 +-
 src/services/_namespaces/ts.NavigationBar.ts  |   2 +-
 .../_namespaces/ts.OrganizeImports.ts         |   2 +-
 .../ts.OutliningElementsCollector.ts          |   2 +-
 src/services/_namespaces/ts.Rename.ts         |   2 +-
 src/services/_namespaces/ts.SignatureHelp.ts  |   2 +-
 .../_namespaces/ts.SmartSelectionRange.ts     |   2 +-
 src/services/_namespaces/ts.SymbolDisplay.ts  |   2 +-
 src/services/_namespaces/ts.classifier.ts     |   2 +-
 .../_namespaces/ts.classifier.v2020.ts        |   2 +-
 src/services/_namespaces/ts.codefix.ts        | 136 ++++++++---------
 src/services/_namespaces/ts.formatting.ts     |  14 +-
 ...factor.addOrRemoveBracesToArrowFunction.ts |   4 +-
 ...onvertArrowFunctionOrFunctionExpression.ts |   2 +-
 ...actor.convertParamsToDestructuredObject.ts |   2 +-
 ...refactor.convertStringOrTemplateLiteral.ts |   2 +-
 ...factor.convertToOptionalChainExpression.ts |   2 +-
 .../_namespaces/ts.refactor.extractSymbol.ts  |   2 +-
 ...actor.generateGetAccessorAndSetAccessor.ts |   2 +-
 .../ts.refactor.inferFunctionReturnType.ts    |   2 +-
 src/services/_namespaces/ts.refactor.ts       |  28 ++--
 src/services/_namespaces/ts.textChanges.ts    |   2 +-
 src/services/_namespaces/ts.ts                |  74 ++++-----
 src/services/breakpoints.ts                   |   2 +-
 src/services/callHierarchy.ts                 |   2 +-
 src/services/classifier.ts                    |   2 +-
 src/services/classifier2020.ts                |   2 +-
 src/services/codeFixProvider.ts               |   2 +-
 ...dConvertToUnknownForNonOverlappingTypes.ts |   4 +-
 .../codefixes/addEmptyExportDeclaration.ts    |   6 +-
 src/services/codefixes/addMissingAsync.ts     |   4 +-
 src/services/codefixes/addMissingAwait.ts     |   4 +-
 src/services/codefixes/addMissingConst.ts     |   4 +-
 .../codefixes/addMissingDeclareProperty.ts    |   4 +-
 .../addMissingInvocationForDecorator.ts       |   4 +-
 .../codefixes/addNameToNamelessParameter.ts   |   4 +-
 .../codefixes/addOptionalPropertyUndefined.ts |   4 +-
 .../codefixes/annotateWithTypeFromJSDoc.ts    |   4 +-
 src/services/codefixes/convertConstToLet.ts   |   4 +-
 .../codefixes/convertFunctionToEs6Class.ts    |   4 +-
 .../convertLiteralTypeToMappedType.ts         |   4 +-
 .../codefixes/convertToAsyncFunction.ts       |   4 +-
 src/services/codefixes/convertToEsModule.ts   |   4 +-
 .../codefixes/convertToMappedObjectType.ts    |   4 +-
 .../codefixes/convertToTypeOnlyExport.ts      |   4 +-
 .../codefixes/convertToTypeOnlyImport.ts      |   4 +-
 ...correctQualifiedNameToIndexedAccessType.ts |   4 +-
 .../codefixes/disableJsDiagnostics.ts         |   4 +-
 .../codefixes/fixAddMissingConstraint.ts      |   4 +-
 src/services/codefixes/fixAddMissingMember.ts |   4 +-
 .../codefixes/fixAddMissingNewOperator.ts     |   4 +-
 .../fixAddModuleReferTypeMissingTypeof.ts     |   4 +-
 src/services/codefixes/fixAddVoidToPromise.ts |   6 +-
 .../codefixes/fixAwaitInSyncFunction.ts       |   4 +-
 src/services/codefixes/fixCannotFindModule.ts |   4 +-
 ...sDoesntImplementInheritedAbstractMember.ts |   4 +-
 .../fixClassIncorrectlyImplementsInterface.ts |   4 +-
 .../fixClassSuperMustPrecedeThisAccess.ts     |   4 +-
 .../fixConstructorForDerivedNeedSuperCall.ts  |   4 +-
 .../fixEnableExperimentalDecorators.ts        |   4 +-
 src/services/codefixes/fixEnableJsxFlag.ts    |   4 +-
 src/services/codefixes/fixExpectedComma.ts    |   4 +-
 .../fixExtendsInterfaceBecomesImplements.ts   |   4 +-
 .../fixForgottenThisPropertyAccess.ts         |   4 +-
 src/services/codefixes/fixImplicitThis.ts     |   4 +-
 .../codefixes/fixIncorrectNamedTupleSyntax.ts |   4 +-
 .../codefixes/fixInvalidImportSyntax.ts       |   4 +-
 .../codefixes/fixInvalidJsxCharacters.ts      |   4 +-
 src/services/codefixes/fixJSDocTypes.ts       |   4 +-
 .../codefixes/fixMissingCallParentheses.ts    |   4 +-
 .../codefixes/fixModuleAndTargetOptions.ts    |   4 +-
 .../fixNoPropertyAccessFromIndexSignature.ts  |   4 +-
 src/services/codefixes/fixOverrideModifier.ts |   4 +-
 .../codefixes/fixPropertyAssignment.ts        |   4 +-
 .../codefixes/fixPropertyOverrideAccessor.ts  |   4 +-
 .../codefixes/fixReturnTypeInAsyncFunction.ts |   4 +-
 src/services/codefixes/fixSpelling.ts         |   4 +-
 .../codefixes/fixStrictClassInitialization.ts |   4 +-
 .../codefixes/fixUnmatchedParameter.ts        |   4 +-
 src/services/codefixes/fixUnreachableCode.ts  |   4 +-
 .../fixUnreferenceableDecoratorMetadata.ts    |   4 +-
 src/services/codefixes/fixUnusedIdentifier.ts |   4 +-
 src/services/codefixes/fixUnusedLabel.ts      |   4 +-
 src/services/codefixes/generateAccessors.ts   |   2 +-
 src/services/codefixes/helpers.ts             |   4 +-
 src/services/codefixes/importFixes.ts         |   4 +-
 src/services/codefixes/inferFromUsage.ts      |   4 +-
 .../removeAccidentalCallParentheses.ts        |   4 +-
 .../codefixes/removeUnnecessaryAwait.ts       |   4 +-
 src/services/codefixes/requireInTs.ts         |   4 +-
 src/services/codefixes/returnValueCorrect.ts  |   4 +-
 src/services/codefixes/splitTypeOnlyImport.ts |   4 +-
 src/services/codefixes/useBigintLiteral.ts    |   4 +-
 src/services/codefixes/useDefaultImport.ts    |   4 +-
 src/services/codefixes/wrapJsxInFragment.ts   |   4 +-
 src/services/completions.ts                   |   4 +-
 src/services/documentHighlights.ts            |   2 +-
 src/services/documentRegistry.ts              |   2 +-
 src/services/exportAsModule.ts                |   2 +-
 src/services/exportInfoMap.ts                 |   2 +-
 src/services/findAllReferences.ts             |   4 +-
 src/services/formatting/formatting.ts         |   4 +-
 src/services/formatting/formattingContext.ts  |   4 +-
 src/services/formatting/formattingScanner.ts  |   4 +-
 src/services/formatting/rule.ts               |   4 +-
 src/services/formatting/rules.ts              |   4 +-
 src/services/formatting/rulesMap.ts           |   4 +-
 src/services/formatting/smartIndenter.ts      |   4 +-
 src/services/getEditsForFileRename.ts         |   2 +-
 src/services/globalThisShim.ts                |   2 +-
 src/services/goToDefinition.ts                |   2 +-
 src/services/importTracker.ts                 |   2 +-
 src/services/inlayHints.ts                    |   2 +-
 src/services/jsDoc.ts                         |   2 +-
 src/services/navigateTo.ts                    |   2 +-
 src/services/navigationBar.ts                 |   2 +-
 src/services/organizeImports.ts               |   2 +-
 src/services/outliningElementsCollector.ts    |   2 +-
 src/services/patternMatcher.ts                |   2 +-
 src/services/preProcess.ts                    |   2 +-
 src/services/refactorProvider.ts              |   4 +-
 .../addOrRemoveBracesToArrowFunction.ts       |   4 +-
 ...onvertArrowFunctionOrFunctionExpression.ts |   4 +-
 src/services/refactors/convertExport.ts       |   4 +-
 src/services/refactors/convertImport.ts       |   4 +-
 .../convertOverloadListToSingleSignature.ts   |   4 +-
 .../convertParamsToDestructuredObject.ts      |   4 +-
 .../convertStringOrTemplateLiteral.ts         |   4 +-
 .../convertToOptionalChainExpression.ts       |   4 +-
 src/services/refactors/extractSymbol.ts       |   4 +-
 src/services/refactors/extractType.ts         |   4 +-
 .../generateGetAccessorAndSetAccessor.ts      |   4 +-
 .../refactors/inferFunctionReturnType.ts      |   4 +-
 src/services/refactors/moveToNewFile.ts       |   4 +-
 src/services/rename.ts                        |   4 +-
 src/services/services.ts                      |   8 +-
 src/services/shims.ts                         |   2 +-
 src/services/signatureHelp.ts                 |   2 +-
 src/services/smartSelection.ts                |   2 +-
 src/services/sourcemaps.ts                    |   4 +-
 src/services/stringCompletions.ts             |   4 +-
 src/services/suggestionDiagnostics.ts         |   2 +-
 src/services/symbolDisplay.ts                 |   2 +-
 src/services/textChanges.ts                   |   2 +-
 src/services/transform.ts                     |   2 +-
 src/services/transpile.ts                     |   2 +-
 src/services/types.ts                         |  22 +--
 src/services/utilities.ts                     |   2 +-
 src/testRunner/_namespaces/FourSlash.ts       |   4 +-
 .../_namespaces/Harness.Parallel.Host.ts      |   2 +-
 .../_namespaces/Harness.Parallel.Worker.ts    |   2 +-
 .../_namespaces/Harness.Parallel.ts           |   6 +-
 src/testRunner/_namespaces/Harness.ts         |  16 +-
 src/testRunner/_namespaces/Playback.ts        |   4 +-
 src/testRunner/_namespaces/RWC.ts             |   2 +-
 src/testRunner/_namespaces/Utils.ts           |   4 +-
 src/testRunner/_namespaces/compiler.ts        |   4 +-
 src/testRunner/_namespaces/documents.ts       |   4 +-
 src/testRunner/_namespaces/evaluator.ts       |   4 +-
 src/testRunner/_namespaces/fakes.ts           |   4 +-
 src/testRunner/_namespaces/project.ts         |   2 +-
 .../_namespaces/ts.projectSystem.ts           |   2 +-
 src/testRunner/_namespaces/ts.server.ts       |  12 +-
 src/testRunner/_namespaces/ts.ts              |  36 ++---
 src/testRunner/_namespaces/ts.tscWatch.ts     |   2 +-
 src/testRunner/_namespaces/vfs.ts             |   4 +-
 src/testRunner/_namespaces/vpath.ts           |   4 +-
 src/testRunner/compilerRunner.ts              |  10 +-
 src/testRunner/externalCompileRunner.ts       |   4 +-
 src/testRunner/fourslashRunner.ts             |   6 +-
 src/testRunner/parallel/host.ts               |  12 +-
 src/testRunner/parallel/shared.ts             |   4 +-
 src/testRunner/parallel/worker.ts             |   6 +-
 src/testRunner/projectsRunner.ts              |  14 +-
 src/testRunner/runner.ts                      |  12 +-
 src/testRunner/rwcRunner.ts                   |  10 +-
 src/testRunner/test262Runner.ts               |  10 +-
 src/testRunner/unittests/asserts.ts           |   2 +-
 src/testRunner/unittests/base64.ts            |   2 +-
 src/testRunner/unittests/builder.ts           |   2 +-
 src/testRunner/unittests/comments.ts          |   2 +-
 src/testRunner/unittests/compilerCore.ts      |   2 +-
 .../unittests/config/commandLineParsing.ts    |   2 +-
 .../config/configurationExtension.ts          |   6 +-
 .../config/convertCompilerOptionsFromJson.ts  |   6 +-
 .../config/convertTypeAcquisitionFromJson.ts  |   6 +-
 .../unittests/config/initializeTSConfig.ts    |   4 +-
 src/testRunner/unittests/config/matchFiles.ts |   6 +-
 .../unittests/config/projectReferences.ts     |   6 +-
 src/testRunner/unittests/config/showConfig.ts |   4 +-
 .../unittests/config/tsconfigParsing.ts       |   6 +-
 .../config/tsconfigParsingWatchOptions.ts     |   6 +-
 src/testRunner/unittests/convertToBase64.ts   |   2 +-
 src/testRunner/unittests/customTransforms.ts  |   4 +-
 src/testRunner/unittests/debugDeprecation.ts  |   4 +-
 .../unittests/evaluation/arraySpread.ts       |   2 +-
 .../unittests/evaluation/asyncArrow.ts        |   2 +-
 .../unittests/evaluation/asyncGenerator.ts    |   4 +-
 .../unittests/evaluation/autoAccessors.ts     |   6 +-
 .../unittests/evaluation/awaiter.ts           |   2 +-
 .../unittests/evaluation/destructuring.ts     |   4 +-
 .../unittests/evaluation/externalModules.ts   |  24 +--
 .../unittests/evaluation/forAwaitOf.ts        |   4 +-
 src/testRunner/unittests/evaluation/forOf.ts  |   6 +-
 .../unittests/evaluation/objectRest.ts        |   2 +-
 .../unittests/evaluation/optionalCall.ts      |   2 +-
 .../evaluation/superInStaticInitializer.ts    |   6 +-
 .../unittests/evaluation/templateLiteral.ts   |   2 +-
 .../evaluation/updateExpressionInModule.ts    |   6 +-
 src/testRunner/unittests/factory.ts           |   2 +-
 src/testRunner/unittests/helpers.ts           |   2 +-
 src/testRunner/unittests/incrementalParser.ts |   4 +-
 src/testRunner/unittests/jsDocParsing.ts      |   6 +-
 .../unittests/jsonParserRecovery.ts           |   4 +-
 src/testRunner/unittests/moduleResolution.ts  |   6 +-
 src/testRunner/unittests/parsePseudoBigInt.ts |   2 +-
 src/testRunner/unittests/paths.ts             |   2 +-
 src/testRunner/unittests/printer.ts           |   8 +-
 src/testRunner/unittests/programApi.ts        |  10 +-
 src/testRunner/unittests/publicApi.ts         |  12 +-
 .../unittests/reuseProgramStructure.ts        |   4 +-
 src/testRunner/unittests/semver.ts            |   4 +-
 .../cancellableLanguageServiceOperations.ts   |   4 +-
 .../unittests/services/colorization.ts        |   4 +-
 .../services/convertToAsyncFunction.ts        |   6 +-
 .../unittests/services/documentRegistry.ts    |   2 +-
 .../unittests/services/extract/constants.ts   |   2 +-
 .../unittests/services/extract/functions.ts   |   2 +-
 .../unittests/services/extract/helpers.ts     |   4 +-
 .../unittests/services/extract/ranges.ts      |   2 +-
 .../services/extract/symbolWalker.ts          |   4 +-
 .../unittests/services/hostNewLineSupport.ts  |   4 +-
 .../unittests/services/languageService.ts     |   2 +-
 .../unittests/services/organizeImports.ts     |   4 +-
 .../unittests/services/patternMatcher.ts      |   2 +-
 .../unittests/services/preProcessFile.ts      |   2 +-
 .../unittests/services/textChanges.ts         |   4 +-
 .../unittests/services/transpile.ts           |   4 +-
 src/testRunner/unittests/transform.ts         |  12 +-
 .../unittests/tsbuild/amdModulesWithOut.ts    |   4 +-
 src/testRunner/unittests/tsbuild/clean.ts     |   4 +-
 .../unittests/tsbuild/configFileErrors.ts     |   4 +-
 .../unittests/tsbuild/configFileExtends.ts    |   4 +-
 .../tsbuild/containerOnlyReferenced.ts        |   2 +-
 .../unittests/tsbuild/declarationEmit.ts      |   6 +-
 src/testRunner/unittests/tsbuild/demo.ts      |   4 +-
 .../unittests/tsbuild/emitDeclarationOnly.ts  |   4 +-
 .../unittests/tsbuild/emptyFiles.ts           |   4 +-
 .../unittests/tsbuild/exitCodeOnBogusFile.ts  |   2 +-
 .../unittests/tsbuild/graphOrdering.ts        |   6 +-
 src/testRunner/unittests/tsbuild/helpers.ts   |  10 +-
 .../inferredTypeFromTransitiveModule.ts       |   4 +-
 .../tsbuild/javascriptProjectEmit.ts          |   4 +-
 .../unittests/tsbuild/lateBoundSymbol.ts      |   2 +-
 .../unittests/tsbuild/moduleResolution.ts     |   4 +-
 .../unittests/tsbuild/moduleSpecifiers.ts     |   4 +-
 .../unittests/tsbuild/noEmitOnError.ts        |   4 +-
 src/testRunner/unittests/tsbuild/outFile.ts   |   6 +-
 .../unittests/tsbuild/outputPaths.ts          |   4 +-
 src/testRunner/unittests/tsbuild/publicApi.ts |   6 +-
 .../tsbuild/referencesWithRootDirInParent.ts  |   4 +-
 .../unittests/tsbuild/resolveJsonModule.ts    |   4 +-
 src/testRunner/unittests/tsbuild/sample.ts    |   8 +-
 .../unittests/tsbuild/transitiveReferences.ts |   4 +-
 .../tsbuildWatch/configFileErrors.ts          |   6 +-
 src/testRunner/unittests/tsbuildWatch/demo.ts |   4 +-
 .../tsbuildWatch/moduleResolution.ts          |   6 +-
 .../unittests/tsbuildWatch/noEmit.ts          |   4 +-
 .../unittests/tsbuildWatch/noEmitOnError.ts   |   4 +-
 .../unittests/tsbuildWatch/programUpdates.ts  |   6 +-
 .../tsbuildWatch/projectsBuilding.ts          |   4 +-
 .../unittests/tsbuildWatch/publicApi.ts       |   4 +-
 .../unittests/tsbuildWatch/reexport.ts        |   4 +-
 .../tsbuildWatch/watchEnvironment.ts          |   2 +-
 .../unittests/tsc/cancellationToken.ts        |   8 +-
 src/testRunner/unittests/tsc/composite.ts     |   4 +-
 .../unittests/tsc/declarationEmit.ts          |   4 +-
 .../tsc/forceConsistentCasingInFileNames.ts   |   6 +-
 src/testRunner/unittests/tsc/helpers.ts       |   8 +-
 src/testRunner/unittests/tsc/incremental.ts   |   6 +-
 src/testRunner/unittests/tsc/listFilesOnly.ts |   4 +-
 .../unittests/tsc/projectReferences.ts        |   2 +-
 src/testRunner/unittests/tsc/redirect.ts      |   2 +-
 .../unittests/tsc/runWithoutArgs.ts           |   2 +-
 .../unittests/tscWatch/consoleClearing.ts     |   2 +-
 src/testRunner/unittests/tscWatch/emit.ts     |   2 +-
 .../unittests/tscWatch/emitAndErrorUpdates.ts |   2 +-
 .../forceConsistentCasingInFileNames.ts       |   4 +-
 src/testRunner/unittests/tscWatch/helpers.ts  |   6 +-
 .../unittests/tscWatch/incremental.ts         |   4 +-
 .../unittests/tscWatch/moduleResolution.ts    |   6 +-
 .../unittests/tscWatch/nodeNextWatch.ts       |   6 +-
 .../unittests/tscWatch/programUpdates.ts      |   4 +-
 .../tscWatch/projectsWithReferences.ts        |   4 +-
 .../unittests/tscWatch/resolutionCache.ts     |   2 +-
 .../sourceOfProjectReferenceRedirect.ts       |   2 +-
 src/testRunner/unittests/tscWatch/watchApi.ts |   4 +-
 .../unittests/tscWatch/watchEnvironment.ts    |   2 +-
 .../tsserver/applyChangesToOpenFiles.ts       |   2 +-
 .../unittests/tsserver/autoImportProvider.ts  |   2 +-
 .../unittests/tsserver/auxiliaryProject.ts    |   2 +-
 .../tsserver/cachingFileSystemInformation.ts  |   2 +-
 .../unittests/tsserver/cancellationToken.ts   |   2 +-
 .../unittests/tsserver/compileOnSave.ts       |   2 +-
 .../unittests/tsserver/completions.ts         |   2 +-
 .../tsserver/completionsIncomplete.ts         |   2 +-
 .../unittests/tsserver/configFileSearch.ts    |   2 +-
 .../unittests/tsserver/configuredProjects.ts  |   2 +-
 .../unittests/tsserver/declarationFileMaps.ts |   2 +-
 .../unittests/tsserver/documentRegistry.ts    |   2 +-
 .../unittests/tsserver/duplicatePackages.ts   |   2 +-
 .../unittests/tsserver/dynamicFiles.ts        |   4 +-
 .../tsserver/events/largeFileReferenced.ts    |   2 +-
 .../events/projectLanguageServiceState.ts     |   2 +-
 .../tsserver/events/projectLoading.ts         |   2 +-
 .../events/projectUpdatedInBackground.ts      |   2 +-
 .../unittests/tsserver/exportMapCache.ts      |   2 +-
 .../unittests/tsserver/externalProjects.ts    |   4 +-
 .../forceConsistentCasingInFileNames.ts       |   2 +-
 .../unittests/tsserver/formatSettings.ts      |   2 +-
 .../tsserver/getApplicableRefactors.ts        |   2 +-
 .../tsserver/getEditsForFileRename.ts         |   2 +-
 .../unittests/tsserver/getExportReferences.ts |   2 +-
 .../unittests/tsserver/getFileReferences.ts   |   2 +-
 src/testRunner/unittests/tsserver/helpers.ts  |   6 +-
 .../unittests/tsserver/importHelpers.ts       |   2 +-
 .../unittests/tsserver/inferredProjects.ts    |   2 +-
 .../unittests/tsserver/inlayHints.ts          |   2 +-
 src/testRunner/unittests/tsserver/jsdocTag.ts |   2 +-
 .../unittests/tsserver/languageService.ts     |   4 +-
 .../tsserver/maxNodeModuleJsDepth.ts          |   2 +-
 .../unittests/tsserver/metadataInResponse.ts  |   4 +-
 .../unittests/tsserver/moduleResolution.ts    |   6 +-
 .../tsserver/moduleSpecifierCache.ts          |   2 +-
 src/testRunner/unittests/tsserver/navTo.ts    |   2 +-
 .../unittests/tsserver/occurences.ts          |   2 +-
 src/testRunner/unittests/tsserver/openFile.ts |   2 +-
 .../unittests/tsserver/packageJsonInfo.ts     |   2 +-
 .../tsserver/partialSemanticServer.ts         |   2 +-
 src/testRunner/unittests/tsserver/plugins.ts  |   6 +-
 .../unittests/tsserver/projectErrors.ts       |   4 +-
 .../tsserver/projectReferenceCompileOnSave.ts |   4 +-
 .../tsserver/projectReferenceErrors.ts        |   2 +-
 .../unittests/tsserver/projectReferences.ts   |   4 +-
 .../tsserver/projectReferencesSourcemap.ts    |   4 +-
 src/testRunner/unittests/tsserver/projects.ts |   2 +-
 .../tsserver/projectsWithReferences.ts        |   4 +-
 .../unittests/tsserver/refactors.ts           |   2 +-
 src/testRunner/unittests/tsserver/reload.ts   |   2 +-
 .../unittests/tsserver/reloadProjects.ts      |   2 +-
 src/testRunner/unittests/tsserver/rename.ts   |   2 +-
 .../unittests/tsserver/resolutionCache.ts     |   2 +-
 src/testRunner/unittests/tsserver/session.ts  |   6 +-
 .../unittests/tsserver/skipLibCheck.ts        |   2 +-
 .../unittests/tsserver/smartSelection.ts      |   2 +-
 src/testRunner/unittests/tsserver/symLinks.ts |   2 +-
 .../unittests/tsserver/symlinkCache.ts        |   2 +-
 .../unittests/tsserver/syntacticServer.ts     |   2 +-
 .../unittests/tsserver/syntaxOperations.ts    |   2 +-
 .../unittests/tsserver/telemetry.ts           |   2 +-
 .../unittests/tsserver/textStorage.ts         |   2 +-
 .../unittests/tsserver/typeAquisition.ts      |   2 +-
 .../tsserver/typeOnlyImportChains.ts          |   2 +-
 .../tsserver/typeReferenceDirectives.ts       |   2 +-
 .../unittests/tsserver/typingsInstaller.ts    |   2 +-
 .../unittests/tsserver/versionCache.ts        |   4 +-
 .../unittests/tsserver/watchEnvironment.ts    |   2 +-
 .../unittests/tsserver/webServer.ts           |   4 +-
 src/tsc/_namespaces/ts.ts                     |   4 +-
 src/tsc/tsc.ts                                |   2 +-
 src/tsconfig-base.json                        |   3 +-
 src/tsserver/_namespaces/ts.server.ts         |  12 +-
 src/tsserver/_namespaces/ts.ts                |  14 +-
 src/tsserver/nodeServer.ts                    |  13 +-
 src/tsserver/server.ts                        |   7 +-
 src/tsserver/webServer.ts                     |   8 +-
 src/tsserverlibrary/_namespaces/ts.server.ts  |   4 +-
 src/tsserverlibrary/_namespaces/ts.ts         |  12 +-
 src/tsserverlibrary/tsserverlibrary.ts        |   2 +-
 src/typescript/_namespaces/ts.ts              |   8 +-
 src/typescript/typescript.ts                  |   4 +-
 src/typingsInstaller/_namespaces/ts.server.ts |   6 +-
 .../_namespaces/ts.server.typingsInstaller.ts |   4 +-
 src/typingsInstaller/_namespaces/ts.ts        |   8 +-
 src/typingsInstaller/nodeTypingsInstaller.ts  |  14 +-
 .../_namespaces/ts.server.ts                  |   4 +-
 .../_namespaces/ts.server.typingsInstaller.ts |   2 +-
 src/typingsInstallerCore/_namespaces/ts.ts    |   6 +-
 src/typingsInstallerCore/typingsInstaller.ts  |   4 +-
 src/webServer/_namespaces/ts.server.ts        |   6 +-
 src/webServer/_namespaces/ts.ts               |  10 +-
 src/webServer/webServer.ts                    |   6 +-
 551 files changed, 1330 insertions(+), 1288 deletions(-)
 create mode 100644 src/package.json

diff --git a/Gulpfile.js b/Gulpfile.js
index 259b398420..4824c1e2fc 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -120,6 +120,16 @@ const writeHackyCJSShim = (infile, outfile) => {
     };
 };
 
+/** @type {(infile: string, outfile: string) => (done: () => void) => void} */
+const writeHackyMJSShim = (infile, outfile) => {
+    return (done) => {
+        const inRelativeToOut = infile = path.relative(path.dirname(outfile), infile);
+        fs.writeFileSync(path.join(path.dirname(outfile), "package.json"), JSON.stringify({ name: "local", private: true, type: "module" }));
+        fs.writeFileSync(outfile, `import "./${inRelativeToOut}"`);
+        done();
+    };
+};
+
 const preBundleFromSrc = parallel(generateLibs, series(buildScripts, generateDiagnostics, localize));
 const preBuildSrc = preBundleFromSrc;
 const preBundleFromEmit = series(preBundleFromSrc, buildSrc);
@@ -177,7 +187,8 @@ const buildTsc = () => buildProject("src/tsc");
 
 // task("tsc", series(preBundleFromSrc, bundleTscFromSrc)); // esbuild on ./src
 // task("tsc", series(preBundleFromEmit, bundleTscFromEmit)); // esbuild on emitted ./built/local
-task("tsc", series(preBuildSrc, buildSrc, writeHackyCJSShim("./built/local/tsc/tsc.js", "./built/local/tsc.js"))); // CJS
+// task("tsc", series(preBuildSrc, buildSrc, writeHackyCJSShim("./built/local/tsc/tsc.js", "./built/local/tsc.js"))); // CJS
+task("tsc", series(preBuildSrc, buildSrc, writeHackyMJSShim("./built/local/tsc/tsc.js", "./built/local/tsc.js"))); // MJS
 task("tsc").description = "Builds the command-line compiler";
 
 const cleanTsc = () => cleanProject("src/tsc");
@@ -300,8 +311,8 @@ buildServer.displayName = "buildServer";
 
 // task("tsserver", series(preBundleFromSrc, bundleServerFromSrc)); // esbuild on ./src
 // task("tsserver", series(preBundleFromEmit, bundleServerFromEmit)); // esbuild on emitted ./built/local
-
-task("tsserver", series(preBuildSrc, buildSrc, writeHackyCJSShim("./built/local/tsserver/server.js", "./built/local/tsserver.js"))); // CJS
+// task("tsserver", series(preBuildSrc, buildSrc, writeHackyCJSShim("./built/local/tsserver/server.js", "./built/local/tsserver.js"))); // CJS
+task("tsserver", series(preBuildSrc, buildSrc, writeHackyMJSShim("./built/local/tsserver/server.js", "./built/local/tsserver.js"))); // CJS
 task("tsserver").description = "Builds the language server";
 task("tsserver").flags = {
     "   --built": "Compile using the built version of the compiler."
diff --git a/scripts/processDiagnosticMessages.ts b/scripts/processDiagnosticMessages.ts
index 29e66d656b..f437b5b9ab 100644
--- a/scripts/processDiagnosticMessages.ts
+++ b/scripts/processDiagnosticMessages.ts
@@ -61,7 +61,7 @@ function buildInfoFileOutput(messageTable: InputDiagnosticMessageTable, inputFil
         "// <auto-generated />",
         `// generated from '${inputFilePathRel}'`,
         "",
-        "import { DiagnosticCategory, DiagnosticMessage } from \"./types\";",
+        "import { DiagnosticCategory, DiagnosticMessage } from \"./types.js\";",
         "",
         "function diag(code: number, category: DiagnosticCategory, key: string, message: string, reportsUnnecessary?: {}, elidedInCompatabilityPyramid?: boolean, reportsDeprecated?: {}): DiagnosticMessage {",
         "    return { code, category, key, message, reportsUnnecessary, elidedInCompatabilityPyramid, reportsDeprecated };",
diff --git a/src/compiler/_namespaces/ts.moduleSpecifiers.ts b/src/compiler/_namespaces/ts.moduleSpecifiers.ts
index 47a204d4a7..445d749e07 100644
--- a/src/compiler/_namespaces/ts.moduleSpecifiers.ts
+++ b/src/compiler/_namespaces/ts.moduleSpecifiers.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.moduleSpecifiers namespace. */
 
-export * from "../moduleSpecifiers";
+export * from "../moduleSpecifiers.js";
diff --git a/src/compiler/_namespaces/ts.performance.ts b/src/compiler/_namespaces/ts.performance.ts
index 707f8f85ef..58639cdda8 100644
--- a/src/compiler/_namespaces/ts.performance.ts
+++ b/src/compiler/_namespaces/ts.performance.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.performance namespace. */
 
-export * from "../performance";
+export * from "../performance.js";
diff --git a/src/compiler/_namespaces/ts.ts b/src/compiler/_namespaces/ts.ts
index b31b19cae7..cc12edfe72 100644
--- a/src/compiler/_namespaces/ts.ts
+++ b/src/compiler/_namespaces/ts.ts
@@ -1,74 +1,74 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../corePublic";
-export * from "../core";
-export * from "../debug";
-export * from "../semver";
-export * from "../performanceCore";
-export * from "../perfLogger";
-export * from "../tracing";
-export * from "../types";
-export * from "../sys";
-export * from "../path";
-export * from "../diagnosticInformationMap.generated";
-export * from "../scanner";
-export * from "../utilitiesPublic";
-export * from "../utilities";
-export * from "../factory/baseNodeFactory";
-export * from "../factory/parenthesizerRules";
-export * from "../factory/nodeConverters";
-export * from "../factory/nodeFactory";
-export * from "../factory/emitNode";
-export * from "../factory/emitHelpers";
-export * from "../factory/nodeTests";
-export * from "../factory/utilities";
-export * from "../factory/utilitiesPublic";
-export * from "../parser";
-export * from "../commandLineParser";
-export * from "../moduleNameResolver";
-export * from "../binder";
-export * from "../symbolWalker";
-export * from "../checker";
-export * from "../visitorPublic";
-export * from "../sourcemap";
-export * from "../transformers/utilities";
-export * from "../transformers/destructuring";
-export * from "../transformers/taggedTemplate";
-export * from "../transformers/ts";
-export * from "../transformers/classFields";
-export * from "../transformers/typeSerializer";
-export * from "../transformers/legacyDecorators";
-export * from "../transformers/es2017";
-export * from "../transformers/es2018";
-export * from "../transformers/es2019";
-export * from "../transformers/es2020";
-export * from "../transformers/es2021";
-export * from "../transformers/esnext";
-export * from "../transformers/jsx";
-export * from "../transformers/es2016";
-export * from "../transformers/es2015";
-export * from "../transformers/es5";
-export * from "../transformers/generators";
-export * from "../transformers/module/module";
-export * from "../transformers/module/system";
-export * from "../transformers/module/esnextAnd2015";
-export * from "../transformers/module/node";
-export * from "../transformers/declarations/diagnostics";
-export * from "../transformers/declarations";
-export * from "../transformer";
-export * from "../emitter";
-export * from "../watchUtilities";
-export * from "../program";
-export * from "../builderStatePublic";
-export * from "../builderState";
-export * from "../builder";
-export * from "../builderPublic";
-export * from "../resolutionCache";
-export * from "../watch";
-export * from "../watchPublic";
-export * from "../tsbuild";
-export * from "../tsbuildPublic";
-import * as moduleSpecifiers from "./ts.moduleSpecifiers";
+export * from "../corePublic.js";
+export * from "../core.js";
+export * from "../debug.js";
+export * from "../semver.js";
+export * from "../performanceCore.js";
+export * from "../perfLogger.js";
+export * from "../tracing.js";
+export * from "../types.js";
+export * from "../sys.js";
+export * from "../path.js";
+export * from "../diagnosticInformationMap.generated.js";
+export * from "../scanner.js";
+export * from "../utilitiesPublic.js";
+export * from "../utilities.js";
+export * from "../factory/baseNodeFactory.js";
+export * from "../factory/parenthesizerRules.js";
+export * from "../factory/nodeConverters.js";
+export * from "../factory/nodeFactory.js";
+export * from "../factory/emitNode.js";
+export * from "../factory/emitHelpers.js";
+export * from "../factory/nodeTests.js";
+export * from "../factory/utilities.js";
+export * from "../factory/utilitiesPublic.js";
+export * from "../parser.js";
+export * from "../commandLineParser.js";
+export * from "../moduleNameResolver.js";
+export * from "../binder.js";
+export * from "../symbolWalker.js";
+export * from "../checker.js";
+export * from "../visitorPublic.js";
+export * from "../sourcemap.js";
+export * from "../transformers/utilities.js";
+export * from "../transformers/destructuring.js";
+export * from "../transformers/taggedTemplate.js";
+export * from "../transformers/ts.js";
+export * from "../transformers/classFields.js";
+export * from "../transformers/typeSerializer.js";
+export * from "../transformers/legacyDecorators.js";
+export * from "../transformers/es2017.js";
+export * from "../transformers/es2018.js";
+export * from "../transformers/es2019.js";
+export * from "../transformers/es2020.js";
+export * from "../transformers/es2021.js";
+export * from "../transformers/esnext.js";
+export * from "../transformers/jsx.js";
+export * from "../transformers/es2016.js";
+export * from "../transformers/es2015.js";
+export * from "../transformers/es5.js";
+export * from "../transformers/generators.js";
+export * from "../transformers/module/module.js";
+export * from "../transformers/module/system.js";
+export * from "../transformers/module/esnextAnd2015.js";
+export * from "../transformers/module/node.js";
+export * from "../transformers/declarations/diagnostics.js";
+export * from "../transformers/declarations.js";
+export * from "../transformer.js";
+export * from "../emitter.js";
+export * from "../watchUtilities.js";
+export * from "../program.js";
+export * from "../builderStatePublic.js";
+export * from "../builderState.js";
+export * from "../builder.js";
+export * from "../builderPublic.js";
+export * from "../resolutionCache.js";
+export * from "../watch.js";
+export * from "../watchPublic.js";
+export * from "../tsbuild.js";
+export * from "../tsbuildPublic.js";
+import * as moduleSpecifiers from "./ts.moduleSpecifiers.js";
 export { moduleSpecifiers };
-import * as performance from "./ts.performance";
+import * as performance from "./ts.performance.js";
 export { performance };
diff --git a/src/compiler/binder.ts b/src/compiler/binder.ts
index 6b90515c83..385719e8e0 100644
--- a/src/compiler/binder.ts
+++ b/src/compiler/binder.ts
@@ -57,7 +57,7 @@ import {
     SyntaxKind, TextRange, ThrowStatement, TokenFlags, tokenToString, tracing, TracingNode, tryCast, tryParsePattern,
     TryStatement, TypeLiteralNode, TypeOfExpression, TypeParameterDeclaration, unescapeLeadingUnderscores,
     unreachableCodeIsError, unusedLabelIsError, VariableDeclaration, WhileStatement, WithStatement,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export const enum ModuleInstanceState {
diff --git a/src/compiler/builder.ts b/src/compiler/builder.ts
index 04efd3a7d3..560719a4f8 100644
--- a/src/compiler/builder.ts
+++ b/src/compiler/builder.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     addRange, AffectedFileResult, arrayFrom, arrayToMap, BuilderProgram, BuilderProgramHost, BuilderState,
     CancellationToken, CommandLineOption, compareStringsCaseSensitive, compareValues, CompilerHost, CompilerOptions,
@@ -13,7 +13,7 @@ import {
     notImplemented, outFile, Path, Program, ProjectReference, ReadBuildProgramHost, ReadonlyCollection, ReadonlySet,
     returnFalse, returnUndefined, SemanticDiagnosticsBuilderProgram, Set, skipTypeChecking, SourceFile,
     sourceFileMayBeEmitted, SourceMapEmitResult, toPath, tryAddToSet, WriteFileCallback, WriteFileCallbackData,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export interface ReusableDiagnostic extends ReusableDiagnosticRelatedInformation {
diff --git a/src/compiler/builderPublic.ts b/src/compiler/builderPublic.ts
index a8763836ab..3bfd65f155 100644
--- a/src/compiler/builderPublic.ts
+++ b/src/compiler/builderPublic.ts
@@ -3,7 +3,7 @@ import {
     createRedirectedBuilderProgram, CustomTransformers, Diagnostic, DiagnosticWithLocation, EmitResult,
     getBuilderCreationParameters, Program, ProjectReference, ReusableBuilderProgramState, SavedBuildProgramEmitState,
     SourceFile, WriteFileCallback,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export type AffectedFileResult<T> = { result: T; affected: SourceFile | Program; } | undefined;
 
diff --git a/src/compiler/builderState.ts b/src/compiler/builderState.ts
index 322296d305..2d355a1614 100644
--- a/src/compiler/builderState.ts
+++ b/src/compiler/builderState.ts
@@ -5,7 +5,7 @@ import {
     isModuleWithStringLiteralName, isStringLiteral, Iterator, Map, mapDefined, mapDefinedIterator, ModuleDeclaration,
     ModuleKind, outFile, OutputFile, Path, Program, ReadonlySet, Set, some, SourceFile, StringLiteralLike, Symbol,
     toPath, TypeChecker,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export function getFileEmitOutput(program: Program, sourceFile: SourceFile, emitOnlyDtsFiles: boolean,
diff --git a/src/compiler/builderStatePublic.ts b/src/compiler/builderStatePublic.ts
index 7a6109ce6b..f741564647 100644
--- a/src/compiler/builderStatePublic.ts
+++ b/src/compiler/builderStatePublic.ts
@@ -1,4 +1,4 @@
-import { BuildInfo, Diagnostic } from "./_namespaces/ts";
+import { BuildInfo, Diagnostic } from "./_namespaces/ts.js";
 
 export interface EmitOutput {
     outputFiles: OutputFile[];
diff --git a/src/compiler/checker.ts b/src/compiler/checker.ts
index 9bf627bccb..2288ae457d 100644
--- a/src/compiler/checker.ts
+++ b/src/compiler/checker.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     __String, AccessExpression, AccessFlags, AccessorDeclaration, addRange, addRelatedInfo, addSyntheticLeadingComment,
     AllAccessorDeclarations, and, AnonymousType, AnyImportOrReExport, AnyImportSyntax, append, appendIfUnique,
@@ -197,7 +197,7 @@ import {
     VariableStatement, VarianceFlags, visitEachChild, visitNode, visitNodes, Visitor, VisitResult, VoidExpression,
     walkUpBindingElementsAndPatterns, walkUpParenthesizedExpressions, walkUpParenthesizedTypes,
     walkUpParenthesizedTypesAndGetParentAndChild, WhileStatement, WideningContext, WithStatement, YieldExpression,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const ambientModuleSymbolRegex = /^".+"$/;
 const anon = "(anonymous)" as __String & string;
diff --git a/src/compiler/commandLineParser.ts b/src/compiler/commandLineParser.ts
index 0dc93ac058..3c1ce73940 100644
--- a/src/compiler/commandLineParser.ts
+++ b/src/compiler/commandLineParser.ts
@@ -19,7 +19,7 @@ import {
     Push, removeTrailingDirectorySeparator, returnTrue, ScriptTarget, startsWith, StringLiteral, SyntaxKind, sys,
     toFileNameLowerCase, toPath, tracing, trimString, TsConfigOnlyOption, TsConfigSourceFile, TypeAcquisition,
     unescapeLeadingUnderscores, WatchDirectoryFlags, WatchDirectoryKind, WatchFileKind, WatchOptions,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export const compileOnSaveCommandLineOption: CommandLineOption = {
diff --git a/src/compiler/core.ts b/src/compiler/core.ts
index 70ccdb380f..beb2658ba7 100644
--- a/src/compiler/core.ts
+++ b/src/compiler/core.ts
@@ -2,7 +2,7 @@ import {
     __String, CharacterCodes, Comparer, Comparison, Debug, EqualityComparer, ESMap, isWhiteSpaceLike, Iterator, Map,
     MapLike, Push, Queue, ReadonlyESMap, ReadonlySet, Set, SortedArray, SortedReadonlyArray, TextSpan,
     UnderscoreEscapedMap,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export function getIterator<I extends readonly any[] | ReadonlySet<any> | ReadonlyESMap<any, any> | undefined>(iterable: I): Iterator<
diff --git a/src/compiler/debug.ts b/src/compiler/debug.ts
index 1b189bf38d..0593983383 100644
--- a/src/compiler/debug.ts
+++ b/src/compiler/debug.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     AnyFunction, AssertionLevel, BigIntLiteralType, CheckMode, compareValues, EmitFlags, every, FlowFlags, FlowNode,
     FlowNodeBase, formatStringFromArgs, getDirectoryPath, getEffectiveModifierFlagsNoCache, getEmitFlags, getOwnKeys,
@@ -15,7 +15,7 @@ import {
     SignatureFlags, SnippetKind, SortedReadonlyArray, stableSort, Symbol, SymbolFlags, symbolName, SyntaxKind, sys,
     TransformFlags, Type, TypeFacts, TypeFlags, TypeMapKind, TypeMapper, unescapeLeadingUnderscores, VarianceFlags,
     version, Version, zipWith,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export enum LogLevel {
diff --git a/src/compiler/emitter.ts b/src/compiler/emitter.ts
index 30d52243c7..4e4c8d8486 100644
--- a/src/compiler/emitter.ts
+++ b/src/compiler/emitter.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     AccessorDeclaration, ArrayBindingPattern, ArrayLiteralExpression, arrayToMap, ArrayTypeNode, ArrowFunction,
     AsExpression, AssertClause, AssertEntry, AwaitExpression, base64encode, BigIntLiteral, BinaryExpression,
@@ -77,7 +77,7 @@ import {
     UnparsedPrepend, UnparsedPrologue, UnparsedSource, UnparsedSyntheticReference, UnparsedTextLike,
     VariableDeclaration, VariableDeclarationList, VariableStatement, VoidExpression, WhileStatement, WithStatement,
     writeCommentRange, writeFile, WriteFileCallbackData, YieldExpression,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const brackets = createBracketsMap();
 
diff --git a/src/compiler/factory/baseNodeFactory.ts b/src/compiler/factory/baseNodeFactory.ts
index 4da1378336..cff0a6505f 100644
--- a/src/compiler/factory/baseNodeFactory.ts
+++ b/src/compiler/factory/baseNodeFactory.ts
@@ -1,4 +1,4 @@
-import { Node, objectAllocator, SyntaxKind } from "../_namespaces/ts";
+import { Node, objectAllocator, SyntaxKind } from "../_namespaces/ts.js";
 
 /**
  * A `BaseNodeFactory` is an abstraction over an `ObjectAllocator` that handles caching `Node` constructors
diff --git a/src/compiler/factory/emitHelpers.ts b/src/compiler/factory/emitHelpers.ts
index 6d10a3a781..87357ba454 100644
--- a/src/compiler/factory/emitHelpers.ts
+++ b/src/compiler/factory/emitHelpers.ts
@@ -5,7 +5,7 @@ import {
     getPropertyNameOfBindingOrAssignmentElement, Identifier, isCallExpression, isComputedPropertyName, isIdentifier,
     memoize, PrivateIdentifierKind, ReadonlyESMap, ScriptTarget, setEmitFlags, setTextRange, SyntaxKind, TextRange,
     TransformationContext, UnscopedEmitHelper,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export interface EmitHelperFactory {
diff --git a/src/compiler/factory/emitNode.ts b/src/compiler/factory/emitNode.ts
index 693094489a..660f3f30ed 100644
--- a/src/compiler/factory/emitNode.ts
+++ b/src/compiler/factory/emitNode.ts
@@ -2,7 +2,7 @@ import {
     AccessExpression, append, appendIfUnique, Debug, EmitFlags, EmitHelper, EmitNode, getParseTreeNode,
     getSourceFileOfNode, isParseTreeNode, Node, orderedRemoveItem, SnippetElement, some, SourceFile, SourceMapRange,
     SyntaxKind, SynthesizedComment, TextRange, TypeNode,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /**
  * Associates a node with the current transformation, initializing
diff --git a/src/compiler/factory/nodeConverters.ts b/src/compiler/factory/nodeConverters.ts
index 74cddf3152..0dfb84d90e 100644
--- a/src/compiler/factory/nodeConverters.ts
+++ b/src/compiler/factory/nodeConverters.ts
@@ -5,7 +5,7 @@ import {
     isBindingPattern, isBlock, isExpression, isIdentifier, isObjectBindingPattern, isObjectLiteralElementLike,
     isObjectLiteralExpression, map, NodeConverters, NodeFactory, notImplemented, ObjectBindingOrAssignmentElement,
     ObjectBindingOrAssignmentPattern, setOriginalNode, setStartsOnNewLine, setTextRange, SyntaxKind,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function createNodeConverters(factory: NodeFactory): NodeConverters {
diff --git a/src/compiler/factory/nodeFactory.ts b/src/compiler/factory/nodeFactory.ts
index ef8e679606..df2575dd63 100644
--- a/src/compiler/factory/nodeFactory.ts
+++ b/src/compiler/factory/nodeFactory.ts
@@ -78,7 +78,7 @@ import {
     UnparsedSource, UnparsedSourceText, UnparsedSyntheticReference, UnparsedTextLike, UnscopedEmitHelper,
     VariableDeclaration, VariableDeclarationList, VariableStatement, visitNode, VisitResult, VoidExpression,
     WhileStatement, WithStatement, YieldExpression,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 let nextAutoGenerateId = 0;
 
diff --git a/src/compiler/factory/nodeTests.ts b/src/compiler/factory/nodeTests.ts
index f391dbb1ed..e1131d0466 100644
--- a/src/compiler/factory/nodeTests.ts
+++ b/src/compiler/factory/nodeTests.ts
@@ -37,7 +37,7 @@ import {
     TypePredicateNode, TypeQueryNode, TypeReferenceNode, UnionTypeNode, UnparsedPrepend, UnparsedSource,
     VariableDeclaration, VariableDeclarationList, VariableStatement, VoidExpression, WhileStatement, WithStatement,
     YieldExpression,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 // Literals
 
diff --git a/src/compiler/factory/parenthesizerRules.ts b/src/compiler/factory/parenthesizerRules.ts
index 78abbbc097..52b099720e 100644
--- a/src/compiler/factory/parenthesizerRules.ts
+++ b/src/compiler/factory/parenthesizerRules.ts
@@ -8,7 +8,7 @@ import {
     Map, NamedTupleMember, NewExpression, NodeArray, NodeFactory, OperatorPrecedence, OuterExpressionKinds,
     ParenthesizerRules, sameMap, setTextRange, skipPartiallyEmittedExpressions, some, SyntaxKind, TypeNode,
     UnaryExpression,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function createParenthesizerRules(factory: NodeFactory): ParenthesizerRules {
diff --git a/src/compiler/factory/utilities.ts b/src/compiler/factory/utilities.ts
index b6c97f8f3b..ed7b663fea 100644
--- a/src/compiler/factory/utilities.ts
+++ b/src/compiler/factory/utilities.ts
@@ -30,7 +30,7 @@ import {
     RelationalOperator, RelationalOperatorOrHigher, SetAccessorDeclaration, setOriginalNode, setParent, setStartsOnNewLine, setTextRange,
     ShiftOperator, ShiftOperatorOrHigher, ShorthandPropertyAssignment, some, SourceFile, Statement, StringLiteral,
     SyntaxKind, TextRange, ThisTypeNode, Token, TypeNode, TypeParameterDeclaration,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 // Compound nodes
 
diff --git a/src/compiler/factory/utilitiesPublic.ts b/src/compiler/factory/utilitiesPublic.ts
index d679f8f34b..c1e89510dd 100644
--- a/src/compiler/factory/utilitiesPublic.ts
+++ b/src/compiler/factory/utilitiesPublic.ts
@@ -1,4 +1,4 @@
-import { HasDecorators, HasModifiers, Node, setTextRangePosEnd, SyntaxKind, TextRange } from "../_namespaces/ts";
+import { HasDecorators, HasModifiers, Node, setTextRangePosEnd, SyntaxKind, TextRange } from "../_namespaces/ts.js";
 
 export function setTextRange<T extends TextRange>(range: T, location: TextRange | undefined): T {
     return location ? setTextRangePosEnd(range, location.pos, location.end) : range;
@@ -42,4 +42,4 @@ export function canHaveDecorators(node: Node): node is HasDecorators {
         || kind === SyntaxKind.SetAccessor
         || kind === SyntaxKind.ClassExpression
         || kind === SyntaxKind.ClassDeclaration;
-}
\ No newline at end of file
+}
diff --git a/src/compiler/moduleNameResolver.ts b/src/compiler/moduleNameResolver.ts
index 2b2397a62b..796d2eda0d 100644
--- a/src/compiler/moduleNameResolver.ts
+++ b/src/compiler/moduleNameResolver.ts
@@ -17,7 +17,7 @@ import {
     ResolvedTypeReferenceDirectiveWithFailedLookupLocations, some, sort, SourceFile, startsWith, stringContains,
     supportedTSExtensionsFlat, toPath, tryExtractTSExtension, tryGetExtensionFromPath, tryParsePatterns,
     tryRemoveExtension, version, Version, versionMajorMinor, VersionRange,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export function trace(host: ModuleResolutionHost, message: DiagnosticMessage, ...args: any[]): void;
diff --git a/src/compiler/moduleSpecifiers.ts b/src/compiler/moduleSpecifiers.ts
index 25f450cb43..df521ca261 100644
--- a/src/compiler/moduleSpecifiers.ts
+++ b/src/compiler/moduleSpecifiers.ts
@@ -17,7 +17,7 @@ import {
     PropertyAccessExpression, removeFileExtension, removeSuffix, resolvePath, ScriptKind, some, SourceFile, startsWith,
     startsWithDirectory, stringContains, StringLiteral, Symbol, SymbolFlags, toPath, tryGetExtensionFromPath,
     tryParsePatterns, TypeChecker, UserPreferences,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 // Used by importFixes, getEditsForFileRename, and declaration emit to synthesize import module specifiers.
 
diff --git a/src/compiler/parser.ts b/src/compiler/parser.ts
index 351aeb7914..3df12890e2 100644
--- a/src/compiler/parser.ts
+++ b/src/compiler/parser.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     AccessorDeclaration, addRange, addRelatedInfo, AmdDependency, append, ArrayBindingElement, ArrayBindingPattern,
     ArrayLiteralExpression, ArrayTypeNode, ArrowFunction, AsExpression, AssertClause, AssertEntry, AssertionLevel,
@@ -64,7 +64,7 @@ import {
     TypeOperatorNode, TypeParameterDeclaration, TypePredicateNode, TypeQueryNode, TypeReferenceNode, UnaryExpression,
     UnionOrIntersectionTypeNode, UnionTypeNode, UpdateExpression, VariableDeclaration, VariableDeclarationList,
     VariableStatement, VoidExpression, WhileStatement, WithStatement, YieldExpression,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const enum SignatureFlags {
     None = 0,
diff --git a/src/compiler/path.ts b/src/compiler/path.ts
index 7f84ae19c6..4b4639cbd9 100644
--- a/src/compiler/path.ts
+++ b/src/compiler/path.ts
@@ -2,7 +2,7 @@ import {
     CharacterCodes, compareStringsCaseInsensitive, compareStringsCaseSensitive, compareValues, Comparison, Debug,
     endsWith, equateStringsCaseInsensitive, equateStringsCaseSensitive, GetCanonicalFileName, getStringComparer,
     identity, lastOrUndefined, Path, some, startsWith, stringContains,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * Internally, we represent paths as strings with '/' as the directory separator.
diff --git a/src/compiler/perfLogger.ts b/src/compiler/perfLogger.ts
index a05874a303..f2564b39a1 100644
--- a/src/compiler/perfLogger.ts
+++ b/src/compiler/perfLogger.ts
@@ -1,4 +1,4 @@
-import { noop } from "./_namespaces/ts";
+import { noop } from "./_namespaces/ts.js";
 
 /** @internal */
 interface PerfLogger {
diff --git a/src/compiler/performance.ts b/src/compiler/performance.ts
index 774f0880e0..9305730aa4 100644
--- a/src/compiler/performance.ts
+++ b/src/compiler/performance.ts
@@ -1,6 +1,6 @@
 import {
     Debug, Map, noop, Performance, PerformanceHooks, sys, System, timestamp, tryGetNativePerformanceHooks,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** Performance measurements for the compiler. */
 
diff --git a/src/compiler/performanceCore.ts b/src/compiler/performanceCore.ts
index ce65f1d889..c71036ccc0 100644
--- a/src/compiler/performanceCore.ts
+++ b/src/compiler/performanceCore.ts
@@ -1,4 +1,4 @@
-import { Version, VersionRange } from "./_namespaces/ts";
+import { Version, VersionRange } from "./_namespaces/ts.js";
 
 // The following definitions provide the minimum compatible support for the Web Performance User Timings API
 // between browsers and NodeJS:
diff --git a/src/compiler/program.ts b/src/compiler/program.ts
index 6e18b7559d..84f0ce3a29 100644
--- a/src/compiler/program.ts
+++ b/src/compiler/program.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     __String, addEmitFlags, addRange, append, arrayFrom, arrayIsEqualTo, AsExpression, AssertClause, BuilderProgram,
     CancellationToken, canHaveModifiers, chainDiagnosticMessages, changeExtension, changesAffectingProgramStructure,
@@ -58,7 +58,7 @@ import {
     TypeChecker, typeDirectiveIsEqualTo, TypeReferenceDirectiveResolutionCache, UnparsedSource, VariableDeclaration,
     VariableStatement, walkUpParenthesizedExpressions, WriteFileCallback, WriteFileCallbackData,
     writeFileEnsuringDirectories, zipToModeAwareCache,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export function findConfigFile(searchPath: string, fileExists: (fileName: string) => boolean, configName = "tsconfig.json"): string | undefined {
     return forEachAncestorDirectory(searchPath, ancestor => {
diff --git a/src/compiler/resolutionCache.ts b/src/compiler/resolutionCache.ts
index 482248378e..7b3864016c 100644
--- a/src/compiler/resolutionCache.ts
+++ b/src/compiler/resolutionCache.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     arrayToMap, CachedDirectoryStructureHost, CacheWithRedirects, CharacterCodes, clearMap, closeFileWatcher,
     closeFileWatcherOf, CompilerOptions, contains, createCacheWithRedirects, createModeAwareCache,
@@ -15,7 +15,7 @@ import {
     resolutionExtensionIsTSOrJson, ResolvedModuleFull, ResolvedModuleWithFailedLookupLocations,
     ResolvedProjectReference, ResolvedTypeReferenceDirective, ResolvedTypeReferenceDirectiveWithFailedLookupLocations,
     returnTrue, Set, some, SourceFile, startsWith, stringContains, trace, unorderedRemoveItem, WatchDirectoryFlags,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * This is the cache of module/typedirectives resolution that can be retained across program
diff --git a/src/compiler/scanner.ts b/src/compiler/scanner.ts
index e9732e81fc..5d5d479a56 100644
--- a/src/compiler/scanner.ts
+++ b/src/compiler/scanner.ts
@@ -3,7 +3,7 @@ import {
     CommentRange, compareValues, Debug, DiagnosticMessage, Diagnostics, ESMap, getEntries, identity, JSDocSyntaxKind,
     JsxTokenSyntaxKind, KeywordSyntaxKind, LanguageVariant, LineAndCharacter, Map, MapLike, parsePseudoBigInt,
     positionIsSynthesized, ScriptTarget, SourceFileLike, SyntaxKind, TokenFlags, trimStringStart,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export type ErrorCallback = (message: DiagnosticMessage, length: number) => void;
 
diff --git a/src/compiler/semver.ts b/src/compiler/semver.ts
index 0f2b85848d..344b38f7f0 100644
--- a/src/compiler/semver.ts
+++ b/src/compiler/semver.ts
@@ -1,6 +1,6 @@
 import {
     compareStringsCaseSensitive, compareValues, Comparison, Debug, emptyArray, map, some, trimString,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 // https://semver.org/#spec-item-2
 // > A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative
diff --git a/src/compiler/sourcemap.ts b/src/compiler/sourcemap.ts
index 3fea87a803..4b4f744e9c 100644
--- a/src/compiler/sourcemap.ts
+++ b/src/compiler/sourcemap.ts
@@ -4,7 +4,7 @@ import {
     getNormalizedAbsolutePath, getPositionOfLineAndCharacter, getRelativePathToDirectoryOrUrl, identity, isArray,
     isString, Iterator, LineAndCharacter, Map, performance, RawSourceMap, some, sortAndDeduplicate, SortedReadonlyArray,
     SourceMapGenerator, trimStringEnd,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export interface SourceMapGeneratorOptions {
diff --git a/src/compiler/symbolWalker.ts b/src/compiler/symbolWalker.ts
index 9a500caf05..a98a19d588 100644
--- a/src/compiler/symbolWalker.ts
+++ b/src/compiler/symbolWalker.ts
@@ -2,7 +2,7 @@ import {
     clear, EntityNameOrEntityNameExpression, forEach, getOwnValues, getSymbolId, Identifier, IndexedAccessType,
     IndexType, InterfaceType, MappedType, Node, ObjectFlags, ObjectType, ResolvedType, Signature, Symbol, SymbolWalker,
     SyntaxKind, Type, TypeFlags, TypeParameter, TypePredicate, TypeQueryNode, TypeReference, UnionOrIntersectionType,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 
diff --git a/src/compiler/sys.ts b/src/compiler/sys.ts
index a7aa67d8c9..c9067c3fa6 100644
--- a/src/compiler/sys.ts
+++ b/src/compiler/sys.ts
@@ -1,3 +1,10 @@
+import { createRequire } from "module";
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+const require = createRequire(import.meta.url);
+const __filename = fileURLToPath(new URL(import.meta.url));
+const __dirname = dirname(__filename);
+
 import {
     AssertionLevel, closeFileWatcher, closeFileWatcherOf, combinePaths, Comparison, contains, containsPath,
     createGetCanonicalFileName, createMultiMap, Debug, directorySeparator, emptyArray, emptyFileSystemEntries, endsWith,
@@ -6,7 +13,7 @@ import {
     Map, mapDefined, matchesExclude, matchFiles, memoize, noop, normalizePath, normalizeSlashes, orderedRemoveItem,
     Path, perfLogger, PollingWatchKind, RequireResult, resolveJSModule, some, startsWith, stringContains, timestamp,
     unorderedRemoveItem, WatchDirectoryKind, WatchFileKind, WatchOptions, writeFileEnsuringDirectories,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 declare function setTimeout(handler: (...args: any[]) => void, timeout: number): any;
 declare function clearTimeout(handle: any): void;
@@ -1408,11 +1415,8 @@ interface DirectoryWatcher extends FileWatcher {
     referenceCount: number;
 }
 
-declare const require: any;
 declare const process: any;
 declare const global: any;
-declare const __filename: string;
-declare const __dirname: string;
 
 export function getNodeMajorVersion(): number | undefined {
     if (typeof process === "undefined") {
diff --git a/src/compiler/tracing.ts b/src/compiler/tracing.ts
index a790b0c456..2589e5488c 100644
--- a/src/compiler/tracing.ts
+++ b/src/compiler/tracing.ts
@@ -1,9 +1,12 @@
+import { createRequire } from "module";
+const require = createRequire(import.meta.url);
+
 import {
     combinePaths, ConditionalType, Debug, EvolvingArrayType, getLineAndCharacterOfPosition, getSourceFileOfNode,
     IndexedAccessType, IndexType, IntersectionType, LineAndCharacter, Map, Node, ObjectFlags, Path, performance,
     ReverseMappedType, SubstitutionType, timestamp, Type, TypeFlags, TypeReference, unescapeLeadingUnderscores,
     UnionType,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /* Tracing events for the compiler. */
 
diff --git a/src/compiler/transformer.ts b/src/compiler/transformer.ts
index 6a905084c0..2b8f0bc35d 100644
--- a/src/compiler/transformer.ts
+++ b/src/compiler/transformer.ts
@@ -10,7 +10,7 @@ import {
     transformES2018, transformES2019, transformES2020, transformES2021, transformES5, transformESNext,
     transformGenerators, transformJsx, transformLegacyDecorators, transformModule, transformNodeModule,
     transformSystemModule, transformTypeScript, VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 function getModuleTransformer(moduleKind: ModuleKind): TransformerFactory<SourceFile | Bundle> {
     switch (moduleKind) {
diff --git a/src/compiler/transformers/classFields.ts b/src/compiler/transformers/classFields.ts
index 28be1f5f87..5225b6a1d9 100644
--- a/src/compiler/transformers/classFields.ts
+++ b/src/compiler/transformers/classFields.ts
@@ -34,7 +34,7 @@ import {
     TransformationContext, TransformFlags, tryGetTextOfPropertyName, UnderscoreEscapedMap, unescapeLeadingUnderscores,
     VariableStatement, visitArray, visitEachChild, visitFunctionBody, visitIterationBody, visitNode, visitNodes,
     visitParameterList, VisitResult, Bundle,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 const enum ClassPropertySubstitutionFlags {
     /**
diff --git a/src/compiler/transformers/declarations.ts b/src/compiler/transformers/declarations.ts
index 10581e002c..7700389c0e 100644
--- a/src/compiler/transformers/declarations.ts
+++ b/src/compiler/transformers/declarations.ts
@@ -38,7 +38,7 @@ import {
     TransformationContext, transformNodes, tryCast, TypeAliasDeclaration, TypeNode, TypeParameterDeclaration,
     TypeReferenceNode, unescapeLeadingUnderscores, UnparsedSource, VariableDeclaration, VariableStatement, visitArray,
     visitEachChild, visitNode, visitNodes, VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function getDeclarationDiagnostics(host: EmitHost, resolver: EmitResolver, file: SourceFile | undefined): DiagnosticWithLocation[] | undefined {
diff --git a/src/compiler/transformers/declarations/diagnostics.ts b/src/compiler/transformers/declarations/diagnostics.ts
index bdd9903796..5fd9a85052 100644
--- a/src/compiler/transformers/declarations/diagnostics.ts
+++ b/src/compiler/transformers/declarations/diagnostics.ts
@@ -12,7 +12,7 @@ import {
     PropertyAccessExpression, PropertyDeclaration, PropertySignature, QualifiedName, SetAccessorDeclaration,
     SymbolAccessibility, SymbolAccessibilityResult, SyntaxKind, TypeAliasDeclaration, TypeParameterDeclaration,
     VariableDeclaration,
-} from "../../_namespaces/ts";
+} from "../../_namespaces/ts.js";
 
 /** @internal */
 export type GetSymbolAccessibilityDiagnostic = (symbolAccessibilityResult: SymbolAccessibilityResult) => (SymbolAccessibilityDiagnostic | undefined);
diff --git a/src/compiler/transformers/destructuring.ts b/src/compiler/transformers/destructuring.ts
index b4f4739a80..4d1ec8f2de 100644
--- a/src/compiler/transformers/destructuring.ts
+++ b/src/compiler/transformers/destructuring.ts
@@ -12,7 +12,7 @@ import {
     map, Node, NodeFactory, nodeIsSynthesized, ObjectBindingOrAssignmentPattern, ParameterDeclaration, PropertyName,
     setTextRange, some, TextRange, TransformationContext, TransformFlags,
     tryGetPropertyNameOfBindingOrAssignmentElement, VariableDeclaration, visitNode, VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 interface FlattenContext {
     context: TransformationContext;
diff --git a/src/compiler/transformers/es2015.ts b/src/compiler/transformers/es2015.ts
index db01bdeec4..271baabdd8 100644
--- a/src/compiler/transformers/es2015.ts
+++ b/src/compiler/transformers/es2015.ts
@@ -34,7 +34,7 @@ import {
     TransformFlags, tryCast, unescapeLeadingUnderscores, unwrapInnermostStatementOfLabel, VariableDeclaration,
     VariableDeclarationList, VariableStatement, visitEachChild, visitNode, visitNodes, visitParameterList, VisitResult,
     VoidExpression, WhileStatement, YieldExpression, Bundle,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 const enum ES2015SubstitutionFlags {
     /** Enables substitutions for captured `this` */
diff --git a/src/compiler/transformers/es2016.ts b/src/compiler/transformers/es2016.ts
index ca3bbbb980..4f10151bd3 100644
--- a/src/compiler/transformers/es2016.ts
+++ b/src/compiler/transformers/es2016.ts
@@ -2,7 +2,7 @@ import {
     BinaryExpression, Bundle, chainBundle, Expression, isElementAccessExpression, isExpression, isPropertyAccessExpression,
     Node, setTextRange, SourceFile, SyntaxKind, TransformationContext, TransformFlags, visitEachChild, visitNode,
     VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function transformES2016(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/es2017.ts b/src/compiler/transformers/es2017.ts
index 3f36d8c450..31c65099a0 100644
--- a/src/compiler/transformers/es2017.ts
+++ b/src/compiler/transformers/es2017.ts
@@ -16,7 +16,7 @@ import {
     VariableStatement, visitEachChild, visitFunctionBody, visitIterationBody, visitNode, visitNodes, visitParameterList,
     VisitResult,
     Bundle,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 type SuperContainer = ClassDeclaration | MethodDeclaration | GetAccessorDeclaration | SetAccessorDeclaration | ConstructorDeclaration;
 
diff --git a/src/compiler/transformers/es2018.ts b/src/compiler/transformers/es2018.ts
index d45f5a37b4..507ccdb01e 100644
--- a/src/compiler/transformers/es2018.ts
+++ b/src/compiler/transformers/es2018.ts
@@ -18,7 +18,7 @@ import {
     TransformationContext, TransformFlags, unwrapInnermostStatementOfLabel, VariableDeclaration, VariableStatement,
     visitEachChild, visitIterationBody, visitLexicalEnvironment, visitNode, visitNodes, visitParameterList, VisitResult,
     VoidExpression, YieldExpression, Bundle,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 const enum ESNextSubstitutionFlags {
     /** Enables substitutions for async methods with `super` calls. */
diff --git a/src/compiler/transformers/es2019.ts b/src/compiler/transformers/es2019.ts
index eaeb2f19d5..630b535efb 100644
--- a/src/compiler/transformers/es2019.ts
+++ b/src/compiler/transformers/es2019.ts
@@ -2,7 +2,7 @@ import {
     Bundle,
     CatchClause, chainBundle, isBlock, Node, SourceFile, SyntaxKind, TransformationContext, TransformFlags,
     visitEachChild, visitNode, VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function transformES2019(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/es2020.ts b/src/compiler/transformers/es2020.ts
index ec48ca9433..0dbb2b3b31 100644
--- a/src/compiler/transformers/es2020.ts
+++ b/src/compiler/transformers/es2020.ts
@@ -5,7 +5,7 @@ import {
     isTaggedTemplateExpression, Node, OptionalChain, OuterExpressionKinds, ParenthesizedExpression, setOriginalNode,
     setTextRange, skipParentheses, skipPartiallyEmittedExpressions, SourceFile, SyntaxKind, TransformationContext,
     TransformFlags, visitEachChild, visitNode, visitNodes, VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function transformES2020(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/es2021.ts b/src/compiler/transformers/es2021.ts
index a63e4688a7..1982114baf 100644
--- a/src/compiler/transformers/es2021.ts
+++ b/src/compiler/transformers/es2021.ts
@@ -4,7 +4,7 @@ import {
     isPropertyAccessExpression, isSimpleCopiableExpression, LogicalOrCoalescingAssignmentOperator, Node,
     skipParentheses, SourceFile, SyntaxKind, Token, TransformationContext, TransformFlags, visitEachChild, visitNode,
     VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function transformES2021(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/es5.ts b/src/compiler/transformers/es5.ts
index 8dd340255a..50709cfead 100644
--- a/src/compiler/transformers/es5.ts
+++ b/src/compiler/transformers/es5.ts
@@ -4,7 +4,7 @@ import {
     isPropertyAccessExpression, isPropertyAssignment, JsxClosingElement, JsxEmit, JsxOpeningElement,
     JsxSelfClosingElement, Node, nodeIsSynthesized, PropertyAccessExpression, PropertyAssignment, setTextRange,
     SourceFile, stringToToken, SyntaxKind, TransformationContext,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /**
  * Transforms ES5 syntax into ES3 syntax.
diff --git a/src/compiler/transformers/esnext.ts b/src/compiler/transformers/esnext.ts
index 770153e4e6..fce41c4d09 100644
--- a/src/compiler/transformers/esnext.ts
+++ b/src/compiler/transformers/esnext.ts
@@ -1,7 +1,7 @@
 import {
     Bundle,
     chainBundle, Node, SourceFile, TransformationContext, TransformFlags, visitEachChild, VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function transformESNext(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/generators.ts b/src/compiler/transformers/generators.ts
index ef5550a83a..c747b40084 100644
--- a/src/compiler/transformers/generators.ts
+++ b/src/compiler/transformers/generators.ts
@@ -16,7 +16,7 @@ import {
     TransformationContext, TransformFlags, TryStatement, VariableDeclaration, VariableDeclarationList,
     VariableStatement, visitEachChild, visitIterationBody, visitNode, visitNodes, visitParameterList, VisitResult,
     WhileStatement, WithStatement, YieldExpression,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 // Transforms generator functions into a compatible ES5 representation with similar runtime
 // semantics. This is accomplished by first transforming the body of each generator
diff --git a/src/compiler/transformers/jsx.ts b/src/compiler/transformers/jsx.ts
index 37152cfe6a..302e57713d 100644
--- a/src/compiler/transformers/jsx.ts
+++ b/src/compiler/transformers/jsx.ts
@@ -11,7 +11,7 @@ import {
     setParentRecursive, setTextRange, singleOrUndefined, SourceFile, spanMap, SpreadAssignment, startOnNewLine,
     Statement, StringLiteral, SyntaxKind, TextRange, TransformationContext, TransformFlags, utf16EncodeAsString,
     VariableDeclaration, visitEachChild, visitNode, VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function transformJsx(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/legacyDecorators.ts b/src/compiler/transformers/legacyDecorators.ts
index be6c0615ee..223e2d9a65 100644
--- a/src/compiler/transformers/legacyDecorators.ts
+++ b/src/compiler/transformers/legacyDecorators.ts
@@ -11,7 +11,7 @@ import {
     ScriptTarget, SetAccessorDeclaration, setCommentRange, setEmitFlags, setOriginalNode, setSourceMapRange,
     setTextRange, singleOrMany, some, SourceFile, Statement, SyntaxKind, TransformationContext, TransformFlags,
     visitEachChild, visitNode, visitNodes, VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function transformLegacyDecorators(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/module/esnextAnd2015.ts b/src/compiler/transformers/module/esnextAnd2015.ts
index ec9d36cc2e..56bc1f6082 100644
--- a/src/compiler/transformers/module/esnextAnd2015.ts
+++ b/src/compiler/transformers/module/esnextAnd2015.ts
@@ -7,7 +7,7 @@ import {
     isExternalModuleIndicator, isIdentifier, isNamespaceExport, isSourceFile, isStatement, Map, ModifierFlags,
     ModuleKind, Node, NodeFlags, ScriptTarget, setOriginalNode, setTextRange, singleOrMany, some, SourceFile, Statement,
     SyntaxKind, TransformationContext, VariableStatement, visitEachChild, visitNodes, VisitResult,
-} from "../../_namespaces/ts";
+} from "../../_namespaces/ts.js";
 
 /** @internal */
 export function transformECMAScriptModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/module/module.ts b/src/compiler/transformers/module/module.ts
index cb3b73b777..61f2c2d901 100644
--- a/src/compiler/transformers/module/module.ts
+++ b/src/compiler/transformers/module/module.ts
@@ -25,7 +25,7 @@ import {
     startOnNewLine, Statement, SyntaxKind, TaggedTemplateExpression, TextRange, TransformationContext, TransformFlags,
     tryGetModuleNameFromFile, VariableDeclaration, VariableStatement, visitEachChild, visitIterationBody, visitNode,
     visitNodes, VisitResult,
-} from "../../_namespaces/ts";
+} from "../../_namespaces/ts.js";
 
 /** @internal */
 export function transformModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/module/node.ts b/src/compiler/transformers/module/node.ts
index ac4a489752..50fedf90c6 100644
--- a/src/compiler/transformers/module/node.ts
+++ b/src/compiler/transformers/module/node.ts
@@ -1,7 +1,7 @@
 import {
     Bundle, Debug, EmitHint, isSourceFile, map, ModuleKind, Node, SourceFile, SyntaxKind, TransformationContext,
     transformECMAScriptModule, transformModule,
-} from "../../_namespaces/ts";
+} from "../../_namespaces/ts.js";
 
 /** @internal */
 export function transformNodeModule(context: TransformationContext) {
diff --git a/src/compiler/transformers/module/system.ts b/src/compiler/transformers/module/system.ts
index a6e9e90d2b..e43d90fd06 100644
--- a/src/compiler/transformers/module/system.ts
+++ b/src/compiler/transformers/module/system.ts
@@ -22,7 +22,7 @@ import {
     TransformFlags, tryGetModuleNameFromFile, TryStatement, VariableDeclaration, VariableDeclarationList,
     VariableStatement, visitEachChild, visitIterationBody, visitNode, visitNodes, VisitResult, WhileStatement,
     WithStatement,
-} from "../../_namespaces/ts";
+} from "../../_namespaces/ts.js";
 
 /** @internal */
 export function transformSystemModule(context: TransformationContext): (x: SourceFile | Bundle) => SourceFile | Bundle {
diff --git a/src/compiler/transformers/taggedTemplate.ts b/src/compiler/transformers/taggedTemplate.ts
index dddd501043..aa5311eec5 100644
--- a/src/compiler/transformers/taggedTemplate.ts
+++ b/src/compiler/transformers/taggedTemplate.ts
@@ -4,7 +4,7 @@ import {
     isExternalModule, isNoSubstitutionTemplateLiteral, NoSubstitutionTemplateLiteral, setTextRange, SourceFile,
     SyntaxKind, TaggedTemplateExpression, TemplateHead, TemplateLiteralLikeNode, TemplateMiddle, TemplateTail,
     TransformationContext, visitEachChild, visitNode, Visitor,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export enum ProcessLevel {
diff --git a/src/compiler/transformers/ts.ts b/src/compiler/transformers/ts.ts
index 49bb90e4d7..0a56dde3da 100644
--- a/src/compiler/transformers/ts.ts
+++ b/src/compiler/transformers/ts.ts
@@ -34,7 +34,7 @@ import {
     SyntaxKind, TaggedTemplateExpression, TextRange, TransformationContext, TransformFlags, UnderscoreEscapedMap,
     VariableDeclaration, VariableStatement, visitArray, visitEachChild, visitFunctionBody, visitLexicalEnvironment,
     visitNode, visitNodes, visitParameterList, VisitResult,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /**
  * Indicates whether to emit type metadata in the new format.
diff --git a/src/compiler/transformers/typeSerializer.ts b/src/compiler/transformers/typeSerializer.ts
index 7548d159c5..55b183beb6 100644
--- a/src/compiler/transformers/typeSerializer.ts
+++ b/src/compiler/transformers/typeSerializer.ts
@@ -12,7 +12,7 @@ import {
     SignatureDeclaration, skipTypeParentheses, SourceFile, SyntaxKind, TransformationContext, TypeNode,
     TypeOperatorNode, TypePredicateNode, TypeReferenceNode, TypeReferenceSerializationKind, UnionOrIntersectionTypeNode,
     VoidExpression,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 type SerializedEntityName =
     | Identifier // Globals (i.e., `String`, `Number`, etc.)
diff --git a/src/compiler/transformers/utilities.ts b/src/compiler/transformers/utilities.ts
index 862bdf7c8b..c3c8be3d50 100644
--- a/src/compiler/transformers/utilities.ts
+++ b/src/compiler/transformers/utilities.ts
@@ -14,7 +14,7 @@ import {
     parameterIsThisKeyword, PrivateIdentifierAccessorDeclaration, PrivateIdentifierAutoAccessorPropertyDeclaration,
     PrivateIdentifierMethodDeclaration, PropertyDeclaration, skipParentheses, some, SourceFile, Statement, SuperCall, SyntaxKind,
     TransformationContext, VariableDeclaration, VariableStatement,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export function getOriginalNodeId(node: Node) {
diff --git a/src/compiler/tsbuild.ts b/src/compiler/tsbuild.ts
index a927555fbe..88b338f2fd 100644
--- a/src/compiler/tsbuild.ts
+++ b/src/compiler/tsbuild.ts
@@ -1,4 +1,4 @@
-import { combinePaths, Extension, fileExtensionIs, ResolvedConfigFileName } from "./_namespaces/ts";
+import { combinePaths, Extension, fileExtensionIs, ResolvedConfigFileName } from "./_namespaces/ts.js";
 
 /** @internal */
 export enum UpToDateStatusType {
diff --git a/src/compiler/tsbuildPublic.ts b/src/compiler/tsbuildPublic.ts
index bd457dda91..c4b03725df 100644
--- a/src/compiler/tsbuildPublic.ts
+++ b/src/compiler/tsbuildPublic.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     AffectedFileResult, arrayToMap, assertType, BuilderProgram, BuildInfo, CancellationToken, canJsonReportNoInputFiles,
     changeCompilerHostLikeToUseCache, clearMap, closeFileWatcher, closeFileWatcherOf, commonOptionsWithBuild,
@@ -27,7 +27,7 @@ import {
     updateSharedExtendedConfigFileWatcher, updateWatchingWildcardDirectories, UpToDateStatus, UpToDateStatusType,
     version, WatchFactory, WatchHost, WatchOptions, WatchStatusReporter, WatchType, WildcardDirectoryWatcher, writeFile,
     WriteFileCallback,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const minimumDate = new Date(-8640000000000000);
 const maximumDate = new Date(8640000000000000);
diff --git a/src/compiler/types.ts b/src/compiler/types.ts
index 23a86b69e5..3acbc74ffc 100644
--- a/src/compiler/types.ts
+++ b/src/compiler/types.ts
@@ -2,7 +2,7 @@ import {
     BaseNodeFactory, CreateSourceFileOptions, EmitHelperFactory, ESMap, Map, MapLike, ModeAwareCache,
     ModuleResolutionCache, MultiMap, NodeFactoryFlags, OptionsNameMap, PackageJsonInfo, PackageJsonInfoCache, Pattern,
     ProgramBuildInfo, Push, ReadonlyESMap, ReadonlySet, Set, SymlinkCache,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 // branded string type used to store absolute, normalized and canonicalized paths
 // arbitrary file name can be converted to Path via toPath function
diff --git a/src/compiler/utilities.ts b/src/compiler/utilities.ts
index 5003b1ad9b..d44b24427d 100644
--- a/src/compiler/utilities.ts
+++ b/src/compiler/utilities.ts
@@ -90,7 +90,7 @@ import {
     ValidImportTypeNode, VariableDeclaration, VariableDeclarationInitializedTo, VariableDeclarationList,
     VariableLikeDeclaration, VariableStatement, version, WhileStatement, WithStatement, WriteFileCallback,
     WriteFileCallbackData, YieldExpression,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export const resolvingEmptyArray: never[] = [];
diff --git a/src/compiler/utilitiesPublic.ts b/src/compiler/utilitiesPublic.ts
index df6bec6235..29be975a98 100644
--- a/src/compiler/utilitiesPublic.ts
+++ b/src/compiler/utilitiesPublic.ts
@@ -46,7 +46,7 @@ import {
     TemplateLiteral, TemplateLiteralToken, TemplateMiddle, TemplateTail, TextChangeRange, TextRange, TextSpan,
     TypeElement, TypeNode, TypeOnlyAliasDeclaration, TypeParameterDeclaration, TypeReferenceType, UnaryExpression,
     UnparsedNode, UnparsedTextLike, VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export function isExternalModuleNameRelative(moduleName: string): boolean {
     // TypeScript 1.0 spec (April 2014): 11.2.1
diff --git a/src/compiler/visitorPublic.ts b/src/compiler/visitorPublic.ts
index 2f22a76e0e..45902082bf 100644
--- a/src/compiler/visitorPublic.ts
+++ b/src/compiler/visitorPublic.ts
@@ -17,7 +17,7 @@ import {
     LexicalEnvironmentFlags, Node, NodeArray, NodesVisitor, NodeVisitor, ParameterDeclaration, ScriptTarget,
     setEmitFlags, setTextRange, setTextRangePosEnd, singleOrUndefined, some, Statement, SyntaxKind,
     TransformationContext, VisitEachChildNodes, Visitor,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * Visits a Node using the supplied visitor, possibly returning a new Node in its place.
diff --git a/src/compiler/watch.ts b/src/compiler/watch.ts
index 81f48515e7..34f707aa6b 100644
--- a/src/compiler/watch.ts
+++ b/src/compiler/watch.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     addRange, BuilderProgram, CancellationToken, chainDiagnosticMessages, combinePaths, CompilerHost, CompilerOptions,
     contains, convertToRelativePath, copyProperties, countWhere, createCompilerDiagnostic,
@@ -19,7 +19,7 @@ import {
     targetOptionDeclaration, WatchCompilerHost, WatchCompilerHostOfConfigFile,
     WatchCompilerHostOfFilesAndCompilerOptions, WatchFactoryHost, WatchHost, WatchLogLevel, WatchOptions,
     WatchStatusReporter, WriteFileCallback, writeFileEnsuringDirectories,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const sysFormatDiagnosticsHost: FormatDiagnosticsHost | undefined = sys ? {
     getCurrentDirectory: () => sys.getCurrentDirectory(),
diff --git a/src/compiler/watchPublic.ts b/src/compiler/watchPublic.ts
index cc0573817f..cf07bea620 100644
--- a/src/compiler/watchPublic.ts
+++ b/src/compiler/watchPublic.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     BuilderProgram, BuildInfo, canJsonReportNoInputFiles, changeCompilerHostLikeToUseCache,
     changesAffectModuleResolution, cleanExtendedConfigCache, clearMap, clearSharedExtendedConfigFileWatcher,
@@ -19,7 +19,7 @@ import {
     SharedExtendedConfigFileWatcher, SourceFile, sys, System, toPath, updateErrorForNoInputFiles,
     updateMissingFilePathsWatch, updateSharedExtendedConfigFileWatcher, updateWatchingWildcardDirectories, version,
     WatchDirectoryFlags, WatchOptions, WatchType, WatchTypeRegistry, WildcardDirectoryWatcher,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export interface ReadBuildProgramHost {
     useCaseSensitiveFileNames(): boolean;
diff --git a/src/compiler/watchUtilities.ts b/src/compiler/watchUtilities.ts
index 5dce173af6..e227fdd38c 100644
--- a/src/compiler/watchUtilities.ts
+++ b/src/compiler/watchUtilities.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     arrayToMap, binarySearch, BuilderProgram, closeFileWatcher, compareStringsCaseSensitive, CompilerOptions,
     createGetCanonicalFileName, Debug, DirectoryWatcherCallback, emptyArray, emptyFileSystemEntries,
@@ -9,7 +9,7 @@ import {
     noop, normalizePath, outFile, Path, PollingInterval, Program, removeFileExtension, removeIgnoredPath,
     returnNoopFileWatcher, returnTrue, Set, setSysLog, SortedArray, SortedReadonlyArray, supportedJSExtensionsFlat,
     timestamp, WatchDirectoryFlags, WatchFileKind, WatchOptions,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * Partial interface of the System thats needed to support the caching of directory structure
diff --git a/src/debug/_namespaces/Debug.ts b/src/debug/_namespaces/Debug.ts
index 449c31bdae..beab090b04 100644
--- a/src/debug/_namespaces/Debug.ts
+++ b/src/debug/_namespaces/Debug.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the Debug namespace. */
 
-export * from "../dbg";
+export * from "../dbg.js";
diff --git a/src/debug/dbg.ts b/src/debug/dbg.ts
index 3b531914d5..eecf7bd5df 100644
--- a/src/debug/dbg.ts
+++ b/src/debug/dbg.ts
@@ -1,4 +1,4 @@
-import * as Debug from "./_namespaces/Debug";
+import * as Debug from "./_namespaces/Debug.js";
 
 /// <reference lib="es2019" />
 
diff --git a/src/deprecatedCompat/4.0/nodeFactoryTopLevelExports.ts b/src/deprecatedCompat/4.0/nodeFactoryTopLevelExports.ts
index b3ec867dab..824bfa0152 100644
--- a/src/deprecatedCompat/4.0/nodeFactoryTopLevelExports.ts
+++ b/src/deprecatedCompat/4.0/nodeFactoryTopLevelExports.ts
@@ -9,7 +9,7 @@ import {
     PropertyName, PropertySignature, PseudoBigInt, QuestionToken, setParent, setTextRange, setTextRangePosEnd,
     StringLiteral, SyntaxKind, TaggedTemplateExpression, TemplateLiteral, ThisTypeNode, Token, TypeNode,
     TypeOperatorNode, TypeParameterDeclaration, TypePredicateNode, VariableDeclaration, YieldExpression,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 // DEPRECATION: Node factory top-level exports
 // DEPRECATION PLAN:
diff --git a/src/deprecatedCompat/4.0/renamedMapInterfaces.ts b/src/deprecatedCompat/4.0/renamedMapInterfaces.ts
index 8db95d01e9..ecdc12bdd3 100644
--- a/src/deprecatedCompat/4.0/renamedMapInterfaces.ts
+++ b/src/deprecatedCompat/4.0/renamedMapInterfaces.ts
@@ -3,7 +3,7 @@
 //     - soft: 4.0
 //     - remove: TBD (will remove for at least one release before replacing with `ESMap`/`ReadonlyESMap`)
 //     - replace: TBD (will eventually replace with `ESMap`/`ReadonlyESMap`)
-declare module "../../compiler/corePublic" {
+declare module "../../compiler/corePublic.js" {
     // Module transform: converted from interface augmentation
     /**
      * @deprecated Use `ts.ReadonlyESMap<K, V>` instead.
@@ -12,7 +12,7 @@ declare module "../../compiler/corePublic" {
     }
 }
 
-declare module "../../compiler/corePublic" {
+declare module "../../compiler/corePublic.js" {
     // Module transform: converted from interface augmentation
     /**
      * @deprecated Use `ts.ESMap<K, V>` instead.
diff --git a/src/deprecatedCompat/4.0/renamedNodeTests.ts b/src/deprecatedCompat/4.0/renamedNodeTests.ts
index 2383d37398..5da825878e 100644
--- a/src/deprecatedCompat/4.0/renamedNodeTests.ts
+++ b/src/deprecatedCompat/4.0/renamedNodeTests.ts
@@ -1,4 +1,4 @@
-import { Debug, Node, SyntaxKind, TypeAssertion } from "../_namespaces/ts";
+import { Debug, Node, SyntaxKind, TypeAssertion } from "../_namespaces/ts.js";
 
 // DEPRECATION: Renamed node tests
 // DEPRECATION PLAN:
@@ -12,4 +12,4 @@ export const isTypeAssertion = Debug.deprecate(function isTypeAssertion(node: No
     since: "4.0",
     warnAfter: "4.1",
     message: "Use `isTypeAssertionExpression` instead."
-});
\ No newline at end of file
+});
diff --git a/src/deprecatedCompat/4.2/abstractConstructorTypes.ts b/src/deprecatedCompat/4.2/abstractConstructorTypes.ts
index 93a305656d..63d5ec0366 100644
--- a/src/deprecatedCompat/4.2/abstractConstructorTypes.ts
+++ b/src/deprecatedCompat/4.2/abstractConstructorTypes.ts
@@ -1,14 +1,14 @@
 import {
     addNodeFactoryPatcher, buildOverload, ConstructorTypeNode, factory, Modifier, NodeArray, NodeFactory,
     ParameterDeclaration, TypeNode, TypeParameterDeclaration,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 // DEPRECATION: Overloads for createConstructorTypeNode/updateConstructorTypeNode that do not accept 'modifiers'
 // DEPRECATION PLAN:
 //     - soft: 4.2
 //     - warn: 4.3
 //     - error: 5.0
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface NodeFactory {
         /** @deprecated Use the overload that accepts 'modifiers' */
diff --git a/src/deprecatedCompat/4.2/renamedNodeTests.ts b/src/deprecatedCompat/4.2/renamedNodeTests.ts
index 4edba631fe..722ecd4e8a 100644
--- a/src/deprecatedCompat/4.2/renamedNodeTests.ts
+++ b/src/deprecatedCompat/4.2/renamedNodeTests.ts
@@ -1,4 +1,4 @@
-import { Debug, isMemberName, MemberName, Node } from "../_namespaces/ts";
+import { Debug, isMemberName, MemberName, Node } from "../_namespaces/ts.js";
 
 // DEPRECATION: Renamed node tests
 // DEPRECATION PLAN:
@@ -14,4 +14,4 @@ export const isIdentifierOrPrivateIdentifier = Debug.deprecate(function isIdenti
     since: "4.2",
     warnAfter: "4.3",
     message: "Use `isMemberName` instead."
-});
\ No newline at end of file
+});
diff --git a/src/deprecatedCompat/4.6/importTypeAssertions.ts b/src/deprecatedCompat/4.6/importTypeAssertions.ts
index 143e06edc4..a5776e25fb 100644
--- a/src/deprecatedCompat/4.6/importTypeAssertions.ts
+++ b/src/deprecatedCompat/4.6/importTypeAssertions.ts
@@ -1,14 +1,14 @@
 import {
     addNodeFactoryPatcher, buildOverload, EntityName, factory, ImportTypeAssertionContainer, ImportTypeNode, isArray,
     isEntityName, isImportTypeAssertionContainer, NodeFactory, TypeNode,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 // DEPRECATION: Overloads to createImportTypeNode/updateImportTypeNode that do not accept `assertions`
 // DEPRECATION PLAN:
 //     - soft: 4.6
 //     - warn: 4.7
 //     - error: 5.0
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface NodeFactory {
         // NOTE: The following overload is not deprecated, but exists to ensure we don't mark `createImportTypeNode(argument)` as deprecated due to optional parameters.
diff --git a/src/deprecatedCompat/4.7/typeParameterModifiers.ts b/src/deprecatedCompat/4.7/typeParameterModifiers.ts
index 6bb1c16300..c91b6bb1b2 100644
--- a/src/deprecatedCompat/4.7/typeParameterModifiers.ts
+++ b/src/deprecatedCompat/4.7/typeParameterModifiers.ts
@@ -1,14 +1,14 @@
 import {
     addNodeFactoryPatcher, buildOverload, factory, Identifier, isArray, Modifier, NodeFactory, TypeNode,
     TypeParameterDeclaration,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 // DEPRECATION: Overloads to createTypeParameter/updateTypeParameter that does not accept `modifiers`
 // DEPRECATION PLAN:
 //     - soft: 4.7
 //     - warn: 4.8
 //     - error: 5.0
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface NodeFactory {
         /** @deprecated Use the overload that accepts 'modifiers' */
diff --git a/src/deprecatedCompat/4.8/mergeDecoratorsAndModifiers.ts b/src/deprecatedCompat/4.8/mergeDecoratorsAndModifiers.ts
index 66b163c92d..6594286848 100644
--- a/src/deprecatedCompat/4.8/mergeDecoratorsAndModifiers.ts
+++ b/src/deprecatedCompat/4.8/mergeDecoratorsAndModifiers.ts
@@ -11,14 +11,14 @@ import {
     ModuleBody, ModuleDeclaration, ModuleName, ModuleReference, NamedExportBindings, NodeFactory, NodeFlags,
     ParameterDeclaration, PropertyDeclaration, PropertyName, QuestionToken, SetAccessorDeclaration, some,
     TypeAliasDeclaration, TypeElement, TypeNode, TypeParameterDeclaration,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 // DEPRECATION: Deprecate passing `decorators` separate from `modifiers`
 // DEPRECATION PLAN:
 //     - soft: 4.8
 //     - warn: 4.9
 //     - error: 5.0
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface Node {
         /**
@@ -47,7 +47,7 @@ declare module "../../compiler/types" {
     }
 }
 
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface PropertySignature {
         /** @deprecated A property signature cannot have an initializer */
@@ -55,7 +55,7 @@ declare module "../../compiler/types" {
     }
 }
 
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface PropertyAssignment {
         /** @deprecated A property assignment cannot have a question token */
@@ -66,7 +66,7 @@ declare module "../../compiler/types" {
     }
 }
 
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface ShorthandPropertyAssignment {
         /** @deprecated A shorthand property assignment cannot have modifiers */
@@ -80,7 +80,7 @@ declare module "../../compiler/types" {
     }
 }
 
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface FunctionTypeNode {
         /** @deprecated A function type cannot have modifiers */
@@ -88,7 +88,7 @@ declare module "../../compiler/types" {
     }
 }
 
-declare module "../../compiler/types" {
+declare module "../../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface NodeFactory {
         /**
diff --git a/src/deprecatedCompat/_namespaces/ts.ts b/src/deprecatedCompat/_namespaces/ts.ts
index 652fc18b2e..a1168f5c44 100644
--- a/src/deprecatedCompat/_namespaces/ts.ts
+++ b/src/deprecatedCompat/_namespaces/ts.ts
@@ -1,12 +1,12 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../deprecations";
-export * from "../4.0/nodeFactoryTopLevelExports";
-export * from "../4.0/renamedNodeTests";
-export * from "../4.0/renamedMapInterfaces";
-export * from "../4.2/renamedNodeTests";
-export * from "../4.2/abstractConstructorTypes";
-export * from "../4.6/importTypeAssertions";
-export * from "../4.7/typeParameterModifiers";
-export * from "../4.8/mergeDecoratorsAndModifiers";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../deprecations.js";
+export * from "../4.0/nodeFactoryTopLevelExports.js";
+export * from "../4.0/renamedNodeTests.js";
+export * from "../4.0/renamedMapInterfaces.js";
+export * from "../4.2/renamedNodeTests.js";
+export * from "../4.2/abstractConstructorTypes.js";
+export * from "../4.6/importTypeAssertions.js";
+export * from "../4.7/typeParameterModifiers.js";
+export * from "../4.8/mergeDecoratorsAndModifiers.js";
diff --git a/src/deprecatedCompat/deprecations.ts b/src/deprecatedCompat/deprecations.ts
index d85748d14d..b635e4bef9 100644
--- a/src/deprecatedCompat/deprecations.ts
+++ b/src/deprecatedCompat/deprecations.ts
@@ -1,4 +1,4 @@
-import { Debug, DeprecationOptions, hasProperty } from "./_namespaces/ts";
+import { Debug, DeprecationOptions, hasProperty } from "./_namespaces/ts.js";
 
 // The following are deprecations for the public API. Deprecated exports are removed from the compiler itself
 // and compatible implementations are added here, along with an appropriate deprecation warning using
diff --git a/src/dynamicImportCompat/_namespaces/ts.server.ts b/src/dynamicImportCompat/_namespaces/ts.server.ts
index 729da9c24e..55f3b8a1a2 100644
--- a/src/dynamicImportCompat/_namespaces/ts.server.ts
+++ b/src/dynamicImportCompat/_namespaces/ts.server.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../dynamicImportCompat";
+export * from "../dynamicImportCompat.js";
diff --git a/src/dynamicImportCompat/_namespaces/ts.ts b/src/dynamicImportCompat/_namespaces/ts.ts
index 91d7693414..1da451607d 100644
--- a/src/dynamicImportCompat/_namespaces/ts.ts
+++ b/src/dynamicImportCompat/_namespaces/ts.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts namespace. */
 
-import * as server from "./ts.server";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/executeCommandLine/_namespaces/ts.ts b/src/executeCommandLine/_namespaces/ts.ts
index 488d183df4..80527b2fd9 100644
--- a/src/executeCommandLine/_namespaces/ts.ts
+++ b/src/executeCommandLine/_namespaces/ts.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../executeCommandLine";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../executeCommandLine.js";
diff --git a/src/executeCommandLine/executeCommandLine.ts b/src/executeCommandLine/executeCommandLine.ts
index 75c4779ce2..0d08706716 100644
--- a/src/executeCommandLine/executeCommandLine.ts
+++ b/src/executeCommandLine/executeCommandLine.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     arrayFrom, BuilderProgram, BuildOptions, buildOpts, changeCompilerHostLikeToUseCache, CharacterCodes, combinePaths,
     CommandLineOption, compareStringsCaseInsensitive, CompilerOptions, contains, convertToOptionsWithAbsolutePaths,
@@ -17,7 +17,7 @@ import {
     ReportEmitErrorSummary, SolutionBuilder, SolutionBuilderHostBase, sort, SourceFile, startsWith, startTracing,
     stringContains, supportedJSExtensionsFlat, supportedTSExtensionsFlat, sys, System, toPath, tracing,
     validateLocaleAndSetLanguage, version, WatchCompilerHost, WatchOptions,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 interface Statistic {
     name: string;
diff --git a/src/harness/_namespaces/FourSlash.ts b/src/harness/_namespaces/FourSlash.ts
index c069ebaf78..ff7722f628 100644
--- a/src/harness/_namespaces/FourSlash.ts
+++ b/src/harness/_namespaces/FourSlash.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the FourSlash namespace. */
 
-export * from "../fourslashImpl";
+export * from "../fourslashImpl.js";
diff --git a/src/harness/_namespaces/FourSlashInterface.ts b/src/harness/_namespaces/FourSlashInterface.ts
index 270be73001..88127d65a0 100644
--- a/src/harness/_namespaces/FourSlashInterface.ts
+++ b/src/harness/_namespaces/FourSlashInterface.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the FourSlashInterface namespace. */
 
-export * from "../fourslashInterfaceImpl";
+export * from "../fourslashInterfaceImpl.js";
diff --git a/src/harness/_namespaces/Harness.LanguageService.ts b/src/harness/_namespaces/Harness.LanguageService.ts
index 53544477e2..d485be2af0 100644
--- a/src/harness/_namespaces/Harness.LanguageService.ts
+++ b/src/harness/_namespaces/Harness.LanguageService.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the Harness.LanguageService namespace. */
 
-export * from "../harnessLanguageService";
+export * from "../harnessLanguageService.js";
diff --git a/src/harness/_namespaces/Harness.SourceMapRecorder.ts b/src/harness/_namespaces/Harness.SourceMapRecorder.ts
index 909654b08d..8ae47bc803 100644
--- a/src/harness/_namespaces/Harness.SourceMapRecorder.ts
+++ b/src/harness/_namespaces/Harness.SourceMapRecorder.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the Harness.SourceMapRecorder namespace. */
 
-export * from "../sourceMapRecorder";
+export * from "../sourceMapRecorder.js";
diff --git a/src/harness/_namespaces/Harness.ts b/src/harness/_namespaces/Harness.ts
index 3ff4b00655..964d64de66 100644
--- a/src/harness/_namespaces/Harness.ts
+++ b/src/harness/_namespaces/Harness.ts
@@ -1,9 +1,9 @@
 /* Generated file to emulate the Harness namespace. */
 
-export * from "../runnerbase";
-export * from "../harnessIO";
-export * from "../typeWriter";
-import * as LanguageService from "./Harness.LanguageService";
+export * from "../runnerbase.js";
+export * from "../harnessIO.js";
+export * from "../typeWriter.js";
+import * as LanguageService from "./Harness.LanguageService.js";
 export { LanguageService };
-import * as SourceMapRecorder from "./Harness.SourceMapRecorder";
+import * as SourceMapRecorder from "./Harness.SourceMapRecorder.js";
 export { SourceMapRecorder };
diff --git a/src/harness/_namespaces/Utils.ts b/src/harness/_namespaces/Utils.ts
index 3b958cd166..d15b5cc7e3 100644
--- a/src/harness/_namespaces/Utils.ts
+++ b/src/harness/_namespaces/Utils.ts
@@ -1,5 +1,5 @@
 /* Generated file to emulate the Utils namespace. */
 
-export * from "../util";
-export * from "../findUpDir";
-export * from "../harnessUtils";
+export * from "../util.js";
+export * from "../findUpDir.js";
+export * from "../harnessUtils.js";
diff --git a/src/harness/_namespaces/collections.ts b/src/harness/_namespaces/collections.ts
index 870e956769..3445e7971f 100644
--- a/src/harness/_namespaces/collections.ts
+++ b/src/harness/_namespaces/collections.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the collections namespace. */
 
-export * from "../collectionsImpl";
+export * from "../collectionsImpl.js";
diff --git a/src/harness/_namespaces/compiler.ts b/src/harness/_namespaces/compiler.ts
index 3ff645eca5..3b53847394 100644
--- a/src/harness/_namespaces/compiler.ts
+++ b/src/harness/_namespaces/compiler.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the compiler namespace. */
 
-export * from "../compilerImpl";
+export * from "../compilerImpl.js";
diff --git a/src/harness/_namespaces/documents.ts b/src/harness/_namespaces/documents.ts
index 67dbd0e6c1..c1bba77a94 100644
--- a/src/harness/_namespaces/documents.ts
+++ b/src/harness/_namespaces/documents.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the documents namespace. */
 
-export * from "../documentsUtil";
+export * from "../documentsUtil.js";
diff --git a/src/harness/_namespaces/evaluator.ts b/src/harness/_namespaces/evaluator.ts
index e47f3eb0ae..d052b6c8fe 100644
--- a/src/harness/_namespaces/evaluator.ts
+++ b/src/harness/_namespaces/evaluator.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the evaluator namespace. */
 
-export * from "../evaluatorImpl";
+export * from "../evaluatorImpl.js";
diff --git a/src/harness/_namespaces/fakes.ts b/src/harness/_namespaces/fakes.ts
index d2a68860bb..f5d19a8eee 100644
--- a/src/harness/_namespaces/fakes.ts
+++ b/src/harness/_namespaces/fakes.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the fakes namespace. */
 
-export * from "../fakesHosts";
+export * from "../fakesHosts.js";
diff --git a/src/harness/_namespaces/ts.TestFSWithWatch.ts b/src/harness/_namespaces/ts.TestFSWithWatch.ts
index d20826a03b..8ced9d942b 100644
--- a/src/harness/_namespaces/ts.TestFSWithWatch.ts
+++ b/src/harness/_namespaces/ts.TestFSWithWatch.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.TestFSWithWatch namespace. */
 
-export * from "../virtualFileSystemWithWatch";
+export * from "../virtualFileSystemWithWatch.js";
diff --git a/src/harness/_namespaces/ts.server.ts b/src/harness/_namespaces/ts.server.ts
index 714986489e..d808ae75c5 100644
--- a/src/harness/_namespaces/ts.server.ts
+++ b/src/harness/_namespaces/ts.server.ts
@@ -1,6 +1,6 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-export * from "../../server/_namespaces/ts.server";
-export * from "../../typingsInstallerCore/_namespaces/ts.server";
-export * from "../client";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+export * from "../../server/_namespaces/ts.server.js";
+export * from "../../typingsInstallerCore/_namespaces/ts.server.js";
+export * from "../client.js";
diff --git a/src/harness/_namespaces/ts.ts b/src/harness/_namespaces/ts.ts
index 9c29cb2905..024acb1a3e 100644
--- a/src/harness/_namespaces/ts.ts
+++ b/src/harness/_namespaces/ts.ts
@@ -1,13 +1,13 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../services/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../server/_namespaces/ts";
-export * from "../../typingsInstallerCore/_namespaces/ts";
-export * from "../../deprecatedCompat/_namespaces/ts";
-export * from "../harnessGlobals";
-import * as server from "./ts.server";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../services/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../server/_namespaces/ts.js";
+export * from "../../typingsInstallerCore/_namespaces/ts.js";
+export * from "../../deprecatedCompat/_namespaces/ts.js";
+export * from "../harnessGlobals.js";
+import * as server from "./ts.server.js";
 export { server };
-import * as TestFSWithWatch from "./ts.TestFSWithWatch";
+import * as TestFSWithWatch from "./ts.TestFSWithWatch.js";
 export { TestFSWithWatch };
diff --git a/src/harness/_namespaces/vfs.ts b/src/harness/_namespaces/vfs.ts
index 1eb82cd822..ddd2347e4a 100644
--- a/src/harness/_namespaces/vfs.ts
+++ b/src/harness/_namespaces/vfs.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the vfs namespace. */
 
-export * from "../vfsUtil";
+export * from "../vfsUtil.js";
diff --git a/src/harness/_namespaces/vpath.ts b/src/harness/_namespaces/vpath.ts
index 7430c87d9b..5c9c5ff5e9 100644
--- a/src/harness/_namespaces/vpath.ts
+++ b/src/harness/_namespaces/vpath.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the vpath namespace. */
 
-export * from "../vpathUtil";
+export * from "../vpathUtil.js";
diff --git a/src/harness/client.ts b/src/harness/client.ts
index 7808709963..fbe82ef4d1 100644
--- a/src/harness/client.ts
+++ b/src/harness/client.ts
@@ -11,8 +11,8 @@ import {
     RenameInfoFailure, RenameInfoSuccess, RenameLocation, ScriptElementKind, SemanticClassificationFormat, Set,
     SignatureHelpItem, SignatureHelpItems, SourceFile, Symbol, TextChange, TextInsertion, textPart, TextRange, TextSpan,
     TodoComment, TodoCommentDescriptor, UserPreferences,
-} from "./_namespaces/ts";
-import { CommandNames, protocol } from "./_namespaces/ts.server";
+} from "./_namespaces/ts.js";
+import { CommandNames, protocol } from "./_namespaces/ts.server.js";
 
 export interface SessionClientHost extends LanguageServiceHost {
     writeMessage(message: string): void;
diff --git a/src/harness/collectionsImpl.ts b/src/harness/collectionsImpl.ts
index 541358ac95..788804d801 100644
--- a/src/harness/collectionsImpl.ts
+++ b/src/harness/collectionsImpl.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 
 export interface SortOptions<T> {
     comparer: (a: T, b: T) => number;
diff --git a/src/harness/compilerImpl.ts b/src/harness/compilerImpl.ts
index dc694efa44..ac9626fa3f 100644
--- a/src/harness/compilerImpl.ts
+++ b/src/harness/compilerImpl.ts
@@ -1,10 +1,10 @@
-import * as ts from "./_namespaces/ts";
-import * as fakes from "./_namespaces/fakes";
-import * as vpath from "./_namespaces/vpath";
-import * as documents from "./_namespaces/documents";
-import * as vfs from "./_namespaces/vfs";
-import * as collections from "./_namespaces/collections";
-import * as Harness from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import * as fakes from "./_namespaces/fakes.js";
+import * as vpath from "./_namespaces/vpath.js";
+import * as documents from "./_namespaces/documents.js";
+import * as vfs from "./_namespaces/vfs.js";
+import * as collections from "./_namespaces/collections.js";
+import * as Harness from "./_namespaces/Harness.js";
 
 /**
  * Test harness compiler functionality.
diff --git a/src/harness/documentsUtil.ts b/src/harness/documentsUtil.ts
index dd012f4477..257e8f7de2 100644
--- a/src/harness/documentsUtil.ts
+++ b/src/harness/documentsUtil.ts
@@ -1,5 +1,5 @@
-import * as Harness from "./_namespaces/Harness";
-import * as ts from "./_namespaces/ts";
+import * as Harness from "./_namespaces/Harness.js";
+import * as ts from "./_namespaces/ts.js";
 
 // NOTE: The contents of this file are all exported from the namespace 'documents'. This is to
 //       support the eventual conversion of harness into a modular system.
@@ -185,4 +185,4 @@ export class SourceMap {
         }
         return vlq;
     }
-}
\ No newline at end of file
+}
diff --git a/src/harness/evaluatorImpl.ts b/src/harness/evaluatorImpl.ts
index 3f51831308..c1b22645f5 100644
--- a/src/harness/evaluatorImpl.ts
+++ b/src/harness/evaluatorImpl.ts
@@ -1,9 +1,9 @@
-import * as vpath from "./_namespaces/vpath";
-import * as vfs from "./_namespaces/vfs";
-import * as ts from "./_namespaces/ts";
-import * as Harness from "./_namespaces/Harness";
-import * as fakes from "./_namespaces/fakes";
-import * as compiler from "./_namespaces/compiler";
+import * as vpath from "./_namespaces/vpath.js";
+import * as vfs from "./_namespaces/vfs.js";
+import * as ts from "./_namespaces/ts.js";
+import * as Harness from "./_namespaces/Harness.js";
+import * as fakes from "./_namespaces/fakes.js";
+import * as compiler from "./_namespaces/compiler.js";
 
 declare let Symbol: SymbolConstructor;
 
diff --git a/src/harness/fakesHosts.ts b/src/harness/fakesHosts.ts
index 459d09a1ec..e59e09ac53 100644
--- a/src/harness/fakesHosts.ts
+++ b/src/harness/fakesHosts.ts
@@ -1,10 +1,10 @@
-import * as ts from "./_namespaces/ts";
-import * as vfs from "./_namespaces/vfs";
-import * as Utils from "./_namespaces/Utils";
-import * as vpath from "./_namespaces/vpath";
-import * as documents from "./_namespaces/documents";
-import * as collections from "./_namespaces/collections";
-import * as Harness from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import * as vfs from "./_namespaces/vfs.js";
+import * as Utils from "./_namespaces/Utils.js";
+import * as vpath from "./_namespaces/vpath.js";
+import * as documents from "./_namespaces/documents.js";
+import * as collections from "./_namespaces/collections.js";
+import * as Harness from "./_namespaces/Harness.js";
 
 /**
  * Fake implementations of various compiler dependencies.
diff --git a/src/harness/fourslashImpl.ts b/src/harness/fourslashImpl.ts
index d09bbe38b2..4ad97cf65b 100644
--- a/src/harness/fourslashImpl.ts
+++ b/src/harness/fourslashImpl.ts
@@ -1,10 +1,10 @@
-import * as FourSlashInterface from "./_namespaces/FourSlashInterface";
-import * as Harness from "./_namespaces/Harness";
-import * as vfs from "./_namespaces/vfs";
-import * as ts from "./_namespaces/ts";
-import * as fakes from "./_namespaces/fakes";
-import * as vpath from "./_namespaces/vpath";
-import * as Utils from "./_namespaces/Utils";
+import * as FourSlashInterface from "./_namespaces/FourSlashInterface.js";
+import * as Harness from "./_namespaces/Harness.js";
+import * as vfs from "./_namespaces/vfs.js";
+import * as ts from "./_namespaces/ts.js";
+import * as fakes from "./_namespaces/fakes.js";
+import * as vpath from "./_namespaces/vpath.js";
+import * as Utils from "./_namespaces/Utils.js";
 
 import ArrayOrSingle = FourSlashInterface.ArrayOrSingle;
 
diff --git a/src/harness/fourslashInterfaceImpl.ts b/src/harness/fourslashInterfaceImpl.ts
index f4d78ab4d1..2976c8cf1d 100644
--- a/src/harness/fourslashInterfaceImpl.ts
+++ b/src/harness/fourslashInterfaceImpl.ts
@@ -1,5 +1,5 @@
-import * as FourSlash from "./_namespaces/FourSlash";
-import * as ts from "./_namespaces/ts";
+import * as FourSlash from "./_namespaces/FourSlash.js";
+import * as ts from "./_namespaces/ts.js";
 
 export class Test {
     constructor(private state: FourSlash.TestState) {
diff --git a/src/harness/harnessGlobals.ts b/src/harness/harnessGlobals.ts
index 9de9537181..4fe1818070 100644
--- a/src/harness/harnessGlobals.ts
+++ b/src/harness/harnessGlobals.ts
@@ -1,6 +1,6 @@
 import * as chai from "chai";
 
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 
 // this will work in the browser via browserify
 declare global {
diff --git a/src/harness/harnessIO.ts b/src/harness/harnessIO.ts
index a79066f1ae..69dab427dc 100644
--- a/src/harness/harnessIO.ts
+++ b/src/harness/harnessIO.ts
@@ -1,11 +1,11 @@
-import * as ts from "./_namespaces/ts";
-import * as Utils from "./_namespaces/Utils";
-import * as vpath from "./_namespaces/vpath";
-import * as vfs from "./_namespaces/vfs";
-import * as compiler from "./_namespaces/compiler";
-import * as documents from "./_namespaces/documents";
-import * as fakes from "./_namespaces/fakes";
-import { RunnerBase, TypeWriterResult, TypeWriterWalker } from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import * as Utils from "./_namespaces/Utils.js";
+import * as vpath from "./_namespaces/vpath.js";
+import * as vfs from "./_namespaces/vfs.js";
+import * as compiler from "./_namespaces/compiler.js";
+import * as documents from "./_namespaces/documents.js";
+import * as fakes from "./_namespaces/fakes.js";
+import { RunnerBase, TypeWriterResult, TypeWriterWalker } from "./_namespaces/Harness.js";
 
 export interface IO {
     newLine(): string;
diff --git a/src/harness/harnessLanguageService.ts b/src/harness/harnessLanguageService.ts
index ec101b39b8..15902959ff 100644
--- a/src/harness/harnessLanguageService.ts
+++ b/src/harness/harnessLanguageService.ts
@@ -1,10 +1,10 @@
-import * as ts from "./_namespaces/ts";
-import * as fakes from "./_namespaces/fakes";
-import * as vfs from "./_namespaces/vfs";
-import * as collections from "./_namespaces/collections";
-import * as vpath from "./_namespaces/vpath";
-import * as Utils from "./_namespaces/Utils";
-import { Compiler, harnessNewLine, mockHash, virtualFileSystemRoot } from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import * as fakes from "./_namespaces/fakes.js";
+import * as vfs from "./_namespaces/vfs.js";
+import * as collections from "./_namespaces/collections.js";
+import * as vpath from "./_namespaces/vpath.js";
+import * as Utils from "./_namespaces/Utils.js";
+import { Compiler, harnessNewLine, mockHash, virtualFileSystemRoot } from "./_namespaces/Harness.js";
 
 export function makeDefaultProxy(info: ts.server.PluginCreateInfo): ts.LanguageService {
     const proxy = Object.create(/*prototype*/ null); // eslint-disable-line no-null/no-null
diff --git a/src/harness/harnessUtils.ts b/src/harness/harnessUtils.ts
index 0c304d2e34..5d3d692d6f 100644
--- a/src/harness/harnessUtils.ts
+++ b/src/harness/harnessUtils.ts
@@ -1,5 +1,5 @@
-import * as ts from "./_namespaces/ts";
-import * as Harness from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import * as Harness from "./_namespaces/Harness.js";
 
 export function encodeString(s: string): string {
     return ts.sys.bufferFrom!(s).toString("utf8");
diff --git a/src/harness/runnerbase.ts b/src/harness/runnerbase.ts
index 6a3ee7ef73..6f3273e7b8 100644
--- a/src/harness/runnerbase.ts
+++ b/src/harness/runnerbase.ts
@@ -1,5 +1,5 @@
-import * as ts from "./_namespaces/ts";
-import { FileBasedTest, IO, userSpecifiedRoot } from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import { FileBasedTest, IO, userSpecifiedRoot } from "./_namespaces/Harness.js";
 
 export type TestRunnerKind = CompilerTestKind | FourslashTestKind | "project" | "rwc" | "test262" | "user" | "dt" | "docker";
 export type CompilerTestKind = "conformance" | "compiler";
@@ -61,4 +61,4 @@ export abstract class RunnerBase {
         fixedPath = fixedPath.replace(localHost, "");
         return fixedPath;
     }
-}
\ No newline at end of file
+}
diff --git a/src/harness/sourceMapRecorder.ts b/src/harness/sourceMapRecorder.ts
index 06e37c07dd..419a12c243 100644
--- a/src/harness/sourceMapRecorder.ts
+++ b/src/harness/sourceMapRecorder.ts
@@ -1,7 +1,7 @@
-import * as ts from "./_namespaces/ts";
-import * as documents from "./_namespaces/documents";
-import * as Utils from "./_namespaces/Utils";
-import { Compiler } from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import * as documents from "./_namespaces/documents.js";
+import * as Utils from "./_namespaces/Utils.js";
+import { Compiler } from "./_namespaces/Harness.js";
 
 interface SourceMapSpanWithDecodeErrors {
     sourceMapSpan: ts.Mapping;
diff --git a/src/harness/typeWriter.ts b/src/harness/typeWriter.ts
index 6593623c4d..32d0ddb7d5 100644
--- a/src/harness/typeWriter.ts
+++ b/src/harness/typeWriter.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 
 export interface TypeWriterTypeResult {
     line: number;
@@ -191,4 +191,4 @@ export class TypeWriterWalker {
             symbol: symbolString
         };
     }
-}
\ No newline at end of file
+}
diff --git a/src/harness/util.ts b/src/harness/util.ts
index 2dac1835f1..6068342dcb 100644
--- a/src/harness/util.ts
+++ b/src/harness/util.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 
 /**
  * Common utilities
@@ -126,4 +126,4 @@ export function defer<T = void>(): Deferred<T> {
         reject = _reject;
     });
     return { resolve, reject, promise };
-}
\ No newline at end of file
+}
diff --git a/src/harness/vfsUtil.ts b/src/harness/vfsUtil.ts
index ec1581e8ec..96cf7ae439 100644
--- a/src/harness/vfsUtil.ts
+++ b/src/harness/vfsUtil.ts
@@ -1,8 +1,8 @@
-import * as collections from "./_namespaces/collections";
-import * as ts from "./_namespaces/ts";
-import * as vpath from "./_namespaces/vpath";
-import * as documents from "./_namespaces/documents";
-import * as Harness from "./_namespaces/Harness";
+import * as collections from "./_namespaces/collections.js";
+import * as ts from "./_namespaces/ts.js";
+import * as vpath from "./_namespaces/vpath.js";
+import * as documents from "./_namespaces/documents.js";
+import * as Harness from "./_namespaces/Harness.js";
 
 /**
  * Posix-style path to the TypeScript compiler build outputs (including tsc.js, lib.d.ts, etc.)
diff --git a/src/harness/virtualFileSystemWithWatch.ts b/src/harness/virtualFileSystemWithWatch.ts
index 8aaaa01b50..60df6beb6d 100644
--- a/src/harness/virtualFileSystemWithWatch.ts
+++ b/src/harness/virtualFileSystemWithWatch.ts
@@ -1,4 +1,4 @@
-import * as Harness from "./_namespaces/Harness";
+import * as Harness from "./_namespaces/Harness.js";
 import {
     arrayFrom, arrayToMap, clear, clone, combinePaths, compareStringsCaseSensitive, createGetCanonicalFileName,
     createMultiMap, createSystemWatchFunctions, Debug, directorySeparator, ESMap, FileSystemEntryKind, FileWatcher,
@@ -8,8 +8,8 @@ import {
     isNumber, isString, Map, mapDefined, matchFiles, ModuleResolutionHost, MultiMap, noop,
     patchWriteFileEnsuringDirectory, Path, PollingInterval, ReadonlyESMap, RequireResult, Set, SortedArray, sys, toPath,
     WatchFileKind,
-} from "./_namespaces/ts";
-import { ServerHost } from "./_namespaces/ts.server";
+} from "./_namespaces/ts.js";
+import { ServerHost } from "./_namespaces/ts.server.js";
 
 export const libFile: File = {
     path: "/a/lib/lib.d.ts",
diff --git a/src/harness/vpathUtil.ts b/src/harness/vpathUtil.ts
index 0e84144cf0..5cc4190a70 100644
--- a/src/harness/vpathUtil.ts
+++ b/src/harness/vpathUtil.ts
@@ -1,5 +1,5 @@
-import * as ts from "./_namespaces/ts";
-import * as vfs from "./_namespaces/vfs";
+import * as ts from "./_namespaces/ts.js";
+import * as vfs from "./_namespaces/vfs.js";
 
 export import sep = ts.directorySeparator;
 export import normalizeSeparators = ts.normalizeSlashes;
diff --git a/src/jsTyping/_namespaces/ts.JsTyping.ts b/src/jsTyping/_namespaces/ts.JsTyping.ts
index 6b010af980..92abff3bea 100644
--- a/src/jsTyping/_namespaces/ts.JsTyping.ts
+++ b/src/jsTyping/_namespaces/ts.JsTyping.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.JsTyping namespace. */
 
-export * from "../jsTyping";
+export * from "../jsTyping.js";
diff --git a/src/jsTyping/_namespaces/ts.server.ts b/src/jsTyping/_namespaces/ts.server.ts
index fe67648d42..a378332035 100644
--- a/src/jsTyping/_namespaces/ts.server.ts
+++ b/src/jsTyping/_namespaces/ts.server.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../shared";
-export * from "../types";
+export * from "../shared.js";
+export * from "../types.js";
diff --git a/src/jsTyping/_namespaces/ts.ts b/src/jsTyping/_namespaces/ts.ts
index adf9791f4d..db60f5218c 100644
--- a/src/jsTyping/_namespaces/ts.ts
+++ b/src/jsTyping/_namespaces/ts.ts
@@ -1,7 +1,7 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-import * as JsTyping from "./ts.JsTyping";
+export * from "../../compiler/_namespaces/ts.js";
+import * as JsTyping from "./ts.JsTyping.js";
 export { JsTyping };
-import * as server from "./ts.server";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/jsTyping/jsTyping.ts b/src/jsTyping/jsTyping.ts
index 0ba0351a50..a65520a70f 100644
--- a/src/jsTyping/jsTyping.ts
+++ b/src/jsTyping/jsTyping.ts
@@ -4,7 +4,7 @@ import {
     getEntries, getNormalizedAbsolutePath, getOwnKeys, getPathComponents, getProperty, hasJSFileExtension, Map,
     mapDefined, MapLike, normalizePath, Path, readConfigFile, ReadonlyESMap, removeFileExtension,
     removeMinAndVersionNumbers, Set, some, TypeAcquisition, Version, versionMajorMinor,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export interface TypingResolutionHost {
diff --git a/src/jsTyping/shared.ts b/src/jsTyping/shared.ts
index f004b0257a..0b7c40c6ce 100644
--- a/src/jsTyping/shared.ts
+++ b/src/jsTyping/shared.ts
@@ -1,4 +1,4 @@
-import { padLeft, sys } from "./_namespaces/ts";
+import { padLeft, sys } from "./_namespaces/ts.js";
 
 export type ActionSet = "action::set";
 export type ActionInvalidate = "action::invalidate";
diff --git a/src/jsTyping/types.ts b/src/jsTyping/types.ts
index 013e32553c..263c9ba235 100644
--- a/src/jsTyping/types.ts
+++ b/src/jsTyping/types.ts
@@ -1,11 +1,11 @@
 import {
     ActionInvalidate, ActionPackageInstalled, ActionSet, EventBeginInstallTypes, EventEndInstallTypes,
     EventInitializationFailed, EventTypesRegistry,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 import {
     CompilerOptions, DirectoryWatcherCallback, FileWatcher, FileWatcherCallback, JsTyping, MapLike, Path,
     SortedReadonlyArray, TypeAcquisition, WatchOptions,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export interface TypingInstallerResponse {
     readonly kind: ActionSet | ActionInvalidate | EventTypesRegistry | ActionPackageInstalled | EventBeginInstallTypes | EventEndInstallTypes | EventInitializationFailed;
diff --git a/src/loggedIO/_namespaces/Harness.ts b/src/loggedIO/_namespaces/Harness.ts
index bcd2ed640d..507798b1ed 100644
--- a/src/loggedIO/_namespaces/Harness.ts
+++ b/src/loggedIO/_namespaces/Harness.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the Harness namespace. */
 
-export * from "../../harness/_namespaces/Harness";
-export * from "../loggedIO";
+export * from "../../harness/_namespaces/Harness.js";
+export * from "../loggedIO.js";
diff --git a/src/loggedIO/_namespaces/Playback.ts b/src/loggedIO/_namespaces/Playback.ts
index a2e238e856..880fd888c5 100644
--- a/src/loggedIO/_namespaces/Playback.ts
+++ b/src/loggedIO/_namespaces/Playback.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the Playback namespace. */
 
-export * from "../loggedIO";
+export * from "../loggedIO.js";
diff --git a/src/loggedIO/_namespaces/ts.server.ts b/src/loggedIO/_namespaces/ts.server.ts
index b4a44f9d78..09738a9d53 100644
--- a/src/loggedIO/_namespaces/ts.server.ts
+++ b/src/loggedIO/_namespaces/ts.server.ts
@@ -1,7 +1,7 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-export * from "../../server/_namespaces/ts.server";
-export * from "../../typingsInstallerCore/_namespaces/ts.server";
-export * from "../../harness/_namespaces/ts.server";
-export * from "../loggedIO";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+export * from "../../server/_namespaces/ts.server.js";
+export * from "../../typingsInstallerCore/_namespaces/ts.server.js";
+export * from "../../harness/_namespaces/ts.server.js";
+export * from "../loggedIO.js";
diff --git a/src/loggedIO/_namespaces/ts.ts b/src/loggedIO/_namespaces/ts.ts
index 2f90a4b4fb..a967b07d54 100644
--- a/src/loggedIO/_namespaces/ts.ts
+++ b/src/loggedIO/_namespaces/ts.ts
@@ -1,10 +1,10 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../services/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../server/_namespaces/ts";
-export * from "../../typingsInstallerCore/_namespaces/ts";
-export * from "../../harness/_namespaces/ts";
-import * as server from "./ts.server";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../services/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../server/_namespaces/ts.js";
+export * from "../../typingsInstallerCore/_namespaces/ts.js";
+export * from "../../harness/_namespaces/ts.js";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/loggedIO/loggedIO.ts b/src/loggedIO/loggedIO.ts
index dda11d5571..9bdd8b0acd 100644
--- a/src/loggedIO/loggedIO.ts
+++ b/src/loggedIO/loggedIO.ts
@@ -1,5 +1,5 @@
-import * as ts from "./_namespaces/ts";
-import * as Harness from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import * as Harness from "./_namespaces/Harness.js";
 
 // eslint-disable-line local/one-namespace-per-file
 interface FileInformation {
diff --git a/src/package.json b/src/package.json
new file mode 100644
index 0000000000..e105b0c208
--- /dev/null
+++ b/src/package.json
@@ -0,0 +1,5 @@
+{
+    "name": "src",
+    "private": true,
+    "type": "module"
+}
diff --git a/src/server/_namespaces/ts.server.protocol.ts b/src/server/_namespaces/ts.server.protocol.ts
index 781f82d050..09d3f3b43b 100644
--- a/src/server/_namespaces/ts.server.protocol.ts
+++ b/src/server/_namespaces/ts.server.protocol.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.server.protocol namespace. */
 
-export * from "../protocol";
+export * from "../protocol.js";
diff --git a/src/server/_namespaces/ts.server.ts b/src/server/_namespaces/ts.server.ts
index 91d9a909ae..924a897d26 100644
--- a/src/server/_namespaces/ts.server.ts
+++ b/src/server/_namespaces/ts.server.ts
@@ -1,16 +1,16 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-export * from "../types";
-export * from "../utilitiesPublic";
-export * from "../utilities";
-import * as protocol from "./ts.server.protocol";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+export * from "../types.js";
+export * from "../utilitiesPublic.js";
+export * from "../utilities.js";
+import * as protocol from "./ts.server.protocol.js";
 export { protocol };
-export * from "../scriptInfo";
-export * from "../typingsCache";
-export * from "../project";
-export * from "../editorServices";
-export * from "../moduleSpecifierCache";
-export * from "../packageJsonCache";
-export * from "../session";
-export * from "../scriptVersionCache";
+export * from "../scriptInfo.js";
+export * from "../typingsCache.js";
+export * from "../project.js";
+export * from "../editorServices.js";
+export * from "../moduleSpecifierCache.js";
+export * from "../packageJsonCache.js";
+export * from "../session.js";
+export * from "../scriptVersionCache.js";
diff --git a/src/server/_namespaces/ts.ts b/src/server/_namespaces/ts.ts
index 0751d69491..4c09b6553b 100644
--- a/src/server/_namespaces/ts.ts
+++ b/src/server/_namespaces/ts.ts
@@ -1,7 +1,7 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../services/_namespaces/ts";
-import * as server from "./ts.server";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../services/_namespaces/ts.js";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/server/editorServices.ts b/src/server/editorServices.ts
index b935faca54..e3d1e03a8d 100644
--- a/src/server/editorServices.ts
+++ b/src/server/editorServices.ts
@@ -7,7 +7,7 @@ import {
     normalizedPathToPath, nullTypingsInstaller, PackageInstalledResponse, PackageJsonCache, Project,
     ProjectFilesWithTSDiagnostics, ProjectKind, ProjectOptions, protocol, ScriptInfo, ScriptInfoVersion, ServerHost,
     Session, SetTypings, ThrottledOperations, toNormalizedPath, TypingsCache,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 import {
     addToSeen, arrayFrom, arrayToMap, AssertionLevel, CachedDirectoryStructureHost, canJsonReportNoInputFiles,
     canWatchDirectoryOrFile, cleanExtendedConfigCache, clearMap, clearSharedExtendedConfigFileWatcher,
@@ -32,7 +32,7 @@ import {
     tracing, tryAddToSet, tryReadFile, TsConfigSourceFile, TypeAcquisition, typeAcquisitionDeclarations,
     unorderedRemoveItem, updateSharedExtendedConfigFileWatcher, updateWatchingWildcardDirectories, UserPreferences,
     version, WatchDirectoryFlags, WatchFactory, WatchLogLevel, WatchOptions, WatchType, WildcardDirectoryWatcher,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export const maxProgramSizeForNonTsFiles = 20 * 1024 * 1024;
 /** @internal */
diff --git a/src/server/moduleSpecifierCache.ts b/src/server/moduleSpecifierCache.ts
index f27c38036e..5d9b83573d 100644
--- a/src/server/moduleSpecifierCache.ts
+++ b/src/server/moduleSpecifierCache.ts
@@ -1,7 +1,7 @@
 import {
     Debug, ESMap, FileWatcher, Map, ModulePath, ModuleSpecifierCache, ModuleSpecifierOptions, nodeModulesPathPart, Path,
     ResolvedModuleSpecifierInfo, UserPreferences,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export interface ModuleSpecifierResolutionCacheHost {
diff --git a/src/server/packageJsonCache.ts b/src/server/packageJsonCache.ts
index b31d2e9971..371404851b 100644
--- a/src/server/packageJsonCache.ts
+++ b/src/server/packageJsonCache.ts
@@ -1,8 +1,8 @@
 import {
     combinePaths, createPackageJsonInfo, Debug, forEachAncestorDirectory, getDirectoryPath, Map, Path,
     ProjectPackageJsonInfo, Ternary, tryFileExists,
-} from "./_namespaces/ts";
-import { ProjectService } from "./_namespaces/ts.server";
+} from "./_namespaces/ts.js";
+import { ProjectService } from "./_namespaces/ts.server.js";
 
 /** @internal */
 export interface PackageJsonCache {
diff --git a/src/server/project.ts b/src/server/project.ts
index ccb85d4d98..88c822e840 100644
--- a/src/server/project.ts
+++ b/src/server/project.ts
@@ -1,10 +1,10 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     asNormalizedPath, createModuleSpecifierCache, emptyArray, Errors, FileStats, forEachResolvedProjectReferenceProject,
     LogLevel, ModuleImportResult, Msg, NormalizedPath, projectContainsInfoDirectly, ProjectOptions,
     ProjectReferenceProjectLoadKind, ProjectService, protocol, ScriptInfo, ServerHost, Session, toNormalizedPath,
     TypingsCache, updateProjectIfDirty,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 import {
     addRange, append, ApplyCodeActionCommandResult, arrayFrom, arrayToMap, BuilderState, CachedDirectoryStructureHost,
     changesAffectModuleResolution, clearMap, cloneCompilerOptions, closeFileWatcher, closeFileWatcherOf, combinePaths,
@@ -29,7 +29,7 @@ import {
     stripQuotes, StructureIsReused, SymlinkCache, ThrottledCancellationToken, timestamp, toPath, tracing,
     TypeAcquisition, updateErrorForNoInputFiles, updateMissingFilePathsWatch, WatchDirectoryFlags, WatchOptions,
     WatchType,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export enum ProjectKind {
     Inferred,
diff --git a/src/server/protocol.ts b/src/server/protocol.ts
index db8068b8a6..d276dbe7a4 100644
--- a/src/server/protocol.ts
+++ b/src/server/protocol.ts
@@ -1,9 +1,9 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     CompilerOptionsValue, EndOfLineState, FileExtensionInfo, HighlightSpanKind, MapLike, OutliningSpanKind, OutputFile,
     PluginImport, ProjectReference, RenameLocation, ScriptElementKind, ScriptKind, TextChange, TextInsertion,
     TodoComment, TodoCommentDescriptor, TypeAcquisition,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /* eslint-disable @typescript-eslint/no-unnecessary-qualifier */
 
diff --git a/src/server/scriptInfo.ts b/src/server/scriptInfo.ts
index 25c77fe3d4..aa9bca9663 100644
--- a/src/server/scriptInfo.ts
+++ b/src/server/scriptInfo.ts
@@ -2,7 +2,7 @@ import {
     AbsolutePositionAndLineText, ConfiguredProject, Errors, ExternalProject, InferredProject, isConfiguredProject,
     isExternalProject, isInferredProject, maxFileSize, NormalizedPath, Project, ProjectKind, protocol,
     ScriptVersionCache, ServerHost,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 import {
     assign, clear, closeFileWatcherOf, computeLineAndCharacterOfPosition, computeLineStarts,
     computePositionOfLineAndCharacter, contains, createTextSpanFromBounds, Debug, directorySeparator,
@@ -10,7 +10,7 @@ import {
     FormatCodeSettings, getBaseFileName, getDefaultFormatCodeSettings, getLineInfo, getScriptKindFromFileName,
     getSnapshotText, hasTSFileExtension, IScriptSnapshot, isString, LineInfo, Path, ScriptKind, ScriptSnapshot, Set,
     some, SourceFile, SourceFileLike, stringContains, TextSpan, unorderedRemoveItem,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export interface ScriptInfoVersion {
     svc: number;
diff --git a/src/server/scriptVersionCache.ts b/src/server/scriptVersionCache.ts
index 13a2fbe6a0..ab5810f520 100644
--- a/src/server/scriptVersionCache.ts
+++ b/src/server/scriptVersionCache.ts
@@ -1,8 +1,8 @@
 import {
     collapseTextChangeRangesAcrossMultipleVersions, computeLineStarts, createTextChangeRange, createTextSpan, Debug,
     IScriptSnapshot, TextChangeRange, TextSpan, unchangedTextChangeRange,
-} from "./_namespaces/ts";
-import { emptyArray, protocol } from "./_namespaces/ts.server";
+} from "./_namespaces/ts.js";
+import { emptyArray, protocol } from "./_namespaces/ts.server.js";
 
 const lineCollectionCapacity = 4;
 
diff --git a/src/server/session.ts b/src/server/session.ts
index 9200a281c8..1d01b71692 100644
--- a/src/server/session.ts
+++ b/src/server/session.ts
@@ -23,7 +23,7 @@ import {
     SignatureHelpItems, singleIterator, some, SourceFile, startsWith, stringContains, SymbolDisplayPart, SyntaxKind,
     TextChange, TextInsertion, TextRange, TextSpan, textSpanEnd, toArray, toFileNameLowerCase, tracing,
     unmangleScopedPackageName, UserPreferences, version, WithMetadata,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 import {
     ConfigFileDiagEvent, ConfiguredProject, convertFormatOptions, convertScriptKindName, convertUserPreferences,
     EmitResult, emptyArray, Errors, GcTimer, indent, isConfigFile, isConfiguredProject, isExternalProject,
@@ -32,7 +32,7 @@ import {
     ProjectLoadingStartEvent, ProjectService, ProjectServiceEvent, ProjectServiceEventHandler, ProjectServiceOptions,
     ProjectsUpdatedInBackgroundEvent, protocol, ScriptInfo, ScriptInfoOrConfig, ServerHost, stringifyIndented,
     toNormalizedPath, updateProjectIfDirty,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 
 interface StackTraceError extends Error {
     stack?: string;
diff --git a/src/server/types.ts b/src/server/types.ts
index 3ebc765594..597bfb6045 100644
--- a/src/server/types.ts
+++ b/src/server/types.ts
@@ -1,4 +1,4 @@
-import { DirectoryWatcherCallback, FileWatcher, FileWatcherCallback, System, WatchOptions } from "./_namespaces/ts";
+import { DirectoryWatcherCallback, FileWatcher, FileWatcherCallback, System, WatchOptions } from "./_namespaces/ts.js";
 
 export interface CompressedData {
     length: number;
diff --git a/src/server/typingsCache.ts b/src/server/typingsCache.ts
index fa35a6842e..252c8639d9 100644
--- a/src/server/typingsCache.ts
+++ b/src/server/typingsCache.ts
@@ -1,8 +1,8 @@
 import {
     ApplyCodeActionCommandResult, arrayIsEqualTo, CompilerOptions, getAllowJSCompilerOption, InstallPackageOptions, Map,
     noop, notImplemented, Path, returnFalse, sort, SortedReadonlyArray, TypeAcquisition,
-} from "./_namespaces/ts";
-import { emptyArray, Project, ProjectService } from "./_namespaces/ts.server";
+} from "./_namespaces/ts.js";
+import { emptyArray, Project, ProjectService } from "./_namespaces/ts.server.js";
 
 export interface InstallPackageOptionsWithProject extends InstallPackageOptions {
     projectName: string;
diff --git a/src/server/utilities.ts b/src/server/utilities.ts
index 95d2483593..c4c85ec292 100644
--- a/src/server/utilities.ts
+++ b/src/server/utilities.ts
@@ -1,5 +1,5 @@
-import { binarySearch, Comparer, getBaseFileName, identity, Map, perfLogger, SortedArray } from "./_namespaces/ts";
-import { Logger, LogLevel, NormalizedPath, ServerHost } from "./_namespaces/ts.server";
+import { binarySearch, Comparer, getBaseFileName, identity, Map, perfLogger, SortedArray } from "./_namespaces/ts.js";
+import { Logger, LogLevel, NormalizedPath, ServerHost } from "./_namespaces/ts.server.js";
 
 /** @internal */
 export class ThrottledOperations {
diff --git a/src/server/utilitiesPublic.ts b/src/server/utilitiesPublic.ts
index 4af5e8394b..ccc889b890 100644
--- a/src/server/utilitiesPublic.ts
+++ b/src/server/utilitiesPublic.ts
@@ -1,8 +1,8 @@
 import {
     getNormalizedAbsolutePath, isRootedDiskPath, Map, normalizePath, Path, SortedArray, SortedReadonlyArray,
     TypeAcquisition,
-} from "./_namespaces/ts";
-import { DiscoverTypings, Project } from "./_namespaces/ts.server";
+} from "./_namespaces/ts.js";
+import { DiscoverTypings, Project } from "./_namespaces/ts.server.js";
 
 export enum LogLevel {
     terse,
diff --git a/src/services/_namespaces/ts.BreakpointResolver.ts b/src/services/_namespaces/ts.BreakpointResolver.ts
index 25d68e3840..4e74d10c32 100644
--- a/src/services/_namespaces/ts.BreakpointResolver.ts
+++ b/src/services/_namespaces/ts.BreakpointResolver.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.BreakpointResolver namespace. */
 
-export * from "../breakpoints";
+export * from "../breakpoints.js";
diff --git a/src/services/_namespaces/ts.CallHierarchy.ts b/src/services/_namespaces/ts.CallHierarchy.ts
index 412260c093..b1055790b5 100644
--- a/src/services/_namespaces/ts.CallHierarchy.ts
+++ b/src/services/_namespaces/ts.CallHierarchy.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.CallHierarchy namespace. */
 
-export * from "../callHierarchy";
+export * from "../callHierarchy.js";
diff --git a/src/services/_namespaces/ts.Completions.StringCompletions.ts b/src/services/_namespaces/ts.Completions.StringCompletions.ts
index 23e0c06c32..144208dacc 100644
--- a/src/services/_namespaces/ts.Completions.StringCompletions.ts
+++ b/src/services/_namespaces/ts.Completions.StringCompletions.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.Completions.StringCompletions namespace. */
 
-export * from "../stringCompletions";
+export * from "../stringCompletions.js";
diff --git a/src/services/_namespaces/ts.Completions.ts b/src/services/_namespaces/ts.Completions.ts
index bd0d6a8522..0a644a6391 100644
--- a/src/services/_namespaces/ts.Completions.ts
+++ b/src/services/_namespaces/ts.Completions.ts
@@ -1,5 +1,5 @@
 /* Generated file to emulate the ts.Completions namespace. */
 
-export * from "../completions";
-import * as StringCompletions from "./ts.Completions.StringCompletions";
+export * from "../completions.js";
+import * as StringCompletions from "./ts.Completions.StringCompletions.js";
 export { StringCompletions };
diff --git a/src/services/_namespaces/ts.FindAllReferences.ts b/src/services/_namespaces/ts.FindAllReferences.ts
index a5325a82f0..76f8567e81 100644
--- a/src/services/_namespaces/ts.FindAllReferences.ts
+++ b/src/services/_namespaces/ts.FindAllReferences.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts.FindAllReferences namespace. */
 
-export * from "../importTracker";
-export * from "../findAllReferences";
+export * from "../importTracker.js";
+export * from "../findAllReferences.js";
diff --git a/src/services/_namespaces/ts.GoToDefinition.ts b/src/services/_namespaces/ts.GoToDefinition.ts
index 41c12c0d1f..04a5f473c4 100644
--- a/src/services/_namespaces/ts.GoToDefinition.ts
+++ b/src/services/_namespaces/ts.GoToDefinition.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.GoToDefinition namespace. */
 
-export * from "../goToDefinition";
+export * from "../goToDefinition.js";
diff --git a/src/services/_namespaces/ts.InlayHints.ts b/src/services/_namespaces/ts.InlayHints.ts
index fd189d5732..920473f135 100644
--- a/src/services/_namespaces/ts.InlayHints.ts
+++ b/src/services/_namespaces/ts.InlayHints.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.InlayHints namespace. */
 
-export * from "../inlayHints";
+export * from "../inlayHints.js";
diff --git a/src/services/_namespaces/ts.JsDoc.ts b/src/services/_namespaces/ts.JsDoc.ts
index 1572df70c3..e283c34ba6 100644
--- a/src/services/_namespaces/ts.JsDoc.ts
+++ b/src/services/_namespaces/ts.JsDoc.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.JsDoc namespace. */
 
-export * from "../jsDoc";
+export * from "../jsDoc.js";
diff --git a/src/services/_namespaces/ts.NavigateTo.ts b/src/services/_namespaces/ts.NavigateTo.ts
index cf0e35ad1c..ba6ef9d35f 100644
--- a/src/services/_namespaces/ts.NavigateTo.ts
+++ b/src/services/_namespaces/ts.NavigateTo.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.NavigateTo namespace. */
 
-export * from "../navigateTo";
+export * from "../navigateTo.js";
diff --git a/src/services/_namespaces/ts.NavigationBar.ts b/src/services/_namespaces/ts.NavigationBar.ts
index ad1c32d373..46d2b62807 100644
--- a/src/services/_namespaces/ts.NavigationBar.ts
+++ b/src/services/_namespaces/ts.NavigationBar.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.NavigationBar namespace. */
 
-export * from "../navigationBar";
+export * from "../navigationBar.js";
diff --git a/src/services/_namespaces/ts.OrganizeImports.ts b/src/services/_namespaces/ts.OrganizeImports.ts
index 1a338fc8e1..f5f2c3e495 100644
--- a/src/services/_namespaces/ts.OrganizeImports.ts
+++ b/src/services/_namespaces/ts.OrganizeImports.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.OrganizeImports namespace. */
 
-export * from "../organizeImports";
+export * from "../organizeImports.js";
diff --git a/src/services/_namespaces/ts.OutliningElementsCollector.ts b/src/services/_namespaces/ts.OutliningElementsCollector.ts
index b6b05f8f67..960464818a 100644
--- a/src/services/_namespaces/ts.OutliningElementsCollector.ts
+++ b/src/services/_namespaces/ts.OutliningElementsCollector.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.OutliningElementsCollector namespace. */
 
-export * from "../outliningElementsCollector";
+export * from "../outliningElementsCollector.js";
diff --git a/src/services/_namespaces/ts.Rename.ts b/src/services/_namespaces/ts.Rename.ts
index e587684f8e..de87aac59e 100644
--- a/src/services/_namespaces/ts.Rename.ts
+++ b/src/services/_namespaces/ts.Rename.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.Rename namespace. */
 
-export * from "../rename";
+export * from "../rename.js";
diff --git a/src/services/_namespaces/ts.SignatureHelp.ts b/src/services/_namespaces/ts.SignatureHelp.ts
index c87bf5c7e8..592b993aab 100644
--- a/src/services/_namespaces/ts.SignatureHelp.ts
+++ b/src/services/_namespaces/ts.SignatureHelp.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.SignatureHelp namespace. */
 
-export * from "../signatureHelp";
+export * from "../signatureHelp.js";
diff --git a/src/services/_namespaces/ts.SmartSelectionRange.ts b/src/services/_namespaces/ts.SmartSelectionRange.ts
index f90161430d..1e14c3b606 100644
--- a/src/services/_namespaces/ts.SmartSelectionRange.ts
+++ b/src/services/_namespaces/ts.SmartSelectionRange.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.SmartSelectionRange namespace. */
 
-export * from "../smartSelection";
+export * from "../smartSelection.js";
diff --git a/src/services/_namespaces/ts.SymbolDisplay.ts b/src/services/_namespaces/ts.SymbolDisplay.ts
index fcb8050c44..851401ae7f 100644
--- a/src/services/_namespaces/ts.SymbolDisplay.ts
+++ b/src/services/_namespaces/ts.SymbolDisplay.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.SymbolDisplay namespace. */
 
-export * from "../symbolDisplay";
+export * from "../symbolDisplay.js";
diff --git a/src/services/_namespaces/ts.classifier.ts b/src/services/_namespaces/ts.classifier.ts
index 34bc4e5219..fda72f7228 100644
--- a/src/services/_namespaces/ts.classifier.ts
+++ b/src/services/_namespaces/ts.classifier.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts.classifier namespace. */
 
-import * as v2020 from "./ts.classifier.v2020";
+import * as v2020 from "./ts.classifier.v2020.js";
 export { v2020 };
diff --git a/src/services/_namespaces/ts.classifier.v2020.ts b/src/services/_namespaces/ts.classifier.v2020.ts
index 361c15f823..c4410e139a 100644
--- a/src/services/_namespaces/ts.classifier.v2020.ts
+++ b/src/services/_namespaces/ts.classifier.v2020.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.classifier.v2020 namespace. */
 
-export * from "../classifier2020";
+export * from "../classifier2020.js";
diff --git a/src/services/_namespaces/ts.codefix.ts b/src/services/_namespaces/ts.codefix.ts
index 6ce9612cb7..592c97a7f8 100644
--- a/src/services/_namespaces/ts.codefix.ts
+++ b/src/services/_namespaces/ts.codefix.ts
@@ -1,70 +1,70 @@
 /* Generated file to emulate the ts.codefix namespace. */
 
-export * from "../codeFixProvider";
-export * from "../codefixes/addConvertToUnknownForNonOverlappingTypes";
-export * from "../codefixes/addEmptyExportDeclaration";
-export * from "../codefixes/addMissingAsync";
-export * from "../codefixes/addMissingAwait";
-export * from "../codefixes/addMissingConst";
-export * from "../codefixes/addMissingDeclareProperty";
-export * from "../codefixes/addMissingInvocationForDecorator";
-export * from "../codefixes/addNameToNamelessParameter";
-export * from "../codefixes/addOptionalPropertyUndefined";
-export * from "../codefixes/annotateWithTypeFromJSDoc";
-export * from "../codefixes/convertFunctionToEs6Class";
-export * from "../codefixes/convertToAsyncFunction";
-export * from "../codefixes/convertToEsModule";
-export * from "../codefixes/correctQualifiedNameToIndexedAccessType";
-export * from "../codefixes/convertToTypeOnlyExport";
-export * from "../codefixes/convertToTypeOnlyImport";
-export * from "../codefixes/convertLiteralTypeToMappedType";
-export * from "../codefixes/fixClassIncorrectlyImplementsInterface";
-export * from "../codefixes/importFixes";
-export * from "../codefixes/fixAddMissingConstraint";
-export * from "../codefixes/fixOverrideModifier";
-export * from "../codefixes/fixNoPropertyAccessFromIndexSignature";
-export * from "../codefixes/fixImplicitThis";
-export * from "../codefixes/fixIncorrectNamedTupleSyntax";
-export * from "../codefixes/fixSpelling";
-export * from "../codefixes/returnValueCorrect";
-export * from "../codefixes/fixAddMissingMember";
-export * from "../codefixes/fixAddMissingNewOperator";
-export * from "../codefixes/fixCannotFindModule";
-export * from "../codefixes/fixClassDoesntImplementInheritedAbstractMember";
-export * from "../codefixes/fixClassSuperMustPrecedeThisAccess";
-export * from "../codefixes/fixConstructorForDerivedNeedSuperCall";
-export * from "../codefixes/fixEnableExperimentalDecorators";
-export * from "../codefixes/fixEnableJsxFlag";
-export * from "../codefixes/fixModuleAndTargetOptions";
-export * from "../codefixes/fixPropertyAssignment";
-export * from "../codefixes/fixExtendsInterfaceBecomesImplements";
-export * from "../codefixes/fixForgottenThisPropertyAccess";
-export * from "../codefixes/fixInvalidJsxCharacters";
-export * from "../codefixes/fixUnmatchedParameter";
-export * from "../codefixes/fixUnreferenceableDecoratorMetadata";
-export * from "../codefixes/fixUnusedIdentifier";
-export * from "../codefixes/fixUnreachableCode";
-export * from "../codefixes/fixUnusedLabel";
-export * from "../codefixes/fixJSDocTypes";
-export * from "../codefixes/fixMissingCallParentheses";
-export * from "../codefixes/fixAwaitInSyncFunction";
-export * from "../codefixes/fixPropertyOverrideAccessor";
-export * from "../codefixes/inferFromUsage";
-export * from "../codefixes/fixReturnTypeInAsyncFunction";
-export * from "../codefixes/disableJsDiagnostics";
-export * from "../codefixes/helpers";
-export * from "../codefixes/generateAccessors";
-export * from "../codefixes/fixInvalidImportSyntax";
-export * from "../codefixes/fixStrictClassInitialization";
-export * from "../codefixes/requireInTs";
-export * from "../codefixes/useDefaultImport";
-export * from "../codefixes/useBigintLiteral";
-export * from "../codefixes/fixAddModuleReferTypeMissingTypeof";
-export * from "../codefixes/wrapJsxInFragment";
-export * from "../codefixes/convertToMappedObjectType";
-export * from "../codefixes/removeAccidentalCallParentheses";
-export * from "../codefixes/removeUnnecessaryAwait";
-export * from "../codefixes/splitTypeOnlyImport";
-export * from "../codefixes/convertConstToLet";
-export * from "../codefixes/fixExpectedComma";
-export * from "../codefixes/fixAddVoidToPromise";
+export * from "../codeFixProvider.js";
+export * from "../codefixes/addConvertToUnknownForNonOverlappingTypes.js";
+export * from "../codefixes/addEmptyExportDeclaration.js";
+export * from "../codefixes/addMissingAsync.js";
+export * from "../codefixes/addMissingAwait.js";
+export * from "../codefixes/addMissingConst.js";
+export * from "../codefixes/addMissingDeclareProperty.js";
+export * from "../codefixes/addMissingInvocationForDecorator.js";
+export * from "../codefixes/addNameToNamelessParameter.js";
+export * from "../codefixes/addOptionalPropertyUndefined.js";
+export * from "../codefixes/annotateWithTypeFromJSDoc.js";
+export * from "../codefixes/convertFunctionToEs6Class.js";
+export * from "../codefixes/convertToAsyncFunction.js";
+export * from "../codefixes/convertToEsModule.js";
+export * from "../codefixes/correctQualifiedNameToIndexedAccessType.js";
+export * from "../codefixes/convertToTypeOnlyExport.js";
+export * from "../codefixes/convertToTypeOnlyImport.js";
+export * from "../codefixes/convertLiteralTypeToMappedType.js";
+export * from "../codefixes/fixClassIncorrectlyImplementsInterface.js";
+export * from "../codefixes/importFixes.js";
+export * from "../codefixes/fixAddMissingConstraint.js";
+export * from "../codefixes/fixOverrideModifier.js";
+export * from "../codefixes/fixNoPropertyAccessFromIndexSignature.js";
+export * from "../codefixes/fixImplicitThis.js";
+export * from "../codefixes/fixIncorrectNamedTupleSyntax.js";
+export * from "../codefixes/fixSpelling.js";
+export * from "../codefixes/returnValueCorrect.js";
+export * from "../codefixes/fixAddMissingMember.js";
+export * from "../codefixes/fixAddMissingNewOperator.js";
+export * from "../codefixes/fixCannotFindModule.js";
+export * from "../codefixes/fixClassDoesntImplementInheritedAbstractMember.js";
+export * from "../codefixes/fixClassSuperMustPrecedeThisAccess.js";
+export * from "../codefixes/fixConstructorForDerivedNeedSuperCall.js";
+export * from "../codefixes/fixEnableExperimentalDecorators.js";
+export * from "../codefixes/fixEnableJsxFlag.js";
+export * from "../codefixes/fixModuleAndTargetOptions.js";
+export * from "../codefixes/fixPropertyAssignment.js";
+export * from "../codefixes/fixExtendsInterfaceBecomesImplements.js";
+export * from "../codefixes/fixForgottenThisPropertyAccess.js";
+export * from "../codefixes/fixInvalidJsxCharacters.js";
+export * from "../codefixes/fixUnmatchedParameter.js";
+export * from "../codefixes/fixUnreferenceableDecoratorMetadata.js";
+export * from "../codefixes/fixUnusedIdentifier.js";
+export * from "../codefixes/fixUnreachableCode.js";
+export * from "../codefixes/fixUnusedLabel.js";
+export * from "../codefixes/fixJSDocTypes.js";
+export * from "../codefixes/fixMissingCallParentheses.js";
+export * from "../codefixes/fixAwaitInSyncFunction.js";
+export * from "../codefixes/fixPropertyOverrideAccessor.js";
+export * from "../codefixes/inferFromUsage.js";
+export * from "../codefixes/fixReturnTypeInAsyncFunction.js";
+export * from "../codefixes/disableJsDiagnostics.js";
+export * from "../codefixes/helpers.js";
+export * from "../codefixes/generateAccessors.js";
+export * from "../codefixes/fixInvalidImportSyntax.js";
+export * from "../codefixes/fixStrictClassInitialization.js";
+export * from "../codefixes/requireInTs.js";
+export * from "../codefixes/useDefaultImport.js";
+export * from "../codefixes/useBigintLiteral.js";
+export * from "../codefixes/fixAddModuleReferTypeMissingTypeof.js";
+export * from "../codefixes/wrapJsxInFragment.js";
+export * from "../codefixes/convertToMappedObjectType.js";
+export * from "../codefixes/removeAccidentalCallParentheses.js";
+export * from "../codefixes/removeUnnecessaryAwait.js";
+export * from "../codefixes/splitTypeOnlyImport.js";
+export * from "../codefixes/convertConstToLet.js";
+export * from "../codefixes/fixExpectedComma.js";
+export * from "../codefixes/fixAddVoidToPromise.js";
diff --git a/src/services/_namespaces/ts.formatting.ts b/src/services/_namespaces/ts.formatting.ts
index 72e03b2f7e..bd1396e355 100644
--- a/src/services/_namespaces/ts.formatting.ts
+++ b/src/services/_namespaces/ts.formatting.ts
@@ -1,9 +1,9 @@
 /* Generated file to emulate the ts.formatting namespace. */
 
-export * from "../formatting/formattingContext";
-export * from "../formatting/formattingScanner";
-export * from "../formatting/rule";
-export * from "../formatting/rules";
-export * from "../formatting/rulesMap";
-export * from "../formatting/formatting";
-export * from "../formatting/smartIndenter";
+export * from "../formatting/formattingContext.js";
+export * from "../formatting/formattingScanner.js";
+export * from "../formatting/rule.js";
+export * from "../formatting/rules.js";
+export * from "../formatting/rulesMap.js";
+export * from "../formatting/formatting.js";
+export * from "../formatting/smartIndenter.js";
diff --git a/src/services/_namespaces/ts.refactor.addOrRemoveBracesToArrowFunction.ts b/src/services/_namespaces/ts.refactor.addOrRemoveBracesToArrowFunction.ts
index 5dd00f2f63..6c5178ed60 100644
--- a/src/services/_namespaces/ts.refactor.addOrRemoveBracesToArrowFunction.ts
+++ b/src/services/_namespaces/ts.refactor.addOrRemoveBracesToArrowFunction.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts.refactor.addOrRemoveBracesToArrowFunction namespace. */
 
-export * from "../refactors/convertOverloadListToSingleSignature";
-export * from "../refactors/addOrRemoveBracesToArrowFunction";
+export * from "../refactors/convertOverloadListToSingleSignature.js";
+export * from "../refactors/addOrRemoveBracesToArrowFunction.js";
diff --git a/src/services/_namespaces/ts.refactor.convertArrowFunctionOrFunctionExpression.ts b/src/services/_namespaces/ts.refactor.convertArrowFunctionOrFunctionExpression.ts
index 48fb788058..fc3c076249 100644
--- a/src/services/_namespaces/ts.refactor.convertArrowFunctionOrFunctionExpression.ts
+++ b/src/services/_namespaces/ts.refactor.convertArrowFunctionOrFunctionExpression.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.refactor.convertArrowFunctionOrFunctionExpression namespace. */
 
-export * from "../refactors/convertArrowFunctionOrFunctionExpression";
+export * from "../refactors/convertArrowFunctionOrFunctionExpression.js";
diff --git a/src/services/_namespaces/ts.refactor.convertParamsToDestructuredObject.ts b/src/services/_namespaces/ts.refactor.convertParamsToDestructuredObject.ts
index 3cc94f5e9f..488602adfa 100644
--- a/src/services/_namespaces/ts.refactor.convertParamsToDestructuredObject.ts
+++ b/src/services/_namespaces/ts.refactor.convertParamsToDestructuredObject.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.refactor.convertParamsToDestructuredObject namespace. */
 
-export * from "../refactors/convertParamsToDestructuredObject";
+export * from "../refactors/convertParamsToDestructuredObject.js";
diff --git a/src/services/_namespaces/ts.refactor.convertStringOrTemplateLiteral.ts b/src/services/_namespaces/ts.refactor.convertStringOrTemplateLiteral.ts
index e084befeba..ba98999f2a 100644
--- a/src/services/_namespaces/ts.refactor.convertStringOrTemplateLiteral.ts
+++ b/src/services/_namespaces/ts.refactor.convertStringOrTemplateLiteral.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.refactor.convertStringOrTemplateLiteral namespace. */
 
-export * from "../refactors/convertStringOrTemplateLiteral";
+export * from "../refactors/convertStringOrTemplateLiteral.js";
diff --git a/src/services/_namespaces/ts.refactor.convertToOptionalChainExpression.ts b/src/services/_namespaces/ts.refactor.convertToOptionalChainExpression.ts
index d8b0ab31ea..f6eabd9e28 100644
--- a/src/services/_namespaces/ts.refactor.convertToOptionalChainExpression.ts
+++ b/src/services/_namespaces/ts.refactor.convertToOptionalChainExpression.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.refactor.convertToOptionalChainExpression namespace. */
 
-export * from "../refactors/convertToOptionalChainExpression";
+export * from "../refactors/convertToOptionalChainExpression.js";
diff --git a/src/services/_namespaces/ts.refactor.extractSymbol.ts b/src/services/_namespaces/ts.refactor.extractSymbol.ts
index c71cacd346..1a0fb21858 100644
--- a/src/services/_namespaces/ts.refactor.extractSymbol.ts
+++ b/src/services/_namespaces/ts.refactor.extractSymbol.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.refactor.extractSymbol namespace. */
 
-export * from "../refactors/extractSymbol";
+export * from "../refactors/extractSymbol.js";
diff --git a/src/services/_namespaces/ts.refactor.generateGetAccessorAndSetAccessor.ts b/src/services/_namespaces/ts.refactor.generateGetAccessorAndSetAccessor.ts
index 8128f0cb6c..961e779e74 100644
--- a/src/services/_namespaces/ts.refactor.generateGetAccessorAndSetAccessor.ts
+++ b/src/services/_namespaces/ts.refactor.generateGetAccessorAndSetAccessor.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.refactor.generateGetAccessorAndSetAccessor namespace. */
 
-export * from "../refactors/generateGetAccessorAndSetAccessor";
+export * from "../refactors/generateGetAccessorAndSetAccessor.js";
diff --git a/src/services/_namespaces/ts.refactor.inferFunctionReturnType.ts b/src/services/_namespaces/ts.refactor.inferFunctionReturnType.ts
index 3dd2e0a9b0..36262dc393 100644
--- a/src/services/_namespaces/ts.refactor.inferFunctionReturnType.ts
+++ b/src/services/_namespaces/ts.refactor.inferFunctionReturnType.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.refactor.inferFunctionReturnType namespace. */
 
-export * from "../refactors/inferFunctionReturnType";
+export * from "../refactors/inferFunctionReturnType.js";
diff --git a/src/services/_namespaces/ts.refactor.ts b/src/services/_namespaces/ts.refactor.ts
index 19159057c6..a358c6a55f 100644
--- a/src/services/_namespaces/ts.refactor.ts
+++ b/src/services/_namespaces/ts.refactor.ts
@@ -1,24 +1,24 @@
 /* Generated file to emulate the ts.refactor namespace. */
 
-export * from "../refactorProvider";
-export * from "../refactors/convertExport";
-export * from "../refactors/convertImport";
-export * from "../refactors/extractType";
-export * from "../refactors/helpers";
-export * from "../refactors/moveToNewFile";
-import * as addOrRemoveBracesToArrowFunction from "./ts.refactor.addOrRemoveBracesToArrowFunction";
+export * from "../refactorProvider.js";
+export * from "../refactors/convertExport.js";
+export * from "../refactors/convertImport.js";
+export * from "../refactors/extractType.js";
+export * from "../refactors/helpers.js";
+export * from "../refactors/moveToNewFile.js";
+import * as addOrRemoveBracesToArrowFunction from "./ts.refactor.addOrRemoveBracesToArrowFunction.js";
 export { addOrRemoveBracesToArrowFunction };
-import * as convertArrowFunctionOrFunctionExpression from "./ts.refactor.convertArrowFunctionOrFunctionExpression";
+import * as convertArrowFunctionOrFunctionExpression from "./ts.refactor.convertArrowFunctionOrFunctionExpression.js";
 export { convertArrowFunctionOrFunctionExpression };
-import * as convertParamsToDestructuredObject from "./ts.refactor.convertParamsToDestructuredObject";
+import * as convertParamsToDestructuredObject from "./ts.refactor.convertParamsToDestructuredObject.js";
 export { convertParamsToDestructuredObject };
-import * as convertStringOrTemplateLiteral from "./ts.refactor.convertStringOrTemplateLiteral";
+import * as convertStringOrTemplateLiteral from "./ts.refactor.convertStringOrTemplateLiteral.js";
 export { convertStringOrTemplateLiteral };
-import * as convertToOptionalChainExpression from "./ts.refactor.convertToOptionalChainExpression";
+import * as convertToOptionalChainExpression from "./ts.refactor.convertToOptionalChainExpression.js";
 export { convertToOptionalChainExpression };
-import * as extractSymbol from "./ts.refactor.extractSymbol";
+import * as extractSymbol from "./ts.refactor.extractSymbol.js";
 export { extractSymbol };
-import * as generateGetAccessorAndSetAccessor from "./ts.refactor.generateGetAccessorAndSetAccessor";
+import * as generateGetAccessorAndSetAccessor from "./ts.refactor.generateGetAccessorAndSetAccessor.js";
 export { generateGetAccessorAndSetAccessor };
-import * as inferFunctionReturnType from "./ts.refactor.inferFunctionReturnType";
+import * as inferFunctionReturnType from "./ts.refactor.inferFunctionReturnType.js";
 export { inferFunctionReturnType };
diff --git a/src/services/_namespaces/ts.textChanges.ts b/src/services/_namespaces/ts.textChanges.ts
index 12a272788f..5e3ec149c9 100644
--- a/src/services/_namespaces/ts.textChanges.ts
+++ b/src/services/_namespaces/ts.textChanges.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.textChanges namespace. */
 
-export * from "../textChanges";
+export * from "../textChanges.js";
diff --git a/src/services/_namespaces/ts.ts b/src/services/_namespaces/ts.ts
index eae114fd2e..b836fa042e 100644
--- a/src/services/_namespaces/ts.ts
+++ b/src/services/_namespaces/ts.ts
@@ -1,59 +1,59 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../types";
-export * from "../utilities";
-export * from "../exportInfoMap";
-export * from "../classifier";
-export * from "../documentHighlights";
-export * from "../documentRegistry";
-export * from "../getEditsForFileRename";
-export * from "../patternMatcher";
-export * from "../preProcess";
-export * from "../sourcemaps";
-export * from "../suggestionDiagnostics";
-export * from "../transpile";
-export * from "../services";
-export * from "../transform";
-export * from "../shims";
-import * as BreakpointResolver from "./ts.BreakpointResolver";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../types.js";
+export * from "../utilities.js";
+export * from "../exportInfoMap.js";
+export * from "../classifier.js";
+export * from "../documentHighlights.js";
+export * from "../documentRegistry.js";
+export * from "../getEditsForFileRename.js";
+export * from "../patternMatcher.js";
+export * from "../preProcess.js";
+export * from "../sourcemaps.js";
+export * from "../suggestionDiagnostics.js";
+export * from "../transpile.js";
+export * from "../services.js";
+export * from "../transform.js";
+export * from "../shims.js";
+import * as BreakpointResolver from "./ts.BreakpointResolver.js";
 export { BreakpointResolver };
-import * as CallHierarchy from "./ts.CallHierarchy";
+import * as CallHierarchy from "./ts.CallHierarchy.js";
 export { CallHierarchy };
-import * as classifier from "./ts.classifier";
+import * as classifier from "./ts.classifier.js";
 export { classifier };
-import * as codefix from "./ts.codefix";
+import * as codefix from "./ts.codefix.js";
 export { codefix };
-import * as Completions from "./ts.Completions";
+import * as Completions from "./ts.Completions.js";
 export { Completions };
-import * as FindAllReferences from "./ts.FindAllReferences";
+import * as FindAllReferences from "./ts.FindAllReferences.js";
 export { FindAllReferences };
-import * as GoToDefinition from "./ts.GoToDefinition";
+import * as GoToDefinition from "./ts.GoToDefinition.js";
 export { GoToDefinition };
-import * as InlayHints from "./ts.InlayHints";
+import * as InlayHints from "./ts.InlayHints.js";
 export { InlayHints };
-import * as JsDoc from "./ts.JsDoc";
+import * as JsDoc from "./ts.JsDoc.js";
 export { JsDoc };
-import * as NavigateTo from "./ts.NavigateTo";
+import * as NavigateTo from "./ts.NavigateTo.js";
 export { NavigateTo };
-import * as NavigationBar from "./ts.NavigationBar";
+import * as NavigationBar from "./ts.NavigationBar.js";
 export { NavigationBar };
-import * as OrganizeImports from "./ts.OrganizeImports";
+import * as OrganizeImports from "./ts.OrganizeImports.js";
 export { OrganizeImports };
-import * as OutliningElementsCollector from "./ts.OutliningElementsCollector";
+import * as OutliningElementsCollector from "./ts.OutliningElementsCollector.js";
 export { OutliningElementsCollector };
-import * as refactor from "./ts.refactor";
+import * as refactor from "./ts.refactor.js";
 export { refactor };
-import * as Rename from "./ts.Rename";
+import * as Rename from "./ts.Rename.js";
 export { Rename };
-import * as SignatureHelp from "./ts.SignatureHelp";
+import * as SignatureHelp from "./ts.SignatureHelp.js";
 export { SignatureHelp };
-import * as SmartSelectionRange from "./ts.SmartSelectionRange";
+import * as SmartSelectionRange from "./ts.SmartSelectionRange.js";
 export { SmartSelectionRange };
-import * as SymbolDisplay from "./ts.SymbolDisplay";
+import * as SymbolDisplay from "./ts.SymbolDisplay.js";
 export { SymbolDisplay };
-import * as textChanges from "./ts.textChanges";
+import * as textChanges from "./ts.textChanges.js";
 export { textChanges };
-import * as formatting from "./ts.formatting";
+import * as formatting from "./ts.formatting.js";
 export { formatting };
diff --git a/src/services/breakpoints.ts b/src/services/breakpoints.ts
index 5b823d698d..b3ff5f1bfb 100644
--- a/src/services/breakpoints.ts
+++ b/src/services/breakpoints.ts
@@ -11,7 +11,7 @@ import {
     ObjectLiteralExpression, ParameterDeclaration, PropertyAssignment, PropertyDeclaration, PropertySignature,
     ReturnStatement, skipTrivia, SourceFile, SwitchStatement, SyntaxKind, TextSpan, ThrowStatement, TryStatement,
     TypeAssertion, VariableDeclaration, VariableDeclarationList, VariableStatement, WhileStatement, WithStatement,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * Get the breakpoint span in given sourceFile
diff --git a/src/services/callHierarchy.ts b/src/services/callHierarchy.ts
index 941cb68946..13e272fe1c 100644
--- a/src/services/callHierarchy.ts
+++ b/src/services/callHierarchy.ts
@@ -18,7 +18,7 @@ import {
     NewExpression, Node, NodeFlags, ParameterDeclaration, Program, PropertyAccessExpression, SatisfiesExpression,
     SetAccessorDeclaration, skipTrivia, SourceFile, SymbolFlags, SyntaxKind, TaggedTemplateExpression, TextRange,
     TextSpan, TypeAssertion, TypeChecker, usingSingleLineStringWriter, VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export type NamedExpression =
diff --git a/src/services/classifier.ts b/src/services/classifier.ts
index ebff8cc447..8a335a9b7d 100644
--- a/src/services/classifier.ts
+++ b/src/services/classifier.ts
@@ -11,7 +11,7 @@ import {
     ModuleInstanceState, Node, nodeIsMissing, ParameterDeclaration, parseIsolatedJSDocComment, Push, ReadonlySet,
     Scanner, ScriptTarget, SemanticMeaning, setParent, some, SourceFile, Symbol, SymbolFlags, SyntaxKind, TextSpan,
     textSpanIntersectsWith, TokenClass, TypeChecker, TypeParameterDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** The classifier is used for syntactic highlighting in editors via the TSServer */
 export function createClassifier(): Classifier {
diff --git a/src/services/classifier2020.ts b/src/services/classifier2020.ts
index acad0e9cce..037b98cd35 100644
--- a/src/services/classifier2020.ts
+++ b/src/services/classifier2020.ts
@@ -6,7 +6,7 @@ import {
     isPropertyAccessExpression, isQualifiedName, isSourceFile, isVariableDeclaration, Map, ModifierFlags,
     NamedDeclaration, Node, NodeFlags, ParameterDeclaration, Program, SemanticMeaning, SourceFile, Symbol, SymbolFlags,
     SyntaxKind, TextSpan, textSpanIntersectsWith, Type, TypeChecker, VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 
diff --git a/src/services/codeFixProvider.ts b/src/services/codeFixProvider.ts
index 1d5a14264c..c30abee045 100644
--- a/src/services/codeFixProvider.ts
+++ b/src/services/codeFixProvider.ts
@@ -3,7 +3,7 @@ import {
     CodeFixRegistration, CombinedCodeActions, computeSuggestionDiagnostics, contains, createMultiMap, Debug, Diagnostic,
     DiagnosticAndArguments, diagnosticToString, DiagnosticWithLocation, FileTextChanges, flatMap, isString, map, Map,
     Push, TextChange, textChanges,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const errorCodeToFixes = createMultiMap<CodeFixRegistration>();
 const fixIdToRegistration = new Map<string, CodeFixRegistration>();
diff --git a/src/services/codefixes/addConvertToUnknownForNonOverlappingTypes.ts b/src/services/codefixes/addConvertToUnknownForNonOverlappingTypes.ts
index 8d7347f441..31df7868d2 100644
--- a/src/services/codefixes/addConvertToUnknownForNonOverlappingTypes.ts
+++ b/src/services/codefixes/addConvertToUnknownForNonOverlappingTypes.ts
@@ -1,8 +1,8 @@
 import {
     AsExpression, Diagnostics, factory, findAncestor, getTokenAtPosition, isAsExpression, isInJSFile,
     isTypeAssertionExpression, SourceFile, SyntaxKind, textChanges, TypeAssertion,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "addConvertToUnknownForNonOverlappingTypes";
 const errorCodes = [Diagnostics.Conversion_of_type_0_to_type_1_may_be_a_mistake_because_neither_type_sufficiently_overlaps_with_the_other_If_this_was_intentional_convert_the_expression_to_unknown_first.code];
diff --git a/src/services/codefixes/addEmptyExportDeclaration.ts b/src/services/codefixes/addEmptyExportDeclaration.ts
index 0cd3d24a46..195c910fe9 100644
--- a/src/services/codefixes/addEmptyExportDeclaration.ts
+++ b/src/services/codefixes/addEmptyExportDeclaration.ts
@@ -1,5 +1,5 @@
-import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix";
-import { Diagnostics, factory, textChanges } from "../_namespaces/ts";
+import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix.js";
+import { Diagnostics, factory, textChanges } from "../_namespaces/ts.js";
 
 registerCodeFix({
     errorCodes: [
@@ -19,4 +19,4 @@ registerCodeFix({
         });
         return [createCodeFixActionWithoutFixAll("addEmptyExportDeclaration", changes, Diagnostics.Add_export_to_make_this_file_into_a_module)];
     },
-});
\ No newline at end of file
+});
diff --git a/src/services/codefixes/addMissingAsync.ts b/src/services/codefixes/addMissingAsync.ts
index a71198b8b8..8fe2fd31a4 100644
--- a/src/services/codefixes/addMissingAsync.ts
+++ b/src/services/codefixes/addMissingAsync.ts
@@ -4,8 +4,8 @@ import {
     getSynthesizedDeepClone, getTokenAtPosition, isArrowFunction, isFunctionDeclaration, isFunctionExpression,
     isMethodDeclaration, isNumber, MethodDeclaration, ModifierFlags, Set, some, SourceFile, textChanges, TextSpan,
     textSpanEnd, textSpansEqual,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 type ContextualTrackChangesFunction = (cb: (changeTracker: textChanges.ChangeTracker) => void) => FileTextChanges[];
 const fixId = "addMissingAsync";
diff --git a/src/services/codefixes/addMissingAwait.ts b/src/services/codefixes/addMissingAwait.ts
index 865eda5577..ba1cee1f77 100644
--- a/src/services/codefixes/addMissingAwait.ts
+++ b/src/services/codefixes/addMissingAwait.ts
@@ -5,10 +5,10 @@ import {
     isBlock, isCallOrNewExpression, isIdentifier, isNumber, isPropertyAccessExpression, isVariableDeclaration,
     ModifierFlags, Node, NodeFlags, positionIsASICandidate, Program, Set, some, SourceFile, Symbol, SyntaxKind,
     textChanges, TextSpan, textSpansEqual, tryAddToSet, tryCast, TypeChecker, TypeFlags,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     codeFixAll, createCodeFixAction, createCodeFixActionWithoutFixAll, registerCodeFix,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 type ContextualTrackChangesFunction = (cb: (changeTracker: textChanges.ChangeTracker) => void) => FileTextChanges[];
 const fixId = "addMissingAwait";
diff --git a/src/services/codefixes/addMissingConst.ts b/src/services/codefixes/addMissingConst.ts
index e2ccc87e3b..e8d31789fd 100644
--- a/src/services/codefixes/addMissingConst.ts
+++ b/src/services/codefixes/addMissingConst.ts
@@ -2,8 +2,8 @@ import {
     Diagnostics, every, Expression, findAncestor, getTokenAtPosition, isArrayLiteralExpression, isAssignmentExpression,
     isBinaryExpression, isExpressionStatement, isForInOrOfStatement, isIdentifier, Node, Program, Set, SourceFile,
     SyntaxKind, textChanges, tryAddToSet, TypeChecker,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "addMissingConst";
 const errorCodes = [
diff --git a/src/services/codefixes/addMissingDeclareProperty.ts b/src/services/codefixes/addMissingDeclareProperty.ts
index 2814bd9f7b..69ac641b63 100644
--- a/src/services/codefixes/addMissingDeclareProperty.ts
+++ b/src/services/codefixes/addMissingDeclareProperty.ts
@@ -1,7 +1,7 @@
 import {
     Diagnostics, getTokenAtPosition, isIdentifier, Node, Set, SourceFile, SyntaxKind, textChanges, tryAddToSet,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "addMissingDeclareProperty";
 const errorCodes = [
diff --git a/src/services/codefixes/addMissingInvocationForDecorator.ts b/src/services/codefixes/addMissingInvocationForDecorator.ts
index bfa4a2200d..d362521a0e 100644
--- a/src/services/codefixes/addMissingInvocationForDecorator.ts
+++ b/src/services/codefixes/addMissingInvocationForDecorator.ts
@@ -1,7 +1,7 @@
 import {
     Debug, Diagnostics, factory, findAncestor, getTokenAtPosition, isDecorator, SourceFile, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "addMissingInvocationForDecorator";
 const errorCodes = [Diagnostics._0_accepts_too_few_arguments_to_be_used_as_a_decorator_here_Did_you_mean_to_call_it_first_and_write_0.code];
diff --git a/src/services/codefixes/addNameToNamelessParameter.ts b/src/services/codefixes/addNameToNamelessParameter.ts
index cea54d4c66..a1354318df 100644
--- a/src/services/codefixes/addNameToNamelessParameter.ts
+++ b/src/services/codefixes/addNameToNamelessParameter.ts
@@ -1,7 +1,7 @@
 import {
     Debug, Diagnostics, factory, getTokenAtPosition, Identifier, isParameter, SourceFile, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "addNameToNamelessParameter";
 const errorCodes = [Diagnostics.Parameter_has_a_name_but_no_type_Did_you_mean_0_Colon_1.code];
diff --git a/src/services/codefixes/addOptionalPropertyUndefined.ts b/src/services/codefixes/addOptionalPropertyUndefined.ts
index cae2801386..8c4f30b41a 100644
--- a/src/services/codefixes/addOptionalPropertyUndefined.ts
+++ b/src/services/codefixes/addOptionalPropertyUndefined.ts
@@ -4,8 +4,8 @@ import {
     isPropertyAssignment, isPropertyDeclaration, isPropertySignature, isShorthandPropertyAssignment,
     isVariableDeclaration, Node, PropertyAccessExpression, SignatureDeclaration, SourceFile, Symbol, SyntaxKind,
     textChanges, TextSpan, TypeChecker, UnionTypeNode,
-} from "../_namespaces/ts";
-import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const addOptionalPropertyUndefined = "addOptionalPropertyUndefined";
 
diff --git a/src/services/codefixes/annotateWithTypeFromJSDoc.ts b/src/services/codefixes/annotateWithTypeFromJSDoc.ts
index 8003b4a713..664462251e 100644
--- a/src/services/codefixes/annotateWithTypeFromJSDoc.ts
+++ b/src/services/codefixes/annotateWithTypeFromJSDoc.ts
@@ -6,8 +6,8 @@ import {
     nullTransformationContext, ParameterDeclaration, PropertyDeclaration, PropertySignature, setEmitFlags, SourceFile,
     SyntaxKind, textChanges, tryCast, TypeNode, TypeReferenceNode, VariableDeclaration, visitEachChild, visitNode,
     visitNodes,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "annotateWithTypeFromJSDoc";
 const errorCodes = [Diagnostics.JSDoc_types_may_be_moved_to_TypeScript_types.code];
diff --git a/src/services/codefixes/convertConstToLet.ts b/src/services/codefixes/convertConstToLet.ts
index 3284225835..d8c46a980f 100644
--- a/src/services/codefixes/convertConstToLet.ts
+++ b/src/services/codefixes/convertConstToLet.ts
@@ -1,10 +1,10 @@
 import {
     addToSeen, Diagnostics, factory, findChildOfKind, getSymbolId, getTokenAtPosition, isVariableDeclarationList, Map,
     Program, SourceFile, Symbol, SyntaxKind, textChanges, Token, tryCast,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     createCodeFixActionMaybeFixAll, createCombinedCodeActions, eachDiagnostic, registerCodeFix,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixConvertConstToLet";
 const errorCodes = [Diagnostics.Cannot_assign_to_0_because_it_is_a_constant.code];
diff --git a/src/services/codefixes/convertFunctionToEs6Class.ts b/src/services/codefixes/convertFunctionToEs6Class.ts
index ce585b6a1c..bc558d51c6 100644
--- a/src/services/codefixes/convertFunctionToEs6Class.ts
+++ b/src/services/codefixes/convertFunctionToEs6Class.ts
@@ -9,8 +9,8 @@ import {
     isVariableDeclarationList, Modifier, Node, ObjectLiteralElementLike, ObjectLiteralExpression,
     PropertyAccessExpression, PropertyName, QuotePreference, some, SourceFile, Symbol, SymbolFlags, symbolName,
     SyntaxKind, textChanges, TypeChecker, UserPreferences, VariableDeclaration,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "convertFunctionToEs6Class";
 const errorCodes = [Diagnostics.This_constructor_function_may_be_converted_to_a_class_declaration.code];
diff --git a/src/services/codefixes/convertLiteralTypeToMappedType.ts b/src/services/codefixes/convertLiteralTypeToMappedType.ts
index 8cf9c9bc07..32beab0b95 100644
--- a/src/services/codefixes/convertLiteralTypeToMappedType.ts
+++ b/src/services/codefixes/convertLiteralTypeToMappedType.ts
@@ -1,8 +1,8 @@
 import {
     cast, Diagnostics, factory, getTokenAtPosition, isIdentifier, isPropertySignature, isTypeLiteralNode, SourceFile,
     textChanges, TypeLiteralNode, TypeNode,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "convertLiteralTypeToMappedType";
 const errorCodes = [Diagnostics._0_only_refers_to_a_type_but_is_being_used_as_a_value_here_Did_you_mean_to_use_1_in_0.code];
diff --git a/src/services/codefixes/convertToAsyncFunction.ts b/src/services/codefixes/convertToAsyncFunction.ts
index fd06aacc5e..bb8d0981be 100644
--- a/src/services/codefixes/convertToAsyncFunction.ts
+++ b/src/services/codefixes/convertToAsyncFunction.ts
@@ -11,8 +11,8 @@ import {
     Node, NodeFlags, ObjectFlags, PropertyAccessExpression, ReadonlyESMap, ReadonlySet, returnsPromise, ReturnStatement,
     returnTrue, Set, Signature, SignatureKind, skipTrivia, SourceFile, Statement, Symbol, SyntaxKind, textChanges,
     tryCast, TryStatement, Type, TypeChecker, TypeNode, TypeReference, UnionReduction,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "convertToAsyncFunction";
 const errorCodes = [Diagnostics.This_may_be_converted_to_an_async_function.code];
diff --git a/src/services/codefixes/convertToEsModule.ts b/src/services/codefixes/convertToEsModule.ts
index b8637f810b..83cf35074b 100644
--- a/src/services/codefixes/convertToEsModule.ts
+++ b/src/services/codefixes/convertToEsModule.ts
@@ -1,6 +1,6 @@
 import {
     createCodeFixActionWithoutFixAll, moduleSpecifierToValidIdentifier, registerCodeFix,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 import {
     __String, arrayFrom, ArrowFunction, BinaryExpression, BindingElement, BindingName, ClassDeclaration,
     ClassExpression, concatenate, copyEntries, createMultiMap, createRange, Debug, Diagnostics, emptyMap, ESMap,
@@ -15,7 +15,7 @@ import {
     ObjectLiteralExpression, PropertyAccessExpression, QuotePreference, rangeContainsRange, ReadonlyCollection,
     ReadonlyESMap, ScriptTarget, Set, some, SourceFile, Statement, StringLiteralLike, SymbolFlags, SyntaxKind,
     textChanges, TypeChecker, VariableStatement,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 registerCodeFix({
     errorCodes: [Diagnostics.File_is_a_CommonJS_module_it_may_be_converted_to_an_ES_module.code],
diff --git a/src/services/codefixes/convertToMappedObjectType.ts b/src/services/codefixes/convertToMappedObjectType.ts
index 5625eecdd1..37de7abdf8 100644
--- a/src/services/codefixes/convertToMappedObjectType.ts
+++ b/src/services/codefixes/convertToMappedObjectType.ts
@@ -3,8 +3,8 @@ import {
     hasEffectiveReadonlyModifier, idText, IndexSignatureDeclaration, InterfaceDeclaration, isIdentifier,
     isIndexSignatureDeclaration, isInterfaceDeclaration, isTypeAliasDeclaration, SourceFile, SyntaxKind, textChanges,
     tryCast, TypeAliasDeclaration, TypeLiteralNode, TypeNode,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixConvertToMappedObjectType";
 const errorCodes = [Diagnostics.An_index_signature_parameter_type_cannot_be_a_literal_type_or_generic_type_Consider_using_a_mapped_object_type_instead.code];
diff --git a/src/services/codefixes/convertToTypeOnlyExport.ts b/src/services/codefixes/convertToTypeOnlyExport.ts
index 0a44c50668..b33fc2bc46 100644
--- a/src/services/codefixes/convertToTypeOnlyExport.ts
+++ b/src/services/codefixes/convertToTypeOnlyExport.ts
@@ -2,8 +2,8 @@ import {
     addToSeen, CodeFixContextBase, contains, createTextSpanFromNode, Diagnostics, ExportSpecifier, factory, filter,
     findDiagnosticForNode, getDiagnosticsWithinSpan, getNodeId, getTokenAtPosition, isExportSpecifier, Map, SourceFile,
     SyntaxKind, textChanges, TextSpan, tryCast,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const errorCodes = [Diagnostics.Re_exporting_a_type_when_the_isolatedModules_flag_is_provided_requires_using_export_type.code];
 const fixId = "convertToTypeOnlyExport";
diff --git a/src/services/codefixes/convertToTypeOnlyImport.ts b/src/services/codefixes/convertToTypeOnlyImport.ts
index d124ceae58..d752fda3ed 100644
--- a/src/services/codefixes/convertToTypeOnlyImport.ts
+++ b/src/services/codefixes/convertToTypeOnlyImport.ts
@@ -1,8 +1,8 @@
 import {
     CodeFixContextBase, Diagnostics, factory, getTokenAtPosition, ImportDeclaration, isImportDeclaration, SourceFile,
     textChanges, TextSpan, tryCast,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const errorCodes = [Diagnostics.This_import_is_never_used_as_a_value_and_must_use_import_type_because_importsNotUsedAsValues_is_set_to_error.code];
 const fixId = "convertToTypeOnlyImport";
diff --git a/src/services/codefixes/correctQualifiedNameToIndexedAccessType.ts b/src/services/codefixes/correctQualifiedNameToIndexedAccessType.ts
index 4c228bae00..beb1f754d8 100644
--- a/src/services/codefixes/correctQualifiedNameToIndexedAccessType.ts
+++ b/src/services/codefixes/correctQualifiedNameToIndexedAccessType.ts
@@ -1,8 +1,8 @@
 import {
     Debug, Diagnostics, factory, findAncestor, getTokenAtPosition, Identifier, isIdentifier, isQualifiedName,
     QualifiedName, SourceFile, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "correctQualifiedNameToIndexedAccessType";
 const errorCodes = [Diagnostics.Cannot_access_0_1_because_0_is_a_type_but_not_a_namespace_Did_you_mean_to_retrieve_the_type_of_the_property_1_in_0_with_0_1.code];
diff --git a/src/services/codefixes/disableJsDiagnostics.ts b/src/services/codefixes/disableJsDiagnostics.ts
index 9d922114ca..8d1a242596 100644
--- a/src/services/codefixes/disableJsDiagnostics.ts
+++ b/src/services/codefixes/disableJsDiagnostics.ts
@@ -2,10 +2,10 @@ import {
     CodeFixAction, createTextChange, createTextSpan, createTextSpanFromBounds, DiagnosticCategory, Diagnostics,
     getLineAndCharacterOfPosition, getNewLineOrDefaultFromHost, isCheckJsEnabledForFile, isInJSFile, mapDefined, Set,
     SourceFile, textChanges, tryAddToSet,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     codeFixAll, createCodeFixAction, createCodeFixActionWithoutFixAll, createFileTextChanges, registerCodeFix,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const fixName = "disableJsDiagnostics";
 const fixId = "disableJsDiagnostics";
diff --git a/src/services/codefixes/fixAddMissingConstraint.ts b/src/services/codefixes/fixAddMissingConstraint.ts
index 9ddb0f037c..0150021436 100644
--- a/src/services/codefixes/fixAddMissingConstraint.ts
+++ b/src/services/codefixes/fixAddMissingConstraint.ts
@@ -3,11 +3,11 @@ import {
     getEmitScriptTarget, getNodeId, getTokenAtPosition, isExpression, isIdentifier, isMappedTypeNode, isString,
     isTypeNode, isTypeParameterDeclaration, LanguageServiceHost, Map, Node, Program, SourceFile, textChanges, TextSpan,
     textSpanEnd, Type, TypeChecker, TypeParameterDeclaration, UserPreferences,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     createCodeFixAction, createCombinedCodeActions, createImportAdder, eachDiagnostic, getNoopSymbolTrackerWithResolver,
     registerCodeFix, typeToAutoImportableTypeNode,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const fixId = "addMissingConstraint";
 const errorCodes = [
diff --git a/src/services/codefixes/fixAddMissingMember.ts b/src/services/codefixes/fixAddMissingMember.ts
index 5154a23561..68bfad4b33 100644
--- a/src/services/codefixes/fixAddMissingMember.ts
+++ b/src/services/codefixes/fixAddMissingMember.ts
@@ -16,12 +16,12 @@ import {
     ScriptTarget, Set, setParent, Signature, SignatureKind, singleElementArray, singleOrUndefined, skipConstraint, some,
     SourceFile, startsWithUnderscore, StringLiteralType, Symbol, SymbolFlags, SyntaxKind, textChanges, tryCast, Type,
     TypeChecker, TypeFlags, TypeLiteralNode, TypeNode, TypeReference, UnionType,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     createCodeFixAction, createCodeFixActionWithoutFixAll, createCombinedCodeActions, createImportAdder,
     createSignatureDeclarationFromCallExpression, createSignatureDeclarationFromSignature, createStubbedBody,
     eachDiagnostic, getAllSupers, ImportAdder, registerCodeFix,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const fixMissingMember = "fixMissingMember";
 const fixMissingProperties = "fixMissingProperties";
diff --git a/src/services/codefixes/fixAddMissingNewOperator.ts b/src/services/codefixes/fixAddMissingNewOperator.ts
index fc8db24afa..a31c66354c 100644
--- a/src/services/codefixes/fixAddMissingNewOperator.ts
+++ b/src/services/codefixes/fixAddMissingNewOperator.ts
@@ -1,8 +1,8 @@
 import {
     cast, Diagnostics, factory, getTokenAtPosition, isCallExpression, Node, SourceFile, textChanges, TextSpan,
     textSpanEnd,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "addMissingNewOperator";
 const errorCodes = [Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new.code];
diff --git a/src/services/codefixes/fixAddModuleReferTypeMissingTypeof.ts b/src/services/codefixes/fixAddModuleReferTypeMissingTypeof.ts
index dd5ad94476..f345a2923c 100644
--- a/src/services/codefixes/fixAddModuleReferTypeMissingTypeof.ts
+++ b/src/services/codefixes/fixAddModuleReferTypeMissingTypeof.ts
@@ -1,7 +1,7 @@
 import {
     Debug, Diagnostics, factory, getTokenAtPosition, ImportTypeNode, SourceFile, SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixIdAddMissingTypeof = "fixAddModuleReferTypeMissingTypeof";
 const fixId = fixIdAddMissingTypeof;
diff --git a/src/services/codefixes/fixAddVoidToPromise.ts b/src/services/codefixes/fixAddVoidToPromise.ts
index b8ca89f823..0a65b6bbe8 100644
--- a/src/services/codefixes/fixAddVoidToPromise.ts
+++ b/src/services/codefixes/fixAddVoidToPromise.ts
@@ -3,8 +3,8 @@ import {
     isIdentifier, isInJSFile, isNewExpression, isParameter, isParenthesizedExpression, isParenthesizedTypeNode,
     isTypeReferenceNode, isUnionTypeNode, NewExpression, ParameterDeclaration, Program, Set, skipTrivia, some,
     SourceFile, SyntaxKind, textChanges, TextSpan, TypeFlags,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixName = "addVoidToPromise";
 const fixId = "addVoidToPromise";
@@ -85,4 +85,4 @@ function getEffectiveTypeArguments(node: NewExpression) {
     else {
         return node.typeArguments;
     }
-}
\ No newline at end of file
+}
diff --git a/src/services/codefixes/fixAwaitInSyncFunction.ts b/src/services/codefixes/fixAwaitInSyncFunction.ts
index 015a0a9292..d5119a968b 100644
--- a/src/services/codefixes/fixAwaitInSyncFunction.ts
+++ b/src/services/codefixes/fixAwaitInSyncFunction.ts
@@ -2,8 +2,8 @@ import {
     addToSeen, ArrowFunction, Diagnostics, factory, findChildOfKind, first, FunctionDeclaration, FunctionExpression,
     getContainingFunction, getEntityNameFromTypeNode, getNodeId, getTokenAtPosition, isFunctionTypeNode,
     isVariableDeclaration, Map, MethodDeclaration, Node, SourceFile, SyntaxKind, textChanges, TypeNode,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixAwaitInSyncFunction";
 const errorCodes = [
diff --git a/src/services/codefixes/fixCannotFindModule.ts b/src/services/codefixes/fixCannotFindModule.ts
index fb959282f6..2dcfc5528c 100644
--- a/src/services/codefixes/fixCannotFindModule.ts
+++ b/src/services/codefixes/fixCannotFindModule.ts
@@ -1,8 +1,8 @@
 import {
     Debug, Diagnostics, getTokenAtPosition, getTypesPackageName, InstallPackageAction, isExternalModuleNameRelative,
     isStringLiteral, JsTyping, LanguageServiceHost, parsePackageName, SourceFile, tryCast,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixName = "fixCannotFindModule";
 const fixIdInstallTypesPackage = "installTypesPackage";
diff --git a/src/services/codefixes/fixClassDoesntImplementInheritedAbstractMember.ts b/src/services/codefixes/fixClassDoesntImplementInheritedAbstractMember.ts
index 45fa4cc530..fd7cb85bae 100644
--- a/src/services/codefixes/fixClassDoesntImplementInheritedAbstractMember.ts
+++ b/src/services/codefixes/fixClassDoesntImplementInheritedAbstractMember.ts
@@ -2,11 +2,11 @@ import {
     addToSeen, cast, ClassElement, ClassLikeDeclaration, Diagnostics, first, getEffectiveBaseTypeNode, getNodeId,
     getSyntacticModifierFlags, getTokenAtPosition, isClassLike, Map, ModifierFlags, SourceFile, Symbol, textChanges,
     UserPreferences,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     codeFixAll, createCodeFixAction, createImportAdder, createMissingMemberNodes, registerCodeFix,
     TypeConstructionContext,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const errorCodes = [
     Diagnostics.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2.code,
diff --git a/src/services/codefixes/fixClassIncorrectlyImplementsInterface.ts b/src/services/codefixes/fixClassIncorrectlyImplementsInterface.ts
index a32ba4b400..d990d42035 100644
--- a/src/services/codefixes/fixClassIncorrectlyImplementsInterface.ts
+++ b/src/services/codefixes/fixClassIncorrectlyImplementsInterface.ts
@@ -4,11 +4,11 @@ import {
     getEffectiveModifierFlags, getNodeId, getTokenAtPosition, IndexKind, InterfaceDeclaration, InterfaceType,
     isConstructorDeclaration, Map, mapDefined, ModifierFlags, SourceFile, Symbol, SymbolTable, textChanges, TypeChecker,
     UserPreferences,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     codeFixAll, createCodeFixAction, createImportAdder, createMissingMemberNodes, getNoopSymbolTrackerWithResolver,
     registerCodeFix, TypeConstructionContext,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const errorCodes = [
     Diagnostics.Class_0_incorrectly_implements_interface_1.code,
diff --git a/src/services/codefixes/fixClassSuperMustPrecedeThisAccess.ts b/src/services/codefixes/fixClassSuperMustPrecedeThisAccess.ts
index f6edc90f5e..3072623294 100644
--- a/src/services/codefixes/fixClassSuperMustPrecedeThisAccess.ts
+++ b/src/services/codefixes/fixClassSuperMustPrecedeThisAccess.ts
@@ -2,8 +2,8 @@ import {
     addToSeen, CallExpression, ConstructorDeclaration, Diagnostics, ExpressionStatement, forEachChild,
     getContainingFunction, getNodeId, getTokenAtPosition, isExpressionStatement, isFunctionLike,
     isPropertyAccessExpression, isSuperCall, Map, Node, SourceFile, SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "classSuperMustPrecedeThisAccess";
 const errorCodes = [Diagnostics.super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class.code];
diff --git a/src/services/codefixes/fixConstructorForDerivedNeedSuperCall.ts b/src/services/codefixes/fixConstructorForDerivedNeedSuperCall.ts
index 118b1b630f..5e0c7553a8 100644
--- a/src/services/codefixes/fixConstructorForDerivedNeedSuperCall.ts
+++ b/src/services/codefixes/fixConstructorForDerivedNeedSuperCall.ts
@@ -1,8 +1,8 @@
 import {
     ConstructorDeclaration, Debug, Diagnostics, emptyArray, factory, getTokenAtPosition, isConstructorDeclaration,
     SourceFile, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "constructorForDerivedNeedSuperCall";
 const errorCodes = [Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call.code];
diff --git a/src/services/codefixes/fixEnableExperimentalDecorators.ts b/src/services/codefixes/fixEnableExperimentalDecorators.ts
index 913ba7ee80..60badd6e23 100644
--- a/src/services/codefixes/fixEnableExperimentalDecorators.ts
+++ b/src/services/codefixes/fixEnableExperimentalDecorators.ts
@@ -1,7 +1,7 @@
-import { Diagnostics, factory, textChanges, TsConfigSourceFile } from "../_namespaces/ts";
+import { Diagnostics, factory, textChanges, TsConfigSourceFile } from "../_namespaces/ts.js";
 import {
     codeFixAll, createCodeFixActionWithoutFixAll, registerCodeFix, setJsonCompilerOptionValue,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const fixId = "enableExperimentalDecorators";
 const errorCodes = [
diff --git a/src/services/codefixes/fixEnableJsxFlag.ts b/src/services/codefixes/fixEnableJsxFlag.ts
index 7fb645b03d..85e4c5cd1b 100644
--- a/src/services/codefixes/fixEnableJsxFlag.ts
+++ b/src/services/codefixes/fixEnableJsxFlag.ts
@@ -1,7 +1,7 @@
-import { Diagnostics, factory, textChanges, TsConfigSourceFile } from "../_namespaces/ts";
+import { Diagnostics, factory, textChanges, TsConfigSourceFile } from "../_namespaces/ts.js";
 import {
     codeFixAll, createCodeFixActionWithoutFixAll, registerCodeFix, setJsonCompilerOptionValue,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const fixID = "fixEnableJsxFlag";
 const errorCodes = [Diagnostics.Cannot_use_JSX_unless_the_jsx_flag_is_provided.code];
diff --git a/src/services/codefixes/fixExpectedComma.ts b/src/services/codefixes/fixExpectedComma.ts
index 795ff8a6a4..2074dfd811 100644
--- a/src/services/codefixes/fixExpectedComma.ts
+++ b/src/services/codefixes/fixExpectedComma.ts
@@ -1,8 +1,8 @@
 import {
     Diagnostics, factory, getTokenAtPosition, isArrayLiteralExpression, isObjectLiteralExpression, Node, SourceFile,
     SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixExpectedComma";
 const expectedErrorCode = Diagnostics._0_expected.code;
diff --git a/src/services/codefixes/fixExtendsInterfaceBecomesImplements.ts b/src/services/codefixes/fixExtendsInterfaceBecomesImplements.ts
index 9cd8edb6ac..0c73915e94 100644
--- a/src/services/codefixes/fixExtendsInterfaceBecomesImplements.ts
+++ b/src/services/codefixes/fixExtendsInterfaceBecomesImplements.ts
@@ -1,8 +1,8 @@
 import {
     Diagnostics, factory, getContainingClass, getTokenAtPosition, HeritageClause, isWhiteSpaceSingleLine, Node,
     SourceFile, SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "extendsInterfaceBecomesImplements";
 const errorCodes = [Diagnostics.Cannot_extend_an_interface_0_Did_you_mean_implements.code];
diff --git a/src/services/codefixes/fixForgottenThisPropertyAccess.ts b/src/services/codefixes/fixForgottenThisPropertyAccess.ts
index cf441e9315..2a21d59ddc 100644
--- a/src/services/codefixes/fixForgottenThisPropertyAccess.ts
+++ b/src/services/codefixes/fixForgottenThisPropertyAccess.ts
@@ -1,8 +1,8 @@
 import {
     Diagnostics, factory, getContainingClass, getTokenAtPosition, Identifier, isIdentifier, isPrivateIdentifier,
     PrivateIdentifier, SourceFile, suppressLeadingAndTrailingTrivia, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "forgottenThisPropertyAccess";
 const didYouMeanStaticMemberCode = Diagnostics.Cannot_find_name_0_Did_you_mean_the_static_member_1_0.code;
diff --git a/src/services/codefixes/fixImplicitThis.ts b/src/services/codefixes/fixImplicitThis.ts
index bd79564494..4129d056de 100644
--- a/src/services/codefixes/fixImplicitThis.ts
+++ b/src/services/codefixes/fixImplicitThis.ts
@@ -2,8 +2,8 @@ import {
     ANONYMOUS, Debug, DiagnosticAndArguments, Diagnostics, emptyArray, factory, FindAllReferences, findChildOfKind,
     getThisContainer, getTokenAtPosition, isFunctionDeclaration, isFunctionExpression, isSourceFile, isThis, SourceFile,
     SyntaxKind, textChanges, TypeChecker,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixImplicitThis";
 const errorCodes = [Diagnostics.this_implicitly_has_type_any_because_it_does_not_have_a_type_annotation.code];
diff --git a/src/services/codefixes/fixIncorrectNamedTupleSyntax.ts b/src/services/codefixes/fixIncorrectNamedTupleSyntax.ts
index f9ce4f3167..bf7c48064b 100644
--- a/src/services/codefixes/fixIncorrectNamedTupleSyntax.ts
+++ b/src/services/codefixes/fixIncorrectNamedTupleSyntax.ts
@@ -1,8 +1,8 @@
 import {
     Diagnostics, factory, findAncestor, getTokenAtPosition, NamedTupleMember, OptionalTypeNode, ParenthesizedTypeNode,
     RestTypeNode, SourceFile, SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixIncorrectNamedTupleSyntax";
 const errorCodes = [
diff --git a/src/services/codefixes/fixInvalidImportSyntax.ts b/src/services/codefixes/fixInvalidImportSyntax.ts
index d326e8e4cb..ef1aa221ac 100644
--- a/src/services/codefixes/fixInvalidImportSyntax.ts
+++ b/src/services/codefixes/fixInvalidImportSyntax.ts
@@ -3,8 +3,8 @@ import {
     getNamespaceDeclarationNode, getQuotePreference, getSourceFileOfNode, getTokenAtPosition, ImportDeclaration,
     isExpression, isImportCall, isNamedDeclaration, makeImport, ModuleKind, NamespaceImport, NewExpression, Node,
     SourceFile, SyntaxKind, textChanges, TransientSymbol,
-} from "../_namespaces/ts";
-import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixName = "invalidImportSyntax";
 
diff --git a/src/services/codefixes/fixInvalidJsxCharacters.ts b/src/services/codefixes/fixInvalidJsxCharacters.ts
index b439ac6e6a..d7db8fd104 100644
--- a/src/services/codefixes/fixInvalidJsxCharacters.ts
+++ b/src/services/codefixes/fixInvalidJsxCharacters.ts
@@ -1,5 +1,5 @@
-import { Diagnostics, hasProperty, quote, SourceFile, textChanges, UserPreferences } from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+import { Diagnostics, hasProperty, quote, SourceFile, textChanges, UserPreferences } from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixIdExpression = "fixInvalidJsxCharacters_expression";
 const fixIdHtmlEntity = "fixInvalidJsxCharacters_htmlEntity";
diff --git a/src/services/codefixes/fixJSDocTypes.ts b/src/services/codefixes/fixJSDocTypes.ts
index 56cd99ddc3..3e2349953a 100644
--- a/src/services/codefixes/fixJSDocTypes.ts
+++ b/src/services/codefixes/fixJSDocTypes.ts
@@ -4,8 +4,8 @@ import {
     IndexSignatureDeclaration, MappedTypeNode, MethodDeclaration, MethodSignature, Node, ParameterDeclaration,
     PropertyDeclaration, PropertySignature, SetAccessorDeclaration, SourceFile, SyntaxKind, textChanges, Type,
     TypeAliasDeclaration, TypeAssertion, TypeChecker, TypeFlags, TypeNode, VariableDeclaration,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixIdPlain = "fixJSDocTypes_plain";
 const fixIdNullable = "fixJSDocTypes_nullable";
diff --git a/src/services/codefixes/fixMissingCallParentheses.ts b/src/services/codefixes/fixMissingCallParentheses.ts
index a4d20b3759..7d04fd8e4b 100644
--- a/src/services/codefixes/fixMissingCallParentheses.ts
+++ b/src/services/codefixes/fixMissingCallParentheses.ts
@@ -1,8 +1,8 @@
 import {
     Diagnostics, getTokenAtPosition, Identifier, isIdentifier, isPropertyAccessExpression, PrivateIdentifier,
     PropertyAccessExpression, SourceFile, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixMissingCallParentheses";
 const errorCodes = [
diff --git a/src/services/codefixes/fixModuleAndTargetOptions.ts b/src/services/codefixes/fixModuleAndTargetOptions.ts
index 71142e4cd0..53f194cf90 100644
--- a/src/services/codefixes/fixModuleAndTargetOptions.ts
+++ b/src/services/codefixes/fixModuleAndTargetOptions.ts
@@ -1,10 +1,10 @@
 import {
     createCodeFixActionWithoutFixAll, registerCodeFix, setJsonCompilerOptionValue, setJsonCompilerOptionValues,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 import {
     CodeFixAction, Diagnostics, Expression, factory, getEmitModuleKind, getEmitScriptTarget,
     getTsConfigObjectLiteralExpression, ModuleKind, ScriptTarget, textChanges,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 registerCodeFix({
     errorCodes: [
diff --git a/src/services/codefixes/fixNoPropertyAccessFromIndexSignature.ts b/src/services/codefixes/fixNoPropertyAccessFromIndexSignature.ts
index 33e8018979..2db4af53bc 100644
--- a/src/services/codefixes/fixNoPropertyAccessFromIndexSignature.ts
+++ b/src/services/codefixes/fixNoPropertyAccessFromIndexSignature.ts
@@ -1,8 +1,8 @@
 import {
     cast, Diagnostics, factory, getQuotePreference, getTokenAtPosition, isPropertyAccessChain,
     isPropertyAccessExpression, PropertyAccessExpression, QuotePreference, SourceFile, textChanges, UserPreferences,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixNoPropertyAccessFromIndexSignature";
 const errorCodes = [
diff --git a/src/services/codefixes/fixOverrideModifier.ts b/src/services/codefixes/fixOverrideModifier.ts
index c298256f1c..3eab9b3885 100644
--- a/src/services/codefixes/fixOverrideModifier.ts
+++ b/src/services/codefixes/fixOverrideModifier.ts
@@ -5,8 +5,8 @@ import {
     isParameterPropertyDeclaration, isSourceFileJS, isStaticModifier, MethodDeclaration, Node, not,
     ParameterPropertyDeclaration, PropertyDeclaration, SetAccessorDeclaration, skipTrivia, SourceFile, SyntaxKind,
     textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixActionMaybeFixAll, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixActionMaybeFixAll, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixName = "fixOverrideModifier";
 const fixAddOverrideId = "fixAddOverrideModifier";
diff --git a/src/services/codefixes/fixPropertyAssignment.ts b/src/services/codefixes/fixPropertyAssignment.ts
index 52b250ed43..e46bef01b0 100644
--- a/src/services/codefixes/fixPropertyAssignment.ts
+++ b/src/services/codefixes/fixPropertyAssignment.ts
@@ -1,8 +1,8 @@
 import {
     cast, Diagnostics, Expression, factory, getTokenAtPosition, isShorthandPropertyAssignment,
     ShorthandPropertyAssignment, SourceFile, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixPropertyAssignment";
 const errorCodes = [
diff --git a/src/services/codefixes/fixPropertyOverrideAccessor.ts b/src/services/codefixes/fixPropertyOverrideAccessor.ts
index 8c229c3dc7..420a0297ae 100644
--- a/src/services/codefixes/fixPropertyOverrideAccessor.ts
+++ b/src/services/codefixes/fixPropertyOverrideAccessor.ts
@@ -1,10 +1,10 @@
 import {
     CodeFixAllContext, CodeFixContext, Debug, Diagnostics, getSourceFileOfNode, getTextOfPropertyName,
     getTokenAtPosition, isAccessor, isClassLike, singleOrUndefined, SourceFile, unescapeLeadingUnderscores,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     codeFixAll, createCodeFixAction, generateAccessorFromProperty, getAllSupers, registerCodeFix,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const errorCodes = [
     Diagnostics._0_is_defined_as_an_accessor_in_class_1_but_is_overridden_here_in_2_as_an_instance_property.code,
diff --git a/src/services/codefixes/fixReturnTypeInAsyncFunction.ts b/src/services/codefixes/fixReturnTypeInAsyncFunction.ts
index d29797a1a7..2ee68e50e5 100644
--- a/src/services/codefixes/fixReturnTypeInAsyncFunction.ts
+++ b/src/services/codefixes/fixReturnTypeInAsyncFunction.ts
@@ -1,8 +1,8 @@
 import {
     Diagnostics, factory, findAncestor, getTokenAtPosition, isFunctionLikeDeclaration, isInJSFile, SourceFile,
     textChanges, Type, TypeChecker, TypeNode,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixReturnTypeInAsyncFunction";
 const errorCodes = [
diff --git a/src/services/codefixes/fixSpelling.ts b/src/services/codefixes/fixSpelling.ts
index cf7768ddfe..a86cc4279e 100644
--- a/src/services/codefixes/fixSpelling.ts
+++ b/src/services/codefixes/fixSpelling.ts
@@ -6,8 +6,8 @@ import {
     isNamedDeclaration, isPrivateIdentifier, isPropertyAccessExpression, isQualifiedName, isStringLiteralLike,
     ModifierFlags, Node, NodeFlags, ScriptTarget, SemanticMeaning, SourceFile, Symbol, SymbolFlags, symbolName,
     SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixSpelling";
 const errorCodes = [
diff --git a/src/services/codefixes/fixStrictClassInitialization.ts b/src/services/codefixes/fixStrictClassInitialization.ts
index 5dc35843d7..0c3eecb41a 100644
--- a/src/services/codefixes/fixStrictClassInitialization.ts
+++ b/src/services/codefixes/fixStrictClassInitialization.ts
@@ -4,8 +4,8 @@ import {
     hasSyntacticModifier, isIdentifier, isInJSFile, isPropertyDeclaration, isUnionTypeNode, ModifierFlags,
     PropertyDeclaration, SourceFile, suppressLeadingAndTrailingTrivia, SyntaxKind, textChanges, Type, TypeChecker,
     TypeFlags, TypeNode,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixName = "strictClassInitialization";
 const fixIdAddDefiniteAssignmentAssertions = "addMissingPropertyDefiniteAssignmentAssertions";
diff --git a/src/services/codefixes/fixUnmatchedParameter.ts b/src/services/codefixes/fixUnmatchedParameter.ts
index 4b0a3391e9..9acc35d5f3 100644
--- a/src/services/codefixes/fixUnmatchedParameter.ts
+++ b/src/services/codefixes/fixUnmatchedParameter.ts
@@ -2,10 +2,10 @@ import {
     __String, append, CodeFixAction, CodeFixContext, Diagnostics, factory, firstDefined, getHostSignatureFromJSDoc,
     getJSDocTags, getTokenAtPosition, Identifier, isIdentifier, isJSDocParameterTag, JSDocParameterTag, JSDocTag,
     length, map, Map, Set, SignatureDeclaration, SourceFile, textChanges,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     createCodeFixAction, createCodeFixActionWithoutFixAll, createCombinedCodeActions, eachDiagnostic, registerCodeFix,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const deleteUnmatchedParameter = "deleteUnmatchedParameter";
 const renameUnmatchedParameter = "renameUnmatchedParameter";
diff --git a/src/services/codefixes/fixUnreachableCode.ts b/src/services/codefixes/fixUnreachableCode.ts
index 5e3fa6f45d..4d588745d1 100644
--- a/src/services/codefixes/fixUnreachableCode.ts
+++ b/src/services/codefixes/fixUnreachableCode.ts
@@ -1,8 +1,8 @@
 import {
     Debug, Diagnostics, emptyArray, factory, findAncestor, first, getTokenAtPosition, IfStatement, isBlock, isStatement,
     sliceAfter, SourceFile, SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixUnreachableCode";
 const errorCodes = [Diagnostics.Unreachable_code_detected.code];
diff --git a/src/services/codefixes/fixUnreferenceableDecoratorMetadata.ts b/src/services/codefixes/fixUnreferenceableDecoratorMetadata.ts
index 9340f7ddaa..906a0a65df 100644
--- a/src/services/codefixes/fixUnreferenceableDecoratorMetadata.ts
+++ b/src/services/codefixes/fixUnreferenceableDecoratorMetadata.ts
@@ -3,8 +3,8 @@ import {
     ImportClause, ImportEqualsDeclaration, ImportSpecifier, isIdentifier, isImportClause, isImportEqualsDeclaration,
     isImportSpecifier, Node, or, Program, refactor, skipAlias, SourceFile, SymbolFlags, SyntaxKind, textChanges,
     tryCast,
-} from "../_namespaces/ts";
-import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixUnreferenceableDecoratorMetadata";
 const errorCodes = [Diagnostics.A_type_referenced_in_a_decorated_signature_must_be_imported_with_import_type_or_a_namespace_import_when_isolatedModules_and_emitDecoratorMetadata_are_enabled.code];
diff --git a/src/services/codefixes/fixUnusedIdentifier.ts b/src/services/codefixes/fixUnusedIdentifier.ts
index c07250c280..8a7cd789d9 100644
--- a/src/services/codefixes/fixUnusedIdentifier.ts
+++ b/src/services/codefixes/fixUnusedIdentifier.ts
@@ -8,8 +8,8 @@ import {
     isPrefixUnaryExpression, isPropertyAccessExpression, isSuperKeyword, isVariableDeclarationList, map, Node,
     ObjectBindingPattern, ParameterDeclaration, Program, showModuleSpecifier, SourceFile, SyntaxKind, textChanges,
     tryCast, TypeChecker, VariableDeclaration, VariableDeclarationList,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixName = "unusedIdentifier";
 const fixIdPrefix = "unusedIdentifier_prefix";
diff --git a/src/services/codefixes/fixUnusedLabel.ts b/src/services/codefixes/fixUnusedLabel.ts
index 2d6fbba8b2..292c32d965 100644
--- a/src/services/codefixes/fixUnusedLabel.ts
+++ b/src/services/codefixes/fixUnusedLabel.ts
@@ -1,8 +1,8 @@
 import {
     cast, Diagnostics, findChildOfKind, getTokenAtPosition, isLabeledStatement, positionsAreOnSameLine, skipTrivia,
     SourceFile, SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "fixUnusedLabel";
 const errorCodes = [Diagnostics.Unused_label.code];
diff --git a/src/services/codefixes/generateAccessors.ts b/src/services/codefixes/generateAccessors.ts
index 1ae126ddfa..7b6e9503a0 100644
--- a/src/services/codefixes/generateAccessors.ts
+++ b/src/services/codefixes/generateAccessors.ts
@@ -9,7 +9,7 @@ import {
     nodeOverlapsWithStartEnd, ObjectLiteralExpression, ParameterPropertyDeclaration, Program, PropertyAssignment,
     PropertyDeclaration, refactor, SourceFile, startsWithUnderscore, StringLiteral, suppressLeadingAndTrailingTrivia,
     SymbolFlags, SyntaxKind, textChanges, TypeChecker, TypeNode,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 type AcceptedDeclaration = ParameterPropertyDeclaration | PropertyDeclaration | PropertyAssignment;
 type AcceptedNameType = Identifier | StringLiteral;
diff --git a/src/services/codefixes/helpers.ts b/src/services/codefixes/helpers.ts
index 51f9161fed..ba94ff595c 100644
--- a/src/services/codefixes/helpers.ts
+++ b/src/services/codefixes/helpers.ts
@@ -14,8 +14,8 @@ import {
     ScriptTarget, Set, SetAccessorDeclaration, setTextRange, Signature, SignatureDeclaration, signatureHasRestParameter,
     some, SourceFile, Symbol, SymbolFlags, SymbolTracker, SyntaxKind, textChanges, tryCast, TsConfigSourceFile, Type,
     TypeChecker, TypeFlags, TypeNode, TypeParameterDeclaration, UnionType, UserPreferences, visitEachChild, visitNode,
-} from "../_namespaces/ts";
-import { ImportAdder } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { ImportAdder } from "../_namespaces/ts.codefix.js";
 
 /**
  * Finds members of the resolved type that are missing in the class pointed to by class decl
diff --git a/src/services/codefixes/importFixes.ts b/src/services/codefixes/importFixes.ts
index b02eeed8f8..e9f06ee67e 100644
--- a/src/services/codefixes/importFixes.ts
+++ b/src/services/codefixes/importFixes.ts
@@ -22,10 +22,10 @@ import {
     SemanticMeaning, shouldUseUriStyleNodeCoreModules, single, skipAlias, some, sort, SourceFile, stableSort,
     startsWith, StringLiteral, stripQuotes, Symbol, SymbolExportInfo, SymbolFlags, SymbolId, SyntaxKind, textChanges,
     toPath, tryCast, tryGetModuleSpecifierFromDeclaration, TypeChecker, TypeOnlyAliasDeclaration, UserPreferences,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     createCodeFixAction, createCombinedCodeActions, eachDiagnostic, registerCodeFix,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 /** @internal */
 export const importFixName = "import";
diff --git a/src/services/codefixes/inferFromUsage.ts b/src/services/codefixes/inferFromUsage.ts
index 38d24b1c36..9d5066879f 100644
--- a/src/services/codefixes/inferFromUsage.ts
+++ b/src/services/codefixes/inferFromUsage.ts
@@ -15,11 +15,11 @@ import {
     SignatureDeclaration, SignatureFlags, SignatureKind, singleOrUndefined, SourceFile, Symbol, SymbolFlags,
     SymbolLinks, SyntaxKind, textChanges, Token, TransientSymbol, tryCast, Type, TypeFlags, TypeNode, TypeReference,
     UnderscoreEscapedMap, UnionOrIntersectionType, UnionReduction, UserPreferences, VariableDeclaration,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     codeFixAll, createCodeFixAction, createImportAdder, ImportAdder, registerCodeFix,
     tryGetAutoImportableReferenceFromTypeNode,
-} from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.codefix.js";
 
 const fixId = "inferFromUsage";
 const errorCodes = [
diff --git a/src/services/codefixes/removeAccidentalCallParentheses.ts b/src/services/codefixes/removeAccidentalCallParentheses.ts
index b12146f562..b8de600a32 100644
--- a/src/services/codefixes/removeAccidentalCallParentheses.ts
+++ b/src/services/codefixes/removeAccidentalCallParentheses.ts
@@ -1,5 +1,5 @@
-import { Diagnostics, findAncestor, getTokenAtPosition, isCallExpression, textChanges } from "../_namespaces/ts";
-import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix";
+import { Diagnostics, findAncestor, getTokenAtPosition, isCallExpression, textChanges } from "../_namespaces/ts.js";
+import { createCodeFixActionWithoutFixAll, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "removeAccidentalCallParentheses";
 const errorCodes = [
diff --git a/src/services/codefixes/removeUnnecessaryAwait.ts b/src/services/codefixes/removeUnnecessaryAwait.ts
index 6508b0fc88..fe8b3731dd 100644
--- a/src/services/codefixes/removeUnnecessaryAwait.ts
+++ b/src/services/codefixes/removeUnnecessaryAwait.ts
@@ -1,8 +1,8 @@
 import {
     AwaitKeywordToken, Diagnostics, findPrecedingToken, getLeftmostExpression, getTokenAtPosition, isAwaitExpression,
     isIdentifier, isParenthesizedExpression, Node, SourceFile, SyntaxKind, textChanges, TextSpan, tryCast,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "removeUnnecessaryAwait";
 const errorCodes = [
diff --git a/src/services/codefixes/requireInTs.ts b/src/services/codefixes/requireInTs.ts
index 8bd23cb737..442360fb41 100644
--- a/src/services/codefixes/requireInTs.ts
+++ b/src/services/codefixes/requireInTs.ts
@@ -2,8 +2,8 @@ import {
     cast, Debug, Diagnostics, factory, first, getAllowSyntheticDefaultImports, getTokenAtPosition, Identifier,
     ImportSpecifier, isIdentifier, isObjectBindingPattern, isRequireCall, isVariableDeclaration, isVariableStatement,
     NamedImports, ObjectBindingPattern, Program, SourceFile, StringLiteralLike, textChanges, tryCast, VariableStatement,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "requireInTs";
 const errorCodes = [Diagnostics.require_call_may_be_converted_to_an_import.code];
diff --git a/src/services/codefixes/returnValueCorrect.ts b/src/services/codefixes/returnValueCorrect.ts
index f27cdb2470..f666f8101e 100644
--- a/src/services/codefixes/returnValueCorrect.ts
+++ b/src/services/codefixes/returnValueCorrect.ts
@@ -5,8 +5,8 @@ import {
     isJsxExpression, isLabeledStatement, isVariableLike, length, ModifierFlags, needsParentheses, Node,
     probablyUsesSemicolons, rangeContainsRange, SourceFile, Statement, suppressLeadingAndTrailingTrivia, SymbolFlags,
     SyntaxKind, textChanges, Type, TypeChecker, VariableLikeDeclaration,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "returnValueCorrect";
 const fixIdAddReturnStatement = "fixAddReturnStatement";
diff --git a/src/services/codefixes/splitTypeOnlyImport.ts b/src/services/codefixes/splitTypeOnlyImport.ts
index 1a15a46b61..b1c01c962e 100644
--- a/src/services/codefixes/splitTypeOnlyImport.ts
+++ b/src/services/codefixes/splitTypeOnlyImport.ts
@@ -1,8 +1,8 @@
 import {
     CodeFixContextBase, Debug, Diagnostics, factory, findAncestor, getTokenAtPosition, ImportDeclaration,
     isImportDeclaration, SourceFile, textChanges, TextSpan,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const errorCodes = [Diagnostics.A_type_only_import_can_specify_a_default_import_or_named_bindings_but_not_both.code];
 const fixId = "splitTypeOnlyImport";
diff --git a/src/services/codefixes/useBigintLiteral.ts b/src/services/codefixes/useBigintLiteral.ts
index 4dd3272796..08ed49e38c 100644
--- a/src/services/codefixes/useBigintLiteral.ts
+++ b/src/services/codefixes/useBigintLiteral.ts
@@ -1,7 +1,7 @@
 import {
     Diagnostics, factory, getTokenAtPosition, isNumericLiteral, SourceFile, textChanges, TextSpan, tryCast,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "useBigintLiteral";
 const errorCodes = [
diff --git a/src/services/codefixes/useDefaultImport.ts b/src/services/codefixes/useDefaultImport.ts
index 2ea1b66abe..2dcbc25611 100644
--- a/src/services/codefixes/useDefaultImport.ts
+++ b/src/services/codefixes/useDefaultImport.ts
@@ -2,8 +2,8 @@ import {
     AnyImportSyntax, Diagnostics, Expression, getQuotePreference, getTokenAtPosition, Identifier,
     isExternalModuleReference, isIdentifier, isImportEqualsDeclaration, isNamespaceImport, makeImport, SourceFile,
     textChanges, UserPreferences,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixId = "useDefaultImport";
 const errorCodes = [Diagnostics.Import_may_be_converted_to_a_default_import.code];
diff --git a/src/services/codefixes/wrapJsxInFragment.ts b/src/services/codefixes/wrapJsxInFragment.ts
index 68c8760a18..7e1d7656fe 100644
--- a/src/services/codefixes/wrapJsxInFragment.ts
+++ b/src/services/codefixes/wrapJsxInFragment.ts
@@ -1,8 +1,8 @@
 import {
     BinaryExpression, Diagnostics, factory, getTokenAtPosition, isBinaryExpression, isJsxChild, JsxChild, Node,
     nodeIsMissing, SourceFile, SyntaxKind, textChanges,
-} from "../_namespaces/ts";
-import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix";
+} from "../_namespaces/ts.js";
+import { codeFixAll, createCodeFixAction, registerCodeFix } from "../_namespaces/ts.codefix.js";
 
 const fixID = "wrapJsxInFragment";
 const errorCodes = [Diagnostics.JSX_expressions_must_have_one_parent_element.code];
diff --git a/src/services/completions.ts b/src/services/completions.ts
index f74267058e..e85d363557 100644
--- a/src/services/completions.ts
+++ b/src/services/completions.ts
@@ -58,8 +58,8 @@ import {
     tokenToString, tryCast, tryGetImportFromModuleSpecifier, Type, TypeChecker, TypeElement, TypeFlags,
     typeHasCallOrConstructSignatures, TypeLiteralNode, TypeOnlyAliasDeclaration, unescapeLeadingUnderscores,
     UnionReduction, UnionType, UserPreferences, VariableDeclaration, walkUpParenthesizedExpressions,
-} from "./_namespaces/ts";
-import { StringCompletions } from "./_namespaces/ts.Completions";
+} from "./_namespaces/ts.js";
+import { StringCompletions } from "./_namespaces/ts.Completions.js";
 
 // Exported only for tests
 /** @internal */
diff --git a/src/services/documentHighlights.ts b/src/services/documentHighlights.ts
index fb04985135..e7b8ee533e 100644
--- a/src/services/documentHighlights.ts
+++ b/src/services/documentHighlights.ts
@@ -11,7 +11,7 @@ import {
     isVariableStatement, isWhiteSpaceSingleLine, isYieldExpression, IterationStatement, mapDefined, MethodDeclaration,
     Modifier, ModifierFlags, modifierToFlag, ModuleBlock, Node, ObjectLiteralExpression, ObjectTypeDeclaration, Program,
     Push, ReturnStatement, Set, SourceFile, SwitchStatement, SyntaxKind, ThrowStatement, toArray, toPath, TryStatement,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export interface DocumentHighlights {
     fileName: string;
diff --git a/src/services/documentRegistry.ts b/src/services/documentRegistry.ts
index 9a080872b1..67fa34e9b3 100644
--- a/src/services/documentRegistry.ts
+++ b/src/services/documentRegistry.ts
@@ -4,7 +4,7 @@ import {
     getImpliedNodeFormatForFile, getOrUpdate, getSetExternalModuleIndicator, hasProperty, identity, isArray,
     IScriptSnapshot, isDeclarationFileName, map, Map, MinimalResolutionCacheHost, ModuleKind, Path, ScriptKind,
     ScriptTarget, SourceFile, sourceFileAffectingCompilerOptions, toPath, tracing, updateLanguageServiceSourceFile,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * The document registry represents a store of SourceFile objects that can be shared between
diff --git a/src/services/exportAsModule.ts b/src/services/exportAsModule.ts
index 757f9f7cd3..6993899c50 100644
--- a/src/services/exportAsModule.ts
+++ b/src/services/exportAsModule.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 
 // Here we expose the TypeScript services as an external module
 // so that it may be consumed easily like a node module.
diff --git a/src/services/exportInfoMap.ts b/src/services/exportInfoMap.ts
index b972532905..4b2ff5df0b 100644
--- a/src/services/exportInfoMap.ts
+++ b/src/services/exportInfoMap.ts
@@ -10,7 +10,7 @@ import {
     nodeModulesPathPart, PackageJsonImportFilter, Path, Program, skipAlias, skipOuterExpressions, SourceFile,
     startsWith, Statement, stringContains, stripQuotes, Symbol, SymbolFlags, timestamp, tryCast, TypeChecker,
     unescapeLeadingUnderscores, unmangleScopedPackageName, UserPreferences,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export const enum ImportKind {
diff --git a/src/services/findAllReferences.ts b/src/services/findAllReferences.ts
index 5ef8f6436b..5fe85aa187 100644
--- a/src/services/findAllReferences.ts
+++ b/src/services/findAllReferences.ts
@@ -44,11 +44,11 @@ import {
     SymbolDisplayPart, SymbolDisplayPartKind, SymbolFlags, SymbolId, symbolName, SyntaxKind, textPart, TextSpan,
     tokenToString, tryAddToSet, tryCast, tryGetClassExtendingExpressionWithTypeArguments,
     tryGetImportFromModuleSpecifier, TypeChecker, VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 import {
     createImportTracker, ExportInfo, ExportKind, findModuleReferences, getExportInfo, getImportOrExportSymbol,
     ImportExport, ImportsResult, ImportTracker, ModuleReference,
-} from "./_namespaces/ts.FindAllReferences";
+} from "./_namespaces/ts.FindAllReferences.js";
 
 /** @internal */
 export interface SymbolAndEntries {
diff --git a/src/services/formatting/formatting.ts b/src/services/formatting/formatting.ts
index 0d53a1474d..e10188f7ad 100644
--- a/src/services/formatting/formatting.ts
+++ b/src/services/formatting/formatting.ts
@@ -10,11 +10,11 @@ import {
     nodeIsSynthesized, rangeContainsPositionExclusive, rangeContainsRange, rangeContainsStartEnd,
     rangeOverlapsWithStartEnd, repeatString, SourceFile, SourceFileLike, startEndContainsRange,
     startEndOverlapsWithStartEnd, SyntaxKind, TextChange, TextRange, TriviaSyntaxKind, TypeReferenceNode,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     FormattingContext, FormattingRequestKind, FormattingScanner, getFormattingScanner, Rule, RuleAction, RuleFlags,
     RulesMap, SmartIndenter,
-} from "../_namespaces/ts.formatting";
+} from "../_namespaces/ts.formatting.js";
 
 /** @internal */
 export interface FormatContext {
diff --git a/src/services/formatting/formattingContext.ts b/src/services/formatting/formattingContext.ts
index c42ff32ded..150aa74217 100644
--- a/src/services/formatting/formattingContext.ts
+++ b/src/services/formatting/formattingContext.ts
@@ -1,5 +1,5 @@
-import { TextRangeWithKind } from "../_namespaces/ts.formatting";
-import { Debug, findChildOfKind, FormatCodeSettings, Node, SourceFileLike, SyntaxKind } from "../_namespaces/ts";
+import { TextRangeWithKind } from "../_namespaces/ts.formatting.js";
+import { Debug, findChildOfKind, FormatCodeSettings, Node, SourceFileLike, SyntaxKind } from "../_namespaces/ts.js";
 
 /** @internal */
 export const enum FormattingRequestKind {
diff --git a/src/services/formatting/formattingScanner.ts b/src/services/formatting/formattingScanner.ts
index 5bc687b7a5..f4fd255cad 100644
--- a/src/services/formatting/formattingScanner.ts
+++ b/src/services/formatting/formattingScanner.ts
@@ -1,10 +1,10 @@
 import {
     append, createScanner, Debug, isJsxAttribute, isJsxText, isKeyword, isToken, isTrivia, LanguageVariant, last, Node,
     NodeArray, ScriptTarget, SyntaxKind,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     createTextRangeWithKind, TextRangeWithKind, TextRangeWithTriviaKind, TokenInfo,
-} from "../_namespaces/ts.formatting";
+} from "../_namespaces/ts.formatting.js";
 
 const standardScanner = createScanner(ScriptTarget.Latest, /*skipTrivia*/ false, LanguageVariant.Standard);
 const jsxScanner = createScanner(ScriptTarget.Latest, /*skipTrivia*/ false, LanguageVariant.JSX);
diff --git a/src/services/formatting/rule.ts b/src/services/formatting/rule.ts
index ed4e96232d..44594ce896 100644
--- a/src/services/formatting/rule.ts
+++ b/src/services/formatting/rule.ts
@@ -1,5 +1,5 @@
-import { FormattingContext } from "../_namespaces/ts.formatting";
-import { emptyArray, SyntaxKind } from "../_namespaces/ts";
+import { FormattingContext } from "../_namespaces/ts.formatting.js";
+import { emptyArray, SyntaxKind } from "../_namespaces/ts.js";
 
 /** @internal */
 export interface Rule {
diff --git a/src/services/formatting/rules.ts b/src/services/formatting/rules.ts
index 2a52744322..44c9b70c01 100644
--- a/src/services/formatting/rules.ts
+++ b/src/services/formatting/rules.ts
@@ -1,13 +1,13 @@
 import {
     anyContext, ContextPredicate, FormattingContext, FormattingRequestKind, Rule, RuleAction, RuleFlags,
     TextRangeWithKind, TokenRange,
-} from "../_namespaces/ts.formatting";
+} from "../_namespaces/ts.formatting.js";
 import {
     BinaryExpression, contains, findAncestor, findNextToken, FormatCodeSettings, hasDecorators, isArray,
     isExpressionNode, isFunctionLikeKind, isNumericLiteral, isPropertyAccessExpression, isPropertyDeclaration,
     isPropertySignature, isTrivia, Node, positionIsASICandidate, SemicolonPreference, SyntaxKind, typeKeywords,
     YieldExpression,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 
 /** @internal */
 export interface RuleSpec {
diff --git a/src/services/formatting/rulesMap.ts b/src/services/formatting/rulesMap.ts
index 4cdd1b4ca0..6bd31059fb 100644
--- a/src/services/formatting/rulesMap.ts
+++ b/src/services/formatting/rulesMap.ts
@@ -1,7 +1,7 @@
-import { Debug, every, FormatCodeSettings, FormattingHost, SyntaxKind } from "../_namespaces/ts";
+import { Debug, every, FormatCodeSettings, FormattingHost, SyntaxKind } from "../_namespaces/ts.js";
 import {
     anyContext, FormatContext, FormattingContext, getAllRules, Rule, RuleAction, RuleSpec,
-} from "../_namespaces/ts.formatting";
+} from "../_namespaces/ts.formatting.js";
 
 /** @internal */
 export function getFormatContext(options: FormatCodeSettings, host: FormattingHost): FormatContext {
diff --git a/src/services/formatting/smartIndenter.ts b/src/services/formatting/smartIndenter.ts
index bc52216365..6335190111 100644
--- a/src/services/formatting/smartIndenter.ts
+++ b/src/services/formatting/smartIndenter.ts
@@ -9,8 +9,8 @@ import {
     ObjectBindingPattern, ObjectLiteralExpression, positionBelongsToNode, rangeContainsRange, rangeContainsStartEnd,
     SignatureDeclaration, skipTrivia, SourceFile, SourceFileLike, SyntaxKind, TextRange, TypeAliasDeclaration,
     TypeLiteralNode, TypeReferenceNode, VariableDeclarationList,
-} from "../_namespaces/ts";
-import { getRangeOfEnclosingComment, TextRangeWithKind } from "../_namespaces/ts.formatting";
+} from "../_namespaces/ts.js";
+import { getRangeOfEnclosingComment, TextRangeWithKind } from "../_namespaces/ts.formatting.js";
 
 /** @internal */
 export namespace SmartIndenter {
diff --git a/src/services/getEditsForFileRename.ts b/src/services/getEditsForFileRename.ts
index bdd1ac357d..6fa3efd1fc 100644
--- a/src/services/getEditsForFileRename.ts
+++ b/src/services/getEditsForFileRename.ts
@@ -8,7 +8,7 @@ import {
     moduleSpecifiers, normalizePath, Path, pathIsRelative, Program, PropertyAssignment,
     ResolvedModuleWithFailedLookupLocations, resolveModuleName, SourceFile, SourceFileLike, SourceMapper,
     StringLiteralLike, Symbol, textChanges, TextRange, tryRemoveDirectoryPrefix, UserPreferences,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export function getEditsForFileRename(
diff --git a/src/services/globalThisShim.ts b/src/services/globalThisShim.ts
index 9a8978bdb2..74eacc8387 100644
--- a/src/services/globalThisShim.ts
+++ b/src/services/globalThisShim.ts
@@ -1,4 +1,4 @@
-import { TypeScriptServicesFactory, versionMajorMinor } from "./_namespaces/ts";
+import { TypeScriptServicesFactory, versionMajorMinor } from "./_namespaces/ts.js";
 
 // We polyfill `globalThis` here so re can reliably patch the global scope
 // in the contexts we want to in the same way across script and module formats
diff --git a/src/services/goToDefinition.ts b/src/services/goToDefinition.ts
index 89f9c3ad9f..dc303039cc 100644
--- a/src/services/goToDefinition.ts
+++ b/src/services/goToDefinition.ts
@@ -16,7 +16,7 @@ import {
     resolvePath, ScriptElementKind, SignatureDeclaration, skipAlias, skipTrivia, some, SourceFile, Symbol,
     SymbolDisplay, SymbolFlags, SyntaxKind, textRangeContainsPositionInclusive, TextSpan, tryCast,
     tryGetModuleSpecifierFromDeclaration, Type, TypeChecker, TypeFlags, unescapeLeadingUnderscores,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export function getDefinitionAtPosition(program: Program, sourceFile: SourceFile, position: number, searchOtherFilesOnly?: boolean, stopAtAlias?: boolean): readonly DefinitionInfo[] | undefined {
diff --git a/src/services/importTracker.ts b/src/services/importTracker.ts
index 020bc712d9..879a2277ee 100644
--- a/src/services/importTracker.ts
+++ b/src/services/importTracker.ts
@@ -13,7 +13,7 @@ import {
     Node, nodeSeenTracker, Program, ReadonlySet, some, SourceFile, Statement, StringLiteral, StringLiteralLike, Symbol,
     symbolEscapedNameNoDefault, SymbolFlags, symbolName, SyntaxKind, TypeChecker, ValidImportTypeNode,
     VariableDeclaration, walkUpBindingElementsAndPatterns,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /* Code for finding imports of an exported symbol. Used only by FindAllReferences. */
 
diff --git a/src/services/inlayHints.ts b/src/services/inlayHints.ts
index 2d890d7f31..ed0031e817 100644
--- a/src/services/inlayHints.ts
+++ b/src/services/inlayHints.ts
@@ -12,7 +12,7 @@ import {
     PropertyDeclaration, Signature, skipParentheses, some, Symbol, SymbolFlags, SyntaxKind, textSpanIntersectsWith,
     Type, TypeFormatFlags, unescapeLeadingUnderscores, UserPreferences, usingSingleLineStringWriter,
     VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const maxHintsLength = 30;
 
diff --git a/src/services/jsDoc.ts b/src/services/jsDoc.ts
index edf2e55178..b1e68870fc 100644
--- a/src/services/jsDoc.ts
+++ b/src/services/jsDoc.ts
@@ -13,7 +13,7 @@ import {
     PropertyAssignment, PropertyDeclaration, propertyNamePart, punctuationPart, ScriptElementKind, SourceFile,
     spacePart, startsWith, SymbolDisplayPart, SyntaxKind, TextInsertion, textPart, typeAliasNamePart, TypeChecker,
     typeParameterNamePart, VariableStatement,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const jsDocTagNames = [
     "abstract",
diff --git a/src/services/navigateTo.ts b/src/services/navigateTo.ts
index 0d0f781405..904e08b392 100644
--- a/src/services/navigateTo.ts
+++ b/src/services/navigateTo.ts
@@ -4,7 +4,7 @@ import {
     getTextOfIdentifierOrLiteral, Identifier, ImportClause, ImportEqualsDeclaration, ImportSpecifier,
     isPropertyAccessExpression, isPropertyNameLiteral, NavigateToItem, Node, PatternMatcher, PatternMatchKind, Push,
     ScriptElementKind, SourceFile, SyntaxKind, TypeChecker,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 interface RawNavigateToItem {
     readonly name: string;
diff --git a/src/services/navigationBar.ts b/src/services/navigationBar.ts
index dda82911fb..646ddadc3d 100644
--- a/src/services/navigationBar.ts
+++ b/src/services/navigationBar.ts
@@ -19,7 +19,7 @@ import {
     PropertyAssignment, PropertyDeclaration, PropertyNameLiteral, removeFileExtension, setTextRange,
     ShorthandPropertyAssignment, SourceFile, SpreadAssignment, SyntaxKind, TextSpan, TypeElement,
     unescapeLeadingUnderscores, VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * Matches all whitespace characters in a string. Eg:
diff --git a/src/services/organizeImports.ts b/src/services/organizeImports.ts
index d2643e23ea..70235e0c11 100644
--- a/src/services/organizeImports.ts
+++ b/src/services/organizeImports.ts
@@ -8,7 +8,7 @@ import {
     isStringLiteral, isStringLiteralLike, jsxModeNeedsExplicitImport, LanguageServiceHost, length, map,
     NamedImportBindings, NamedImports, NamespaceImport, Program, Scanner, some, SortedReadonlyArray, SourceFile,
     stableSort, suppressLeadingTrivia, SyntaxKind, textChanges, TransformFlags, tryCast, UserPreferences,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * Organize imports by:
diff --git a/src/services/outliningElementsCollector.ts b/src/services/outliningElementsCollector.ts
index 5a80301e00..abba90e217 100644
--- a/src/services/outliningElementsCollector.ts
+++ b/src/services/outliningElementsCollector.ts
@@ -8,7 +8,7 @@ import {
     JsxFragment, JsxOpeningLikeElement, Node, NodeArray, NoSubstitutionTemplateLiteral, OutliningSpan,
     OutliningSpanKind, ParenthesizedExpression, positionsAreOnSameLine, Push, SignatureDeclaration, SourceFile,
     startsWith, SyntaxKind, TemplateExpression, TextSpan, trimString, trimStringStart, TryStatement,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export function collectElements(sourceFile: SourceFile, cancellationToken: CancellationToken): OutliningSpan[] {
diff --git a/src/services/patternMatcher.ts b/src/services/patternMatcher.ts
index 7b74b5690b..78aefe3323 100644
--- a/src/services/patternMatcher.ts
+++ b/src/services/patternMatcher.ts
@@ -1,7 +1,7 @@
 import {
     CharacterCodes, compareBooleans, compareValues, Comparison, createTextSpan, ESMap, isUnicodeIdentifierStart, last,
     Map, min, ScriptTarget, startsWith, TextSpan,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 // Note(cyrusn): this enum is ordered from strongest match type to weakest match type.
 /** @internal */
diff --git a/src/services/preProcess.ts b/src/services/preProcess.ts
index aef2a955e4..484df8de5f 100644
--- a/src/services/preProcess.ts
+++ b/src/services/preProcess.ts
@@ -1,7 +1,7 @@
 import {
     FileReference, isKeyword, lastOrUndefined, length, noop, PragmaContext, PreProcessedFileInfo, processCommentPragmas,
     processPragmasIntoFields, scanner, ScriptTarget, SyntaxKind,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export function preProcessFile(sourceText: string, readImportFiles = true, detectJavaScriptImports = false): PreProcessedFileInfo {
     const pragmaContext: PragmaContext = {
diff --git a/src/services/refactorProvider.ts b/src/services/refactorProvider.ts
index 3fb1751875..a12777f5e4 100644
--- a/src/services/refactorProvider.ts
+++ b/src/services/refactorProvider.ts
@@ -1,7 +1,7 @@
 import {
     ApplicableRefactorInfo, arrayFrom, flatMapIterator, Map, Refactor, RefactorContext, RefactorEditInfo,
-} from "./_namespaces/ts";
-import { refactorKindBeginsWith } from "./_namespaces/ts.refactor";
+} from "./_namespaces/ts.js";
+import { refactorKindBeginsWith } from "./_namespaces/ts.refactor.js";
 
 // A map with the refactor code as key, the refactor itself as value
 // e.g.  nonSuggestableRefactors[refactorCode] -> the refactor you want
diff --git a/src/services/refactors/addOrRemoveBracesToArrowFunction.ts b/src/services/refactors/addOrRemoveBracesToArrowFunction.ts
index d0548b1d78..7c0486e6d9 100644
--- a/src/services/refactors/addOrRemoveBracesToArrowFunction.ts
+++ b/src/services/refactors/addOrRemoveBracesToArrowFunction.ts
@@ -4,10 +4,10 @@ import {
     getLocaleSpecificMessage, getTokenAtPosition, isArrowFunction, isBlock, isExpression, isReturnStatement,
     needsParentheses, rangeContainsRange, RefactorContext, RefactorEditInfo, ReturnStatement, SourceFile, SyntaxKind,
     textChanges,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     isRefactorErrorInfo, RefactorErrorInfo, refactorKindBeginsWith, registerRefactor,
-} from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Add or remove braces in an arrow function";
 const refactorDescription = Diagnostics.Add_or_remove_braces_in_an_arrow_function.message;
diff --git a/src/services/refactors/convertArrowFunctionOrFunctionExpression.ts b/src/services/refactors/convertArrowFunctionOrFunctionExpression.ts
index 416f7caf3c..5da53e6c5c 100644
--- a/src/services/refactors/convertArrowFunctionOrFunctionExpression.ts
+++ b/src/services/refactors/convertArrowFunctionOrFunctionExpression.ts
@@ -8,8 +8,8 @@ import {
     Node, Program, rangeContainsRange, RefactorActionInfo, RefactorContext, RefactorEditInfo, ReturnStatement,
     SourceFile, Statement, suppressLeadingAndTrailingTrivia, suppressLeadingTrivia, SyntaxKind, textChanges,
     TypeChecker, VariableDeclaration, VariableDeclarationList, VariableStatement,
-} from "../_namespaces/ts";
-import { refactorKindBeginsWith, registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { refactorKindBeginsWith, registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Convert arrow function or function expression";
 const refactorDescription = getLocaleSpecificMessage(Diagnostics.Convert_arrow_function_or_function_expression);
diff --git a/src/services/refactors/convertExport.ts b/src/services/refactors/convertExport.ts
index 3e745933a8..426c9a64c0 100644
--- a/src/services/refactors/convertExport.ts
+++ b/src/services/refactors/convertExport.ts
@@ -7,8 +7,8 @@ import {
     isSourceFile, isStringLiteral, makeImport, ModifierFlags, NamespaceDeclaration, Node, NodeFlags, Program,
     PropertyAccessExpression, QuotePreference, quotePreferenceFromString, RefactorContext, RefactorEditInfo, SourceFile,
     Symbol, SyntaxKind, textChanges, TypeAliasDeclaration, TypeChecker, VariableStatement,
-} from "../_namespaces/ts";
-import { isRefactorErrorInfo, RefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { isRefactorErrorInfo, RefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Convert export";
 
diff --git a/src/services/refactors/convertImport.ts b/src/services/refactors/convertImport.ts
index 40fa29ea4b..d3edbbd194 100644
--- a/src/services/refactors/convertImport.ts
+++ b/src/services/refactors/convertImport.ts
@@ -6,8 +6,8 @@ import {
     isPropertyAccessOrQualifiedName, isShorthandPropertyAssignment, isStringLiteral, Map, NamedImports, NamespaceImport,
     Program, PropertyAccessExpression, QualifiedName, RefactorContext, RefactorEditInfo, ScriptTarget, Set, some,
     SourceFile, Symbol, SymbolFlags, SyntaxKind, textChanges, TypeChecker,
-} from "../_namespaces/ts";
-import { isRefactorErrorInfo, RefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { isRefactorErrorInfo, RefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Convert import";
 
diff --git a/src/services/refactors/convertOverloadListToSingleSignature.ts b/src/services/refactors/convertOverloadListToSingleSignature.ts
index ebe0535e00..917dabfbd9 100644
--- a/src/services/refactors/convertOverloadListToSingleSignature.ts
+++ b/src/services/refactors/convertOverloadListToSingleSignature.ts
@@ -5,8 +5,8 @@ import {
     length, map, mapDefined, MethodDeclaration, MethodSignature, NamedTupleMember, Node, NodeArray,
     ParameterDeclaration, Program, rangeContainsPosition, RefactorContext, RefactorEditInfo, setEmitFlags,
     setSyntheticLeadingComments, setTextRange, some, SourceFile, SyntaxKind, textChanges, TupleTypeNode,
-} from "../_namespaces/ts";
-import { registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Convert overload list to single signature";
 const refactorDescription = Diagnostics.Convert_overload_list_to_single_signature.message;
diff --git a/src/services/refactors/convertParamsToDestructuredObject.ts b/src/services/refactors/convertParamsToDestructuredObject.ts
index a4072a335b..48283e0825 100644
--- a/src/services/refactors/convertParamsToDestructuredObject.ts
+++ b/src/services/refactors/convertParamsToDestructuredObject.ts
@@ -17,8 +17,8 @@ import {
     RefactorContext, RefactorEditInfo, SemanticMeaning, ShorthandPropertyAssignment, sortAndDeduplicate, SourceFile,
     suppressLeadingAndTrailingTrivia, Symbol, SyntaxKind, textChanges, tryCast, TypeChecker, TypeLiteralNode, TypeNode,
     VariableDeclaration,
-} from "../_namespaces/ts";
-import { registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Convert parameters to destructured object";
 const minimumParameterLength = 1;
diff --git a/src/services/refactors/convertStringOrTemplateLiteral.ts b/src/services/refactors/convertStringOrTemplateLiteral.ts
index f3bff71ac5..afbedfb435 100644
--- a/src/services/refactors/convertStringOrTemplateLiteral.ts
+++ b/src/services/refactors/convertStringOrTemplateLiteral.ts
@@ -5,8 +5,8 @@ import {
     isParenthesizedExpression, isStringLiteral, isStringLiteralLike, isTemplateExpression, isTemplateHead,
     isTemplateMiddle, map, Node, ParenthesizedExpression, RefactorContext, RefactorEditInfo, SourceFile, SyntaxKind,
     TemplateHead, TemplateMiddle, TemplateSpan, TemplateTail, textChanges, Token,
-} from "../_namespaces/ts";
-import { registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Convert to template string";
 const refactorDescription = getLocaleSpecificMessage(Diagnostics.Convert_to_template_string);
diff --git a/src/services/refactors/convertToOptionalChainExpression.ts b/src/services/refactors/convertToOptionalChainExpression.ts
index 9f327a1a09..2a673f8142 100644
--- a/src/services/refactors/convertToOptionalChainExpression.ts
+++ b/src/services/refactors/convertToOptionalChainExpression.ts
@@ -7,8 +7,8 @@ import {
     isReturnStatement, isStringOrNumericLiteralLike, isVariableStatement, Node, PropertyAccessExpression,
     RefactorContext, RefactorEditInfo, ReturnStatement, skipParentheses, SourceFile, SyntaxKind, textChanges, TextSpan,
     TypeChecker, VariableStatement,
-} from "../_namespaces/ts";
-import { isRefactorErrorInfo, RefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { isRefactorErrorInfo, RefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Convert to optional chain expression";
 const convertToOptionalChainExpressionMessage = getLocaleSpecificMessage(Diagnostics.Convert_to_optional_chain_expression);
diff --git a/src/services/refactors/extractSymbol.ts b/src/services/refactors/extractSymbol.ts
index a49c9f248d..eb6d1eb0fe 100644
--- a/src/services/refactors/extractSymbol.ts
+++ b/src/services/refactors/extractSymbol.ts
@@ -25,8 +25,8 @@ import {
     StringLiteral, suppressLeadingAndTrailingTrivia, Symbol, SymbolFlags, SyntaxKind, textChanges, TextRange, TextSpan,
     textSpanEnd, TryStatement, Type, TypeChecker, TypeElement, TypeFlags, TypeLiteralNode, TypeNode, TypeParameter,
     TypeParameterDeclaration, VariableDeclaration, visitEachChild, visitNode, visitNodes, VisitResult,
-} from "../_namespaces/ts";
-import { refactorKindBeginsWith, registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { refactorKindBeginsWith, registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Extract Symbol";
 
diff --git a/src/services/refactors/extractType.ts b/src/services/refactors/extractType.ts
index a026a10914..bce4a05048 100644
--- a/src/services/refactors/extractType.ts
+++ b/src/services/refactors/extractType.ts
@@ -9,8 +9,8 @@ import {
     Map, Node, nodeOverlapsWithStartEnd, pushIfUnique, rangeContainsStartEnd, RefactorContext, RefactorEditInfo,
     setEmitFlags, setTextRange, skipTrivia, SourceFile, Statement, SymbolFlags, textChanges, TextRange, TypeChecker,
     TypeElement, TypeNode, TypeParameterDeclaration,
-} from "../_namespaces/ts";
-import { isRefactorErrorInfo, RefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { isRefactorErrorInfo, RefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Extract type";
 
diff --git a/src/services/refactors/generateGetAccessorAndSetAccessor.ts b/src/services/refactors/generateGetAccessorAndSetAccessor.ts
index d8d70a1ea3..2da5a68e21 100644
--- a/src/services/refactors/generateGetAccessorAndSetAccessor.ts
+++ b/src/services/refactors/generateGetAccessorAndSetAccessor.ts
@@ -1,8 +1,8 @@
 import {
     ApplicableRefactorInfo, codefix, Debug, Diagnostics, emptyArray, getRenameLocation, isIdentifier, isParameter,
     RefactorContext,
-} from "../_namespaces/ts";
-import { isRefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { isRefactorErrorInfo, registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const actionName = "Generate 'get' and 'set' accessors";
 const actionDescription = Diagnostics.Generate_get_and_set_accessors.message;
diff --git a/src/services/refactors/inferFunctionReturnType.ts b/src/services/refactors/inferFunctionReturnType.ts
index c81a08bf4b..41718c0982 100644
--- a/src/services/refactors/inferFunctionReturnType.ts
+++ b/src/services/refactors/inferFunctionReturnType.ts
@@ -3,10 +3,10 @@ import {
     FunctionDeclaration, FunctionExpression, getLocaleSpecificMessage, getTokenAtPosition, isArrowFunction, isBlock,
     isInJSFile, mapDefined, MethodDeclaration, Node, NodeBuilderFlags, RefactorContext, RefactorEditInfo, SourceFile,
     SyntaxKind, textChanges, Type, TypeChecker, TypeNode,
-} from "../_namespaces/ts";
+} from "../_namespaces/ts.js";
 import {
     isRefactorErrorInfo, RefactorErrorInfo, refactorKindBeginsWith, registerRefactor,
-} from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Infer function return type";
 const refactorDescription = Diagnostics.Infer_function_return_type.message;
diff --git a/src/services/refactors/moveToNewFile.ts b/src/services/refactors/moveToNewFile.ts
index 9adbd24a7c..f1ee459bd7 100644
--- a/src/services/refactors/moveToNewFile.ts
+++ b/src/services/refactors/moveToNewFile.ts
@@ -20,8 +20,8 @@ import {
     RequireVariableStatement, ScriptTarget, skipAlias, some, SourceFile, Statement, StringLiteralLike, Symbol,
     SymbolFlags, symbolNameNoDefault, SyntaxKind, takeWhile, textChanges, TransformFlags, tryCast, TypeAliasDeclaration,
     TypeChecker, TypeNode, UserPreferences, VariableDeclaration, VariableDeclarationList, VariableStatement,
-} from "../_namespaces/ts";
-import { registerRefactor } from "../_namespaces/ts.refactor";
+} from "../_namespaces/ts.js";
+import { registerRefactor } from "../_namespaces/ts.refactor.js";
 
 const refactorName = "Move to a new file";
 const description = getLocaleSpecificMessage(Diagnostics.Move_to_a_new_file);
diff --git a/src/services/rename.ts b/src/services/rename.ts
index 7508c150d4..047f02e0f4 100644
--- a/src/services/rename.ts
+++ b/src/services/rename.ts
@@ -8,7 +8,7 @@ import {
     RenameInfo, RenameInfoFailure, RenameInfoSuccess, ScriptElementKind, ScriptElementKindModifier, some, SourceFile,
     StringLiteralLike, stripQuotes, Symbol, SymbolDisplay, SymbolFlags, SyntaxKind, tryGetImportFromModuleSpecifier,
     tryRemoveSuffix, TypeChecker, TypeFlags, UnionType, UserPreferences,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export function getRenameInfo(program: Program, sourceFile: SourceFile, position: number, preferences: UserPreferences): RenameInfo {
@@ -53,7 +53,7 @@ function getRenameInfoForNode(
         return getRenameInfoError(Diagnostics.You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library);
     }
 
-    // Cannot rename `default` as in `import { default as foo } from "./someModule";
+    // Cannot rename `default` as in `import { default as foo } from "./someModule.js";
     if (isIdentifier(node) && node.originalKeywordKind === SyntaxKind.DefaultKeyword && symbol.parent && symbol.parent.flags & SymbolFlags.Module) {
         return undefined;
     }
diff --git a/src/services/services.ts b/src/services/services.ts
index 4872a6afb5..c1afcc4bab 100644
--- a/src/services/services.ts
+++ b/src/services/services.ts
@@ -1,6 +1,6 @@
-import * as ts from "./_namespaces/ts";
-import * as NavigateTo from "./_namespaces/ts.NavigateTo";
-import * as NavigationBar from "./_namespaces/ts.NavigationBar";
+import * as ts from "./_namespaces/ts.js";
+import * as NavigateTo from "./_namespaces/ts.NavigateTo.js";
+import * as NavigationBar from "./_namespaces/ts.NavigationBar.js";
 import {
     __String, ApplicableRefactorInfo, ApplyCodeActionCommandResult, AssignmentDeclarationKind, BaseType,
     BinaryExpression, BreakpointResolver, CallHierarchy, CallHierarchyIncomingCall, CallHierarchyItem,
@@ -55,7 +55,7 @@ import {
     TransientSymbol, Type, TypeChecker, TypeFlags, TypeNode, TypeParameter, TypePredicate, TypeReference,
     typeToDisplayParts, UnderscoreEscapedMap, UnionOrIntersectionType, UnionType, updateSourceFile, UserPreferences,
     VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** The version of the language service API */
 export const servicesVersion = "0.8";
diff --git a/src/services/shims.ts b/src/services/shims.ts
index 6303302620..01ac32d57a 100644
--- a/src/services/shims.ts
+++ b/src/services/shims.ts
@@ -11,7 +11,7 @@ import {
     ResolvedTypeReferenceDirective, resolveModuleName, resolveTypeReferenceDirective, ScriptKind,
     SemanticClassificationFormat, servicesVersion, SignatureHelpItemsOptions, TextChangeRange, TextRange, TextSpan,
     ThrottledCancellationToken, timestamp, toFileNameLowerCase, toPath, TypeAcquisition, UserPreferences,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 //
 // Copyright (c) Microsoft Corporation.  All rights reserved.
diff --git a/src/services/signatureHelp.ts b/src/services/signatureHelp.ts
index cf672d0699..3d744f6538 100644
--- a/src/services/signatureHelp.ts
+++ b/src/services/signatureHelp.ts
@@ -12,7 +12,7 @@ import {
     SignatureHelpItem, SignatureHelpItems, SignatureHelpParameter, SignatureHelpTriggerReason, skipTrivia, SourceFile,
     spacePart, Symbol, SymbolDisplayPart, symbolToDisplayParts, SyntaxKind, TaggedTemplateExpression,
     TemplateExpression, TextSpan, TransientSymbol, Type, TypeChecker, TypeParameter,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const enum InvocationKind { Call, TypeArgs, Contextual }
 interface CallInvocation { readonly kind: InvocationKind.Call; readonly node: CallLikeExpression; }
diff --git a/src/services/smartSelection.ts b/src/services/smartSelection.ts
index 2abdce3d2c..a930862a34 100644
--- a/src/services/smartSelection.ts
+++ b/src/services/smartSelection.ts
@@ -6,7 +6,7 @@ import {
     isTemplateMiddleOrTemplateTail, isTemplateSpan, isTemplateTail, isVariableDeclaration, isVariableDeclarationList,
     isVariableStatement, last, Node, or, parseNodeFactory, positionsAreOnSameLine, SelectionRange, setTextRangePosEnd,
     singleOrUndefined, SourceFile, SyntaxKind, SyntaxList, textSpanIntersectsWithPosition, textSpansEqual,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */
 export function getSmartSelectionRange(pos: number, sourceFile: SourceFile): SelectionRange {
diff --git a/src/services/sourcemaps.ts b/src/services/sourcemaps.ts
index 73079ef532..cdcec97e07 100644
--- a/src/services/sourcemaps.ts
+++ b/src/services/sourcemaps.ts
@@ -1,11 +1,11 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 import {
     base64decode, computeLineAndCharacterOfPosition, createDocumentPositionMapper, createGetCanonicalFileName,
     DocumentPosition, DocumentPositionMapper, DocumentPositionMapperHost, Extension,
     getDeclarationEmitOutputFilePathWorker, getDirectoryPath, getLineInfo, getLineStarts, getNormalizedAbsolutePath,
     identitySourceMapConsumer, isDeclarationFileName, isString, LineAndCharacter, LineInfo, Map, outFile, Program,
     removeFileExtension, SourceFileLike, sys, tryGetSourceMappingURL, tryParseRawSourceMap,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const base64UrlRegExp = /^data:(?:application\/json(?:;charset=[uU][tT][fF]-8);base64,([A-Za-z0-9+\/=]+)$)?/;
 
diff --git a/src/services/stringCompletions.ts b/src/services/stringCompletions.ts
index 2238e707bd..d0f1c6f7da 100644
--- a/src/services/stringCompletions.ts
+++ b/src/services/stringCompletions.ts
@@ -23,11 +23,11 @@ import {
     tryFileExists, tryGetDirectories, tryGetExtensionFromPath, tryParsePattern, tryReadDirectory,
     tryRemoveDirectoryPrefix, tryRemovePrefix, Type, TypeChecker, TypeFlags, UnionTypeNode, unmangleScopedPackageName,
     UserPreferences, walkUpParenthesizedExpressions, walkUpParenthesizedTypes,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 import {
     CompletionKind, createCompletionDetails, createCompletionDetailsForSymbol, getCompletionEntriesFromSymbols,
     getPropertiesForObjectExpression, Log, SortText,
-} from "./_namespaces/ts.Completions";
+} from "./_namespaces/ts.Completions.js";
 
 interface NameAndKindSet {
     add(value: NameAndKind): void;
diff --git a/src/services/suggestionDiagnostics.ts b/src/services/suggestionDiagnostics.ts
index c56c8b73a2..5bbd17ef89 100644
--- a/src/services/suggestionDiagnostics.ts
+++ b/src/services/suggestionDiagnostics.ts
@@ -9,7 +9,7 @@ import {
     isRequireCall, isReturnStatement, isSourceFileJS, isStringLiteral, isVariableDeclaration, isVariableStatement, Map,
     MethodDeclaration, ModuleKind, Node, NodeFlags, Program, programContainsEsModules, PropertyAccessExpression, Push,
     ReturnStatement, skipAlias, some, SourceFile, SyntaxKind, TypeChecker, VariableStatement,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const visitedNestedConvertibleFunctions = new Map<string, true>();
 
diff --git a/src/services/symbolDisplay.ts b/src/services/symbolDisplay.ts
index 78d07e625d..ebdfcbdf4e 100644
--- a/src/services/symbolDisplay.ts
+++ b/src/services/symbolDisplay.ts
@@ -17,7 +17,7 @@ import {
     signatureToDisplayParts, some, SourceFile, spacePart, Symbol, SymbolDisplayPart, SymbolDisplayPartKind, SymbolFlags,
     SymbolFormatFlags, symbolToDisplayParts, SyntaxKind, TaggedTemplateExpression, textOrKeywordPart, textPart,
     TransientSymbol, Type, TypeChecker, TypeFormatFlags, TypeParameter, typeToDisplayParts, VariableDeclaration,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 const symbolDisplayNodeBuilderFlags = NodeBuilderFlags.OmitParameterModifiers | NodeBuilderFlags.IgnoreErrors | NodeBuilderFlags.UseAliasDefinedOutsideCurrentScope;
 
diff --git a/src/services/textChanges.ts b/src/services/textChanges.ts
index 2ddc725e83..0b260270cd 100644
--- a/src/services/textChanges.ts
+++ b/src/services/textChanges.ts
@@ -26,7 +26,7 @@ import {
     SourceFileLike, stableSort, Statement, stringContainsAt, Symbol, SyntaxKind, TextChange, TextRange, textSpanEnd,
     Token, tokenToString, TransformationContext, TypeLiteralNode, TypeNode, TypeParameterDeclaration, UserPreferences,
     VariableDeclaration, VariableStatement, visitEachChild, visitNodes, Visitor,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * Currently for simplicity we store recovered positions on the node itself.
diff --git a/src/services/transform.ts b/src/services/transform.ts
index 04ad279c73..d180ef5835 100644
--- a/src/services/transform.ts
+++ b/src/services/transform.ts
@@ -2,7 +2,7 @@ import {
     CompilerOptions, concatenate, DiagnosticWithLocation, factory, fixupCompilerOptions, isArray, Node,
     TransformationResult,
     TransformerFactory, transformNodes,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /**
  * Transform one or more nodes using the supplied transformers.
diff --git a/src/services/transpile.ts b/src/services/transpile.ts
index 47c881cae0..12c95fe4b0 100644
--- a/src/services/transpile.ts
+++ b/src/services/transpile.ts
@@ -4,7 +4,7 @@ import {
     Diagnostic, fileExtensionIs, filter, forEachEntry, getDefaultCompilerOptions, getEmitScriptTarget, getEntries,
     getImpliedNodeFormatForFile, getNewLineCharacter, getSetExternalModuleIndicator, hasProperty, isString, Map,
     MapLike, normalizePath, optionDeclarations, parseCustomTypeOption, toPath, transpileOptionValueCompilerOptions,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 export interface TranspileOptions {
     compilerOptions?: CompilerOptions;
diff --git a/src/services/types.ts b/src/services/types.ts
index 3b621f2260..3c86f2d31a 100644
--- a/src/services/types.ts
+++ b/src/services/types.ts
@@ -6,9 +6,9 @@ import {
     Program, ProjectReference, ResolvedModule, ResolvedModuleWithFailedLookupLocations, ResolvedProjectReference,
     ResolvedTypeReferenceDirective, ScriptKind, Set, SourceFile, SourceFileLike, SourceMapper, Symbol, SymlinkCache,
     TextChangeRange, textChanges, TextRange, TextSpan, UserPreferences,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface Node {
         getSourceFile(): SourceFile;
@@ -38,21 +38,21 @@ declare module "../compiler/types" {
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface Identifier {
         readonly text: string;
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface PrivateIdentifier {
         readonly text: string;
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface Symbol {
         readonly name: string;
@@ -69,7 +69,7 @@ declare module "../compiler/types" {
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface Type {
         getFlags(): TypeFlags;
@@ -101,14 +101,14 @@ declare module "../compiler/types" {
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface TypeReference {
         typeArguments?: readonly Type[];
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface Signature {
         getDeclaration(): SignatureDeclaration;
@@ -121,7 +121,7 @@ declare module "../compiler/types" {
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface SourceFile {
         /** @internal */ version: string;
@@ -140,14 +140,14 @@ declare module "../compiler/types" {
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface SourceFileLike {
         getLineAndCharacterOfPosition(pos: number): LineAndCharacter;
     }
 }
 
-declare module "../compiler/types" {
+declare module "../compiler/types.js" {
     // Module transform: converted from interface augmentation
     export interface SourceMapSource {
         getLineAndCharacterOfPosition(pos: number): LineAndCharacter;
diff --git a/src/services/utilities.ts b/src/services/utilities.ts
index 1bcf74c162..d6a05d653d 100644
--- a/src/services/utilities.ts
+++ b/src/services/utilities.ts
@@ -58,7 +58,7 @@ import {
     TextRange, TextSpan, textSpanContainsPosition, textSpanContainsTextSpan, textSpanEnd, Token, tokenToString,
     TransientSymbol, tryCast, Type, TypeChecker, TypeFormatFlags, TypeNode, TypeOfExpression, TypeQueryNode,
     unescapeLeadingUnderscores, UserPreferences, VariableDeclaration, visitEachChild, VoidExpression, YieldExpression,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 /** @internal */ // Don't expose that we use this
 // Based on lib.es6.d.ts
diff --git a/src/testRunner/_namespaces/FourSlash.ts b/src/testRunner/_namespaces/FourSlash.ts
index b314d7d2e2..d01ed68cee 100644
--- a/src/testRunner/_namespaces/FourSlash.ts
+++ b/src/testRunner/_namespaces/FourSlash.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the FourSlash namespace. */
 
-export * from "../../harness/_namespaces/FourSlash";
-export * from "../fourslashRef";
+export * from "../../harness/_namespaces/FourSlash.js";
+export * from "../fourslashRef.js";
diff --git a/src/testRunner/_namespaces/Harness.Parallel.Host.ts b/src/testRunner/_namespaces/Harness.Parallel.Host.ts
index 8104cc9ecf..d8ebbf3197 100644
--- a/src/testRunner/_namespaces/Harness.Parallel.Host.ts
+++ b/src/testRunner/_namespaces/Harness.Parallel.Host.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the Harness.Parallel.Host namespace. */
 
-export * from "../parallel/host";
+export * from "../parallel/host.js";
diff --git a/src/testRunner/_namespaces/Harness.Parallel.Worker.ts b/src/testRunner/_namespaces/Harness.Parallel.Worker.ts
index ecca4b9659..de2a725adb 100644
--- a/src/testRunner/_namespaces/Harness.Parallel.Worker.ts
+++ b/src/testRunner/_namespaces/Harness.Parallel.Worker.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the Harness.Parallel.Worker namespace. */
 
-export * from "../parallel/worker";
+export * from "../parallel/worker.js";
diff --git a/src/testRunner/_namespaces/Harness.Parallel.ts b/src/testRunner/_namespaces/Harness.Parallel.ts
index 10087db755..8f2b792e40 100644
--- a/src/testRunner/_namespaces/Harness.Parallel.ts
+++ b/src/testRunner/_namespaces/Harness.Parallel.ts
@@ -1,7 +1,7 @@
 /* Generated file to emulate the Harness.Parallel namespace. */
 
-export * from "../parallel/shared";
-import * as Host from "./Harness.Parallel.Host";
+export * from "../parallel/shared.js";
+import * as Host from "./Harness.Parallel.Host.js";
 export { Host };
-import * as Worker from "./Harness.Parallel.Worker";
+import * as Worker from "./Harness.Parallel.Worker.js";
 export { Worker };
diff --git a/src/testRunner/_namespaces/Harness.ts b/src/testRunner/_namespaces/Harness.ts
index aff7e44d98..29d7e214f8 100644
--- a/src/testRunner/_namespaces/Harness.ts
+++ b/src/testRunner/_namespaces/Harness.ts
@@ -1,16 +1,16 @@
 /* Generated file to emulate the Harness namespace. */
 
-export * from "../../harness/_namespaces/Harness";
-export * from "../../loggedIO/_namespaces/Harness";
+export * from "../../harness/_namespaces/Harness.js";
+export * from "../../loggedIO/_namespaces/Harness.js";
 
-import * as Parallel from "./Harness.Parallel";
+import * as Parallel from "./Harness.Parallel.js";
 export { Parallel };
 
-export * from "../fourslashRunner";
-export * from "../compilerRunner";
-export * from "../externalCompileRunner";
-export * from "../test262Runner";
-export * from "../runner";
+export * from "../fourslashRunner.js";
+export * from "../compilerRunner.js";
+export * from "../externalCompileRunner.js";
+export * from "../test262Runner.js";
+export * from "../runner.js";
 
 
 // Must be after runner.
diff --git a/src/testRunner/_namespaces/Playback.ts b/src/testRunner/_namespaces/Playback.ts
index 756f8f0e4e..4a6591848f 100644
--- a/src/testRunner/_namespaces/Playback.ts
+++ b/src/testRunner/_namespaces/Playback.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the Playback namespace. */
 
-export * from "../../loggedIO/_namespaces/Playback";
-export * from "../playbackRef";
+export * from "../../loggedIO/_namespaces/Playback.js";
+export * from "../playbackRef.js";
diff --git a/src/testRunner/_namespaces/RWC.ts b/src/testRunner/_namespaces/RWC.ts
index a2d6ebf4fa..45a1e515e7 100644
--- a/src/testRunner/_namespaces/RWC.ts
+++ b/src/testRunner/_namespaces/RWC.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the RWC namespace. */
 
-export * from "../rwcRunner";
+export * from "../rwcRunner.js";
diff --git a/src/testRunner/_namespaces/Utils.ts b/src/testRunner/_namespaces/Utils.ts
index 69e9f1e29d..390feebd4c 100644
--- a/src/testRunner/_namespaces/Utils.ts
+++ b/src/testRunner/_namespaces/Utils.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the Utils namespace. */
 
-export * from "../../harness/_namespaces/Utils";
-export * from "../utilsRef";
+export * from "../../harness/_namespaces/Utils.js";
+export * from "../utilsRef.js";
diff --git a/src/testRunner/_namespaces/compiler.ts b/src/testRunner/_namespaces/compiler.ts
index b0836c2749..04dad0a148 100644
--- a/src/testRunner/_namespaces/compiler.ts
+++ b/src/testRunner/_namespaces/compiler.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the compiler namespace. */
 
-export * from "../../harness/_namespaces/compiler";
-export * from "../compilerRef";
+export * from "../../harness/_namespaces/compiler.js";
+export * from "../compilerRef.js";
diff --git a/src/testRunner/_namespaces/documents.ts b/src/testRunner/_namespaces/documents.ts
index ceeb38f29c..4b4defc88e 100644
--- a/src/testRunner/_namespaces/documents.ts
+++ b/src/testRunner/_namespaces/documents.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the documents namespace. */
 
-export * from "../../harness/_namespaces/documents";
-export * from "../documentsRef";
+export * from "../../harness/_namespaces/documents.js";
+export * from "../documentsRef.js";
diff --git a/src/testRunner/_namespaces/evaluator.ts b/src/testRunner/_namespaces/evaluator.ts
index 26676e38c3..783feb45f5 100644
--- a/src/testRunner/_namespaces/evaluator.ts
+++ b/src/testRunner/_namespaces/evaluator.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the evaluator namespace. */
 
-export * from "../../harness/_namespaces/evaluator";
-export * from "../evaluatorRef";
+export * from "../../harness/_namespaces/evaluator.js";
+export * from "../evaluatorRef.js";
diff --git a/src/testRunner/_namespaces/fakes.ts b/src/testRunner/_namespaces/fakes.ts
index f783f8f72b..212daf6edc 100644
--- a/src/testRunner/_namespaces/fakes.ts
+++ b/src/testRunner/_namespaces/fakes.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the fakes namespace. */
 
-export * from "../../harness/_namespaces/fakes";
-export * from "../fakesRef";
+export * from "../../harness/_namespaces/fakes.js";
+export * from "../fakesRef.js";
diff --git a/src/testRunner/_namespaces/project.ts b/src/testRunner/_namespaces/project.ts
index c9d999adbf..fe75d6e294 100644
--- a/src/testRunner/_namespaces/project.ts
+++ b/src/testRunner/_namespaces/project.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the project namespace. */
 
-export * from "../projectsRunner";
+export * from "../projectsRunner.js";
diff --git a/src/testRunner/_namespaces/ts.projectSystem.ts b/src/testRunner/_namespaces/ts.projectSystem.ts
index 2723fee96d..4ac2e17148 100644
--- a/src/testRunner/_namespaces/ts.projectSystem.ts
+++ b/src/testRunner/_namespaces/ts.projectSystem.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.projectSystem namespace. */
 
-export * from "../unittests/tsserver/helpers";
+export * from "../unittests/tsserver/helpers.js";
diff --git a/src/testRunner/_namespaces/ts.server.ts b/src/testRunner/_namespaces/ts.server.ts
index 225d9d4e6a..b439fed4ca 100644
--- a/src/testRunner/_namespaces/ts.server.ts
+++ b/src/testRunner/_namespaces/ts.server.ts
@@ -1,8 +1,8 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-export * from "../../server/_namespaces/ts.server";
-export * from "../../webServer/_namespaces/ts.server";
-export * from "../../typingsInstallerCore/_namespaces/ts.server";
-export * from "../../harness/_namespaces/ts.server";
-export * from "../../loggedIO/_namespaces/ts.server";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+export * from "../../server/_namespaces/ts.server.js";
+export * from "../../webServer/_namespaces/ts.server.js";
+export * from "../../typingsInstallerCore/_namespaces/ts.server.js";
+export * from "../../harness/_namespaces/ts.server.js";
+export * from "../../loggedIO/_namespaces/ts.server.js";
diff --git a/src/testRunner/_namespaces/ts.ts b/src/testRunner/_namespaces/ts.ts
index 060d53dcda..6187d4de34 100644
--- a/src/testRunner/_namespaces/ts.ts
+++ b/src/testRunner/_namespaces/ts.ts
@@ -1,24 +1,24 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../executeCommandLine/_namespaces/ts";
-export * from "../../services/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../server/_namespaces/ts";
-export * from "../../webServer/_namespaces/ts";
-export * from "../../typingsInstallerCore/_namespaces/ts";
-export * from "../../deprecatedCompat/_namespaces/ts";
-export * from "../../harness/_namespaces/ts";
-export * from "../../loggedIO/_namespaces/ts";
-import * as tscWatch from "./ts.tscWatch";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../executeCommandLine/_namespaces/ts.js";
+export * from "../../services/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../server/_namespaces/ts.js";
+export * from "../../webServer/_namespaces/ts.js";
+export * from "../../typingsInstallerCore/_namespaces/ts.js";
+export * from "../../deprecatedCompat/_namespaces/ts.js";
+export * from "../../harness/_namespaces/ts.js";
+export * from "../../loggedIO/_namespaces/ts.js";
+import * as tscWatch from "./ts.tscWatch.js";
 export { tscWatch };
-import * as server from "./ts.server";
+import * as server from "./ts.server.js";
 export { server };
-import * as projectSystem from "./ts.projectSystem";
+import * as projectSystem from "./ts.projectSystem.js";
 export { projectSystem };
-import * as textStorage from "./ts.textStorage";
+import * as textStorage from "./ts.textStorage.js";
 export { textStorage };
-export * from "../unittests/helpers";
-export * from "../unittests/services/extract/helpers";
-export * from "../unittests/tsbuild/helpers";
-export * from "../unittests/tsc/helpers";
+export * from "../unittests/helpers.js";
+export * from "../unittests/services/extract/helpers.js";
+export * from "../unittests/tsbuild/helpers.js";
+export * from "../unittests/tsc/helpers.js";
diff --git a/src/testRunner/_namespaces/ts.tscWatch.ts b/src/testRunner/_namespaces/ts.tscWatch.ts
index aaa9390cb9..b3c593483e 100644
--- a/src/testRunner/_namespaces/ts.tscWatch.ts
+++ b/src/testRunner/_namespaces/ts.tscWatch.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.tscWatch namespace. */
 
-export * from "../unittests/tscWatch/helpers";
+export * from "../unittests/tscWatch/helpers.js";
diff --git a/src/testRunner/_namespaces/vfs.ts b/src/testRunner/_namespaces/vfs.ts
index 3a8b4f1e4a..02b413843a 100644
--- a/src/testRunner/_namespaces/vfs.ts
+++ b/src/testRunner/_namespaces/vfs.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the vfs namespace. */
 
-export * from "../../harness/_namespaces/vfs";
-export * from "../vfsRef";
+export * from "../../harness/_namespaces/vfs.js";
+export * from "../vfsRef.js";
diff --git a/src/testRunner/_namespaces/vpath.ts b/src/testRunner/_namespaces/vpath.ts
index 4b1fd139b3..86d81eb3c0 100644
--- a/src/testRunner/_namespaces/vpath.ts
+++ b/src/testRunner/_namespaces/vpath.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the vpath namespace. */
 
-export * from "../../harness/_namespaces/vpath";
-export * from "../vpathRef";
+export * from "../../harness/_namespaces/vpath.js";
+export * from "../vpathRef.js";
diff --git a/src/testRunner/compilerRunner.ts b/src/testRunner/compilerRunner.ts
index 2133aad726..e68a3c28b0 100644
--- a/src/testRunner/compilerRunner.ts
+++ b/src/testRunner/compilerRunner.ts
@@ -1,11 +1,11 @@
-import * as vpath from "./_namespaces/vpath";
-import * as ts from "./_namespaces/ts";
-import * as compiler from "./_namespaces/compiler";
-import * as Utils from "./_namespaces/Utils";
+import * as vpath from "./_namespaces/vpath.js";
+import * as ts from "./_namespaces/ts.js";
+import * as compiler from "./_namespaces/compiler.js";
+import * as Utils from "./_namespaces/Utils.js";
 import {
     Baseline, Compiler, FileBasedTest, FileBasedTestConfiguration, getFileBasedTestConfigurationDescription,
     getFileBasedTestConfigurations, IO, RunnerBase, TestCaseParser, TestRunnerKind,
-} from "./_namespaces/Harness";
+} from "./_namespaces/Harness.js";
 
 export const enum CompilerTestType {
     Conformance,
diff --git a/src/testRunner/externalCompileRunner.ts b/src/testRunner/externalCompileRunner.ts
index 766b939ab4..a969d1a874 100644
--- a/src/testRunner/externalCompileRunner.ts
+++ b/src/testRunner/externalCompileRunner.ts
@@ -2,8 +2,8 @@ import * as del from "del";
 import * as fs from "fs";
 import * as path from "path";
 
-import * as ts from "./_namespaces/ts";
-import { Baseline, IO, isWorker, RunnerBase, TestRunnerKind } from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import { Baseline, IO, isWorker, RunnerBase, TestRunnerKind } from "./_namespaces/Harness.js";
 
 interface ExecResult {
     stdout: Buffer;
diff --git a/src/testRunner/fourslashRunner.ts b/src/testRunner/fourslashRunner.ts
index 31312e37c6..21525b1906 100644
--- a/src/testRunner/fourslashRunner.ts
+++ b/src/testRunner/fourslashRunner.ts
@@ -1,6 +1,6 @@
-import * as FourSlash from "./_namespaces/FourSlash";
-import * as ts from "./_namespaces/ts";
-import { IO, RunnerBase, TestRunnerKind } from "./_namespaces/Harness";
+import * as FourSlash from "./_namespaces/FourSlash.js";
+import * as ts from "./_namespaces/ts.js";
+import { IO, RunnerBase, TestRunnerKind } from "./_namespaces/Harness.js";
 
 export class FourSlashRunner extends RunnerBase {
     protected basePath: string;
diff --git a/src/testRunner/parallel/host.ts b/src/testRunner/parallel/host.ts
index 96e5d93247..6f72cbd3e7 100644
--- a/src/testRunner/parallel/host.ts
+++ b/src/testRunner/parallel/host.ts
@@ -1,12 +1,12 @@
-import * as Utils from "../_namespaces/Utils";
-import * as ts from "../_namespaces/ts";
+import * as Utils from "../_namespaces/Utils.js";
+import * as ts from "../_namespaces/ts.js";
 import {
     configOption, globalTimeout, IO, keepFailed, lightMode, noColors, runners, runUnitTests, stackTraceLimit,
     taskConfigsFolder, TestConfig, TestRunnerKind, workerCount,
-} from "../_namespaces/Harness";
+} from "../_namespaces/Harness.js";
 import {
     ErrorInfo, ParallelClientMessage, ParallelHostMessage, shimNoopTestInterface, Task, TaskTimeout, TestInfo,
-} from "../_namespaces/Harness.Parallel";
+} from "../_namespaces/Harness.Parallel.js";
 
 export function start() {
     const Mocha = require("mocha") as typeof import("mocha");
@@ -23,7 +23,7 @@ export function start() {
     const { statSync } = require("fs") as typeof import("fs");
 
     // NOTE: paths for module and types for FailedTestReporter _do not_ line up due to our use of --outFile for run.js
-    const FailedTestReporter = require(Utils.findUpFile("scripts/failed-tests.js")) as typeof import("../../../scripts/failed-tests");
+    const FailedTestReporter = require(Utils.findUpFile("scripts/failed-tests.js")) as typeof import("../../../scripts/failed-tests.js");
 
     const perfdataFileNameFragment = ".parallelperf";
     const perfData = readSavedPerfData(configOption);
@@ -543,7 +543,7 @@ export function start() {
             patchStats(consoleReporter.stats);
 
             let xunitReporter: import("mocha").reporters.XUnit | undefined;
-            let failedTestReporter: import("../../../scripts/failed-tests") | undefined;
+            let failedTestReporter: import("../../../scripts/failed-tests.js") | undefined;
             if (process.env.CI === "true") {
                 xunitReporter = new Mocha.reporters.XUnit(replayRunner, {
                     reporterOptions: {
diff --git a/src/testRunner/parallel/shared.ts b/src/testRunner/parallel/shared.ts
index 3d40c4c772..16b93eb111 100644
--- a/src/testRunner/parallel/shared.ts
+++ b/src/testRunner/parallel/shared.ts
@@ -1,5 +1,5 @@
-import * as ts from "../_namespaces/ts";
-import { TestRunnerKind } from "../_namespaces/Harness";
+import * as ts from "../_namespaces/ts.js";
+import { TestRunnerKind } from "../_namespaces/Harness.js";
 
 export interface RunnerTask {
     runner: TestRunnerKind;
diff --git a/src/testRunner/parallel/worker.ts b/src/testRunner/parallel/worker.ts
index 57538ea26b..f6c217a1e5 100644
--- a/src/testRunner/parallel/worker.ts
+++ b/src/testRunner/parallel/worker.ts
@@ -1,9 +1,9 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 import {
     ErrorInfo, ParallelClientMessage, ParallelHostMessage, RunnerTask, shimNoopTestInterface, Task, TaskResult,
     TestInfo, UnitTestTask,
-} from "../_namespaces/Harness.Parallel";
-import { createRunner, globalTimeout, RunnerBase, runUnitTests } from "../_namespaces/Harness";
+} from "../_namespaces/Harness.Parallel.js";
+import { createRunner, globalTimeout, RunnerBase, runUnitTests } from "../_namespaces/Harness.js";
 
 export function start() {
     function hookUncaughtExceptions() {
diff --git a/src/testRunner/projectsRunner.ts b/src/testRunner/projectsRunner.ts
index 6c1cfddaa0..d5748dde00 100644
--- a/src/testRunner/projectsRunner.ts
+++ b/src/testRunner/projectsRunner.ts
@@ -1,10 +1,10 @@
-import * as ts from "./_namespaces/ts";
-import * as documents from "./_namespaces/documents";
-import * as Harness from "./_namespaces/Harness";
-import * as fakes from "./_namespaces/fakes";
-import * as vfs from "./_namespaces/vfs";
-import * as vpath from "./_namespaces/vpath";
-import * as Utils from "./_namespaces/Utils";
+import * as ts from "./_namespaces/ts.js";
+import * as documents from "./_namespaces/documents.js";
+import * as Harness from "./_namespaces/Harness.js";
+import * as fakes from "./_namespaces/fakes.js";
+import * as vfs from "./_namespaces/vfs.js";
+import * as vpath from "./_namespaces/vpath.js";
+import * as Utils from "./_namespaces/Utils.js";
 
 // Test case is json of below type in tests/cases/project/
 interface ProjectRunnerTestCase {
diff --git a/src/testRunner/runner.ts b/src/testRunner/runner.ts
index 0aec1a0136..f64b3a8413 100644
--- a/src/testRunner/runner.ts
+++ b/src/testRunner/runner.ts
@@ -1,13 +1,13 @@
-import * as vpath from "./_namespaces/vpath";
-import * as ts from "./_namespaces/ts";
-import * as FourSlash from "./_namespaces/FourSlash";
-import * as project from "./_namespaces/project";
-import * as RWC from "./_namespaces/RWC";
+import * as vpath from "./_namespaces/vpath.js";
+import * as ts from "./_namespaces/ts.js";
+import * as FourSlash from "./_namespaces/FourSlash.js";
+import * as project from "./_namespaces/project.js";
+import * as RWC from "./_namespaces/RWC.js";
 import {
     CompilerBaselineRunner, CompilerTestType, DefinitelyTypedRunner, DockerfileRunner, FourSlashRunner,
     GeneratedFourslashRunner, IO, Parallel, RunnerBase, setLightMode, setShardId, setShards, Test262BaselineRunner,
     TestRunnerKind, UserCodeRunner,
-} from "./_namespaces/Harness";
+} from "./_namespaces/Harness.js";
 
 /* eslint-disable prefer-const */
 export let runners: RunnerBase[] = [];
diff --git a/src/testRunner/rwcRunner.ts b/src/testRunner/rwcRunner.ts
index a60657574e..b0aaa9aa37 100644
--- a/src/testRunner/rwcRunner.ts
+++ b/src/testRunner/rwcRunner.ts
@@ -1,8 +1,8 @@
-import * as Playback from "./_namespaces/Playback";
-import * as Harness from "./_namespaces/Harness";
-import * as compiler from "./_namespaces/compiler";
-import * as ts from "./_namespaces/ts";
-import * as vpath from "./_namespaces/vpath";
+import * as Playback from "./_namespaces/Playback.js";
+import * as Harness from "./_namespaces/Harness.js";
+import * as compiler from "./_namespaces/compiler.js";
+import * as ts from "./_namespaces/ts.js";
+import * as vpath from "./_namespaces/vpath.js";
 
 // In harness baselines, null is different than undefined. See `generateActual` in `harness.ts`.
 function runWithIOLog(ioLog: Playback.IoLog, fn: (oldIO: Harness.IO) => void) {
diff --git a/src/testRunner/test262Runner.ts b/src/testRunner/test262Runner.ts
index 87aee2bf57..916fe73f84 100644
--- a/src/testRunner/test262Runner.ts
+++ b/src/testRunner/test262Runner.ts
@@ -1,7 +1,7 @@
-import * as ts from "./_namespaces/ts";
-import * as compiler from "./_namespaces/compiler";
-import * as Utils from "./_namespaces/Utils";
-import { Baseline, Compiler, IO, RunnerBase, TestCaseParser, TestRunnerKind } from "./_namespaces/Harness";
+import * as ts from "./_namespaces/ts.js";
+import * as compiler from "./_namespaces/compiler.js";
+import * as Utils from "./_namespaces/Utils.js";
+import { Baseline, Compiler, IO, RunnerBase, TestCaseParser, TestRunnerKind } from "./_namespaces/Harness.js";
 
 // In harness baselines, null is different than undefined. See `generateActual` in `harness.ts`.
 export class Test262BaselineRunner extends RunnerBase {
@@ -110,4 +110,4 @@ export class Test262BaselineRunner extends RunnerBase {
             this.tests.forEach(test => this.runTest(typeof test === "string" ? test : test.file));
         }
     }
-}
\ No newline at end of file
+}
diff --git a/src/testRunner/unittests/asserts.ts b/src/testRunner/unittests/asserts.ts
index 23d8e20a0d..d2193ccb46 100644
--- a/src/testRunner/unittests/asserts.ts
+++ b/src/testRunner/unittests/asserts.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: assert", () => {
     it("deepEqual", () => {
diff --git a/src/testRunner/unittests/base64.ts b/src/testRunner/unittests/base64.ts
index c952da51ef..ec7804413d 100644
--- a/src/testRunner/unittests/base64.ts
+++ b/src/testRunner/unittests/base64.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: base64", () => {
     describe("base64decode", () => {
diff --git a/src/testRunner/unittests/builder.ts b/src/testRunner/unittests/builder.ts
index 6494c6f3be..e61e364b31 100644
--- a/src/testRunner/unittests/builder.ts
+++ b/src/testRunner/unittests/builder.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: builder", () => {
     it("emits dependent files", () => {
diff --git a/src/testRunner/unittests/comments.ts b/src/testRunner/unittests/comments.ts
index 74d6919285..1138a549ad 100644
--- a/src/testRunner/unittests/comments.ts
+++ b/src/testRunner/unittests/comments.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("comment parsing", () => {
     const withShebang = `#! node
diff --git a/src/testRunner/unittests/compilerCore.ts b/src/testRunner/unittests/compilerCore.ts
index 1b7f821180..611b029679 100644
--- a/src/testRunner/unittests/compilerCore.ts
+++ b/src/testRunner/unittests/compilerCore.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: compilerCore", () => {
     describe("equalOwnProperties", () => {
diff --git a/src/testRunner/unittests/config/commandLineParsing.ts b/src/testRunner/unittests/config/commandLineParsing.ts
index 3a9257d601..d72b4e2d19 100644
--- a/src/testRunner/unittests/config/commandLineParsing.ts
+++ b/src/testRunner/unittests/config/commandLineParsing.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: config:: commandLineParsing:: parseCommandLine", () => {
 
diff --git a/src/testRunner/unittests/config/configurationExtension.ts b/src/testRunner/unittests/config/configurationExtension.ts
index 8434eb350c..4ba22a936e 100644
--- a/src/testRunner/unittests/config/configurationExtension.ts
+++ b/src/testRunner/unittests/config/configurationExtension.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
-import * as fakes from "../../_namespaces/fakes";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
+import * as fakes from "../../_namespaces/fakes.js";
 
 function createFileSystem(ignoreCase: boolean, cwd: string, root: string) {
     return new vfs.FileSystem(ignoreCase, {
diff --git a/src/testRunner/unittests/config/convertCompilerOptionsFromJson.ts b/src/testRunner/unittests/config/convertCompilerOptionsFromJson.ts
index 0310c01f74..d897ddc136 100644
--- a/src/testRunner/unittests/config/convertCompilerOptionsFromJson.ts
+++ b/src/testRunner/unittests/config/convertCompilerOptionsFromJson.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: config:: convertCompilerOptionsFromJson", () => {
     const formatDiagnosticHost: ts.FormatDiagnosticsHost = {
diff --git a/src/testRunner/unittests/config/convertTypeAcquisitionFromJson.ts b/src/testRunner/unittests/config/convertTypeAcquisitionFromJson.ts
index 4f091721dd..f07c2fae5c 100644
--- a/src/testRunner/unittests/config/convertTypeAcquisitionFromJson.ts
+++ b/src/testRunner/unittests/config/convertTypeAcquisitionFromJson.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 interface ExpectedResult { typeAcquisition: ts.TypeAcquisition; errors: ts.Diagnostic[]; }
 describe("unittests:: config:: convertTypeAcquisitionFromJson", () => {
diff --git a/src/testRunner/unittests/config/initializeTSConfig.ts b/src/testRunner/unittests/config/initializeTSConfig.ts
index 24bd7acb34..816c3c0956 100644
--- a/src/testRunner/unittests/config/initializeTSConfig.ts
+++ b/src/testRunner/unittests/config/initializeTSConfig.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: config:: initTSConfig", () => {
     function initTSConfigCorrectly(name: string, commandLinesArgs: string[]) {
diff --git a/src/testRunner/unittests/config/matchFiles.ts b/src/testRunner/unittests/config/matchFiles.ts
index 18589d09fb..83ee851e89 100644
--- a/src/testRunner/unittests/config/matchFiles.ts
+++ b/src/testRunner/unittests/config/matchFiles.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 const caseInsensitiveBasePath = "c:/dev/";
 const caseInsensitiveTsconfigPath = "c:/dev/tsconfig.json";
diff --git a/src/testRunner/unittests/config/projectReferences.ts b/src/testRunner/unittests/config/projectReferences.ts
index e45fbb59ab..924f3fd864 100644
--- a/src/testRunner/unittests/config/projectReferences.ts
+++ b/src/testRunner/unittests/config/projectReferences.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 interface TestProjectSpecification {
     configFileName?: string;
diff --git a/src/testRunner/unittests/config/showConfig.ts b/src/testRunner/unittests/config/showConfig.ts
index 305585f0bc..1dfd57420d 100644
--- a/src/testRunner/unittests/config/showConfig.ts
+++ b/src/testRunner/unittests/config/showConfig.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: config:: showConfig", () => {
     function showTSConfigCorrectly(name: string, commandLinesArgs: string[], configJson?: object) {
diff --git a/src/testRunner/unittests/config/tsconfigParsing.ts b/src/testRunner/unittests/config/tsconfigParsing.ts
index fc1d5c4679..65dbe0aff0 100644
--- a/src/testRunner/unittests/config/tsconfigParsing.ts
+++ b/src/testRunner/unittests/config/tsconfigParsing.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
-import * as fakes from "../../_namespaces/fakes";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
+import * as fakes from "../../_namespaces/fakes.js";
 
 describe("unittests:: config:: tsconfigParsing:: parseConfigFileTextToJson", () => {
     function assertParseResult(jsonText: string, expectedConfigObject: { config?: any; error?: ts.Diagnostic[] }) {
diff --git a/src/testRunner/unittests/config/tsconfigParsingWatchOptions.ts b/src/testRunner/unittests/config/tsconfigParsingWatchOptions.ts
index 28fff28879..720204c265 100644
--- a/src/testRunner/unittests/config/tsconfigParsingWatchOptions.ts
+++ b/src/testRunner/unittests/config/tsconfigParsingWatchOptions.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
-import * as fakes from "../../_namespaces/fakes";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
+import * as fakes from "../../_namespaces/fakes.js";
 
 describe("unittests:: config:: tsconfigParsingWatchOptions:: parseConfigFileTextToJson", () => {
     function createParseConfigHost(additionalFiles?: vfs.FileSet) {
diff --git a/src/testRunner/unittests/convertToBase64.ts b/src/testRunner/unittests/convertToBase64.ts
index 68a2f0e681..69b2aaf71c 100644
--- a/src/testRunner/unittests/convertToBase64.ts
+++ b/src/testRunner/unittests/convertToBase64.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: convertToBase64", () => {
     function runTest(input: string): void {
diff --git a/src/testRunner/unittests/customTransforms.ts b/src/testRunner/unittests/customTransforms.ts
index 2579aa008b..c27d3f01f5 100644
--- a/src/testRunner/unittests/customTransforms.ts
+++ b/src/testRunner/unittests/customTransforms.ts
@@ -1,5 +1,5 @@
-import * as ts from "../_namespaces/ts";
-import * as Harness from "../_namespaces/Harness";
+import * as ts from "../_namespaces/ts.js";
+import * as Harness from "../_namespaces/Harness.js";
 
 describe("unittests:: customTransforms", () => {
     function emitsCorrectly(name: string, sources: { file: string, text: string }[], customTransformers: ts.CustomTransformers, options: ts.CompilerOptions = {}) {
diff --git a/src/testRunner/unittests/debugDeprecation.ts b/src/testRunner/unittests/debugDeprecation.ts
index 862c386d94..552c36d3ba 100644
--- a/src/testRunner/unittests/debugDeprecation.ts
+++ b/src/testRunner/unittests/debugDeprecation.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: debugDeprecation", () => {
     let loggingHost: ts.LoggingHost | undefined;
@@ -94,4 +94,4 @@ describe("unittests:: debugDeprecation", () => {
             assert.isFalse(logWritten);
         });
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/evaluation/arraySpread.ts b/src/testRunner/unittests/evaluation/arraySpread.ts
index e8f37ba755..353ec2c1b6 100644
--- a/src/testRunner/unittests/evaluation/arraySpread.ts
+++ b/src/testRunner/unittests/evaluation/arraySpread.ts
@@ -1,4 +1,4 @@
-import * as evaluator from "../../_namespaces/evaluator";
+import * as evaluator from "../../_namespaces/evaluator.js";
 
 describe("unittests:: evaluation:: arraySpread", () => {
     it("array spread preserves side-effects", async () => {
diff --git a/src/testRunner/unittests/evaluation/asyncArrow.ts b/src/testRunner/unittests/evaluation/asyncArrow.ts
index 6521e89e2b..9db6104a0b 100644
--- a/src/testRunner/unittests/evaluation/asyncArrow.ts
+++ b/src/testRunner/unittests/evaluation/asyncArrow.ts
@@ -1,4 +1,4 @@
-import * as evaluator from "../../_namespaces/evaluator";
+import * as evaluator from "../../_namespaces/evaluator.js";
 
 describe("unittests:: evaluation:: asyncArrowEvaluation", () => {
     // https://github.com/Microsoft/TypeScript/issues/24722
diff --git a/src/testRunner/unittests/evaluation/asyncGenerator.ts b/src/testRunner/unittests/evaluation/asyncGenerator.ts
index 0da25e3069..a9e6a83b8f 100644
--- a/src/testRunner/unittests/evaluation/asyncGenerator.ts
+++ b/src/testRunner/unittests/evaluation/asyncGenerator.ts
@@ -1,5 +1,5 @@
-import * as evaluator from "../../_namespaces/evaluator";
-import * as ts from "../../_namespaces/ts";
+import * as evaluator from "../../_namespaces/evaluator.js";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: evaluation:: asyncGeneratorEvaluation", () => {
     it("return (es5)", async () => {
diff --git a/src/testRunner/unittests/evaluation/autoAccessors.ts b/src/testRunner/unittests/evaluation/autoAccessors.ts
index 078110cb44..8f57d1a242 100644
--- a/src/testRunner/unittests/evaluation/autoAccessors.ts
+++ b/src/testRunner/unittests/evaluation/autoAccessors.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as evaluator from "../../_namespaces/evaluator";
+import * as ts from "../../_namespaces/ts.js";
+import * as evaluator from "../../_namespaces/evaluator.js";
 
 describe("unittests:: evaluation:: autoAccessors", () => {
     const editions = [
@@ -113,4 +113,4 @@ describe("unittests:: evaluation:: autoAccessors", () => {
             });
         });
     }
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/evaluation/awaiter.ts b/src/testRunner/unittests/evaluation/awaiter.ts
index 87007d8925..718521d0bb 100644
--- a/src/testRunner/unittests/evaluation/awaiter.ts
+++ b/src/testRunner/unittests/evaluation/awaiter.ts
@@ -1,4 +1,4 @@
-import * as evaluator from "../../_namespaces/evaluator";
+import * as evaluator from "../../_namespaces/evaluator.js";
 
 describe("unittests:: evaluation:: awaiter", () => {
     // NOTE: This could break if the ECMAScript spec ever changes the timing behavior for Promises (again)
diff --git a/src/testRunner/unittests/evaluation/destructuring.ts b/src/testRunner/unittests/evaluation/destructuring.ts
index c52c4d4b0a..fb52fde3f5 100644
--- a/src/testRunner/unittests/evaluation/destructuring.ts
+++ b/src/testRunner/unittests/evaluation/destructuring.ts
@@ -1,5 +1,5 @@
-import * as evaluator from "../../_namespaces/evaluator";
-import * as ts from "../../_namespaces/ts";
+import * as evaluator from "../../_namespaces/evaluator.js";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: evaluation:: destructuring", () => {
     // https://github.com/microsoft/TypeScript/issues/39205
diff --git a/src/testRunner/unittests/evaluation/externalModules.ts b/src/testRunner/unittests/evaluation/externalModules.ts
index 04a0b55abb..e71bc585fb 100644
--- a/src/testRunner/unittests/evaluation/externalModules.ts
+++ b/src/testRunner/unittests/evaluation/externalModules.ts
@@ -1,4 +1,4 @@
-import * as evaluator from "../../_namespaces/evaluator";
+import * as evaluator from "../../_namespaces/evaluator.js";
 
 describe("unittests:: evaluation:: externalModules", () => {
     // https://github.com/microsoft/TypeScript/issues/35420
@@ -9,7 +9,7 @@ describe("unittests:: evaluation:: externalModules", () => {
                     export const output: any[] = [];
                 `,
                 "/.src/other.ts": `
-                    import { output } from "./output";
+                    import { output } from "./output.js";
                     export function f(this: any, expected) {
                         output.push(this === expected);
                     }
@@ -18,10 +18,10 @@ describe("unittests:: evaluation:: externalModules", () => {
                     f(undefined);
                 `,
                 "/.src/main.ts": `
-                    export { output } from "./output";
-                    import { output } from "./output";
-                    import { f } from "./other";
-                    import * as other from "./other";
+                    export { output } from "./output.js";
+                    import { output } from "./output.js";
+                    import { f } from "./other.js";
+                    import * as other from "./other.js";
 
                     // 1
                     f(undefined);
@@ -50,7 +50,7 @@ describe("unittests:: evaluation:: externalModules", () => {
                     export const output: any[] = [];
                 `,
                 "/.src/other.ts": `
-                    import { output } from "./output";
+                    import { output } from "./output.js";
                     export const f = function(this: any, expected) {
                         output.push(this === expected);
                     }
@@ -59,10 +59,10 @@ describe("unittests:: evaluation:: externalModules", () => {
                     f(undefined);
                 `,
                 "/.src/main.ts": `
-                    export { output } from "./output";
-                    import { output } from "./output";
-                    import { f } from "./other";
-                    import * as other from "./other";
+                    export { output } from "./output.js";
+                    import { output } from "./output.js";
+                    import { f } from "./other.js";
+                    import * as other from "./other.js";
 
                     // 1
                     f(undefined);
@@ -83,4 +83,4 @@ describe("unittests:: evaluation:: externalModules", () => {
         assert.equal(result.output[2], true); // `f.call(obj, obj)`. Behavior of `.call` (or `.apply`, etc.) should not be affected.
         assert.equal(result.output[3], true); // `other.f(other)`. `this` is still namespace because it is left of `.`.
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/evaluation/forAwaitOf.ts b/src/testRunner/unittests/evaluation/forAwaitOf.ts
index 8718b058c0..268e2610b6 100644
--- a/src/testRunner/unittests/evaluation/forAwaitOf.ts
+++ b/src/testRunner/unittests/evaluation/forAwaitOf.ts
@@ -1,5 +1,5 @@
-import * as evaluator from "../../_namespaces/evaluator";
-import * as ts from "../../_namespaces/ts";
+import * as evaluator from "../../_namespaces/evaluator.js";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: evaluation:: forAwaitOfEvaluation", () => {
     it("sync (es5)", async () => {
diff --git a/src/testRunner/unittests/evaluation/forOf.ts b/src/testRunner/unittests/evaluation/forOf.ts
index 5afe159495..fcc6647e91 100644
--- a/src/testRunner/unittests/evaluation/forOf.ts
+++ b/src/testRunner/unittests/evaluation/forOf.ts
@@ -1,5 +1,5 @@
-import * as evaluator from "../../_namespaces/evaluator";
-import * as ts from "../../_namespaces/ts";
+import * as evaluator from "../../_namespaces/evaluator.js";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: evaluation:: forOfEvaluation", () => {
     it("es5 over a array with no Symbol", () => {
@@ -119,4 +119,4 @@ describe("unittests:: evaluation:: forOfEvaluation", () => {
         result.main();
     });
 
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/evaluation/objectRest.ts b/src/testRunner/unittests/evaluation/objectRest.ts
index ebbaa7219a..20f5481588 100644
--- a/src/testRunner/unittests/evaluation/objectRest.ts
+++ b/src/testRunner/unittests/evaluation/objectRest.ts
@@ -1,4 +1,4 @@
-import * as evaluator from "../../_namespaces/evaluator";
+import * as evaluator from "../../_namespaces/evaluator.js";
 
 describe("unittests:: evaluation:: objectRest", () => {
     // https://github.com/microsoft/TypeScript/issues/31469
diff --git a/src/testRunner/unittests/evaluation/optionalCall.ts b/src/testRunner/unittests/evaluation/optionalCall.ts
index db92162a3e..392bdd3c40 100644
--- a/src/testRunner/unittests/evaluation/optionalCall.ts
+++ b/src/testRunner/unittests/evaluation/optionalCall.ts
@@ -1,4 +1,4 @@
-import * as evaluator from "../../_namespaces/evaluator";
+import * as evaluator from "../../_namespaces/evaluator.js";
 
 describe("unittests:: evaluation:: optionalCall", () => {
     it("f?.()", async () => {
diff --git a/src/testRunner/unittests/evaluation/superInStaticInitializer.ts b/src/testRunner/unittests/evaluation/superInStaticInitializer.ts
index b6d858c69e..bfc5df64ab 100644
--- a/src/testRunner/unittests/evaluation/superInStaticInitializer.ts
+++ b/src/testRunner/unittests/evaluation/superInStaticInitializer.ts
@@ -1,5 +1,5 @@
-import * as evaluator from "../../_namespaces/evaluator";
-import * as ts from "../../_namespaces/ts";
+import * as evaluator from "../../_namespaces/evaluator.js";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: evaluation:: superInStaticInitializer", () => {
     it("super-property-get in es2015", () => {
@@ -191,4 +191,4 @@ describe("unittests:: evaluation:: superInStaticInitializer", () => {
         const [Derived] = result.main();
         assert.strictEqual(Derived.y, 2);
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/evaluation/templateLiteral.ts b/src/testRunner/unittests/evaluation/templateLiteral.ts
index 65fabb9d4c..924bc60389 100644
--- a/src/testRunner/unittests/evaluation/templateLiteral.ts
+++ b/src/testRunner/unittests/evaluation/templateLiteral.ts
@@ -1,4 +1,4 @@
-import * as evaluator from "../../_namespaces/evaluator";
+import * as evaluator from "../../_namespaces/evaluator.js";
 
 describe("unittests:: evaluation:: templateLiteral", () => {
     it("toString() over valueOf()", () => {
diff --git a/src/testRunner/unittests/evaluation/updateExpressionInModule.ts b/src/testRunner/unittests/evaluation/updateExpressionInModule.ts
index 071a975b78..294adc99e1 100644
--- a/src/testRunner/unittests/evaluation/updateExpressionInModule.ts
+++ b/src/testRunner/unittests/evaluation/updateExpressionInModule.ts
@@ -1,5 +1,5 @@
-import * as evaluator from "../../_namespaces/evaluator";
-import * as ts from "../../_namespaces/ts";
+import * as evaluator from "../../_namespaces/evaluator.js";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: evaluation:: updateExpressionInModule", () => {
     // only run BigInt tests if BigInt is supported in the host environment
@@ -125,4 +125,4 @@ describe("unittests:: evaluation:: updateExpressionInModule", () => {
         assert.equal(result.a, BigInt(2));
         assert.equal(result.b, BigInt(1));
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/factory.ts b/src/testRunner/unittests/factory.ts
index 493f951dfc..dfad130a60 100644
--- a/src/testRunner/unittests/factory.ts
+++ b/src/testRunner/unittests/factory.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: FactoryAPI", () => {
     function assertSyntaxKind(node: ts.Node, expected: ts.SyntaxKind) {
diff --git a/src/testRunner/unittests/helpers.ts b/src/testRunner/unittests/helpers.ts
index 7706b16ab1..eadad53d43 100644
--- a/src/testRunner/unittests/helpers.ts
+++ b/src/testRunner/unittests/helpers.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 const enum ChangedPart {
     references = 1 << 0,
diff --git a/src/testRunner/unittests/incrementalParser.ts b/src/testRunner/unittests/incrementalParser.ts
index 6c3c896334..42f33072a1 100644
--- a/src/testRunner/unittests/incrementalParser.ts
+++ b/src/testRunner/unittests/incrementalParser.ts
@@ -1,5 +1,5 @@
-import * as ts from "../_namespaces/ts";
-import * as Utils from "../_namespaces/Utils";
+import * as ts from "../_namespaces/ts.js";
+import * as Utils from "../_namespaces/Utils.js";
 
 function withChange(text: ts.IScriptSnapshot, start: number, length: number, newText: string): { text: ts.IScriptSnapshot; textChangeRange: ts.TextChangeRange; } {
     const contents = ts.getSnapshotText(text);
diff --git a/src/testRunner/unittests/jsDocParsing.ts b/src/testRunner/unittests/jsDocParsing.ts
index 21f461439c..37b0cb7e14 100644
--- a/src/testRunner/unittests/jsDocParsing.ts
+++ b/src/testRunner/unittests/jsDocParsing.ts
@@ -1,6 +1,6 @@
-import * as ts from "../_namespaces/ts";
-import * as Harness from "../_namespaces/Harness";
-import * as Utils from "../_namespaces/Utils";
+import * as ts from "../_namespaces/ts.js";
+import * as Harness from "../_namespaces/Harness.js";
+import * as Utils from "../_namespaces/Utils.js";
 
 describe("unittests:: JSDocParsing", () => {
     describe("TypeExpressions", () => {
diff --git a/src/testRunner/unittests/jsonParserRecovery.ts b/src/testRunner/unittests/jsonParserRecovery.ts
index 3eaf92790f..d2786df99b 100644
--- a/src/testRunner/unittests/jsonParserRecovery.ts
+++ b/src/testRunner/unittests/jsonParserRecovery.ts
@@ -1,5 +1,5 @@
-import * as ts from "../_namespaces/ts";
-import * as Harness from "../_namespaces/Harness";
+import * as ts from "../_namespaces/ts.js";
+import * as Harness from "../_namespaces/Harness.js";
 
 describe("unittests:: jsonParserRecovery", () => {
     function parsesToValidSourceFileWithErrors(name: string, text: string) {
diff --git a/src/testRunner/unittests/moduleResolution.ts b/src/testRunner/unittests/moduleResolution.ts
index 7f2c76fedd..1638c15e27 100644
--- a/src/testRunner/unittests/moduleResolution.ts
+++ b/src/testRunner/unittests/moduleResolution.ts
@@ -1,6 +1,6 @@
-import * as ts from "../_namespaces/ts";
-import * as Harness from "../_namespaces/Harness";
-import { checkResolvedModule, checkResolvedModuleWithFailedLookupLocations, createResolvedModule } from "./helpers";
+import * as ts from "../_namespaces/ts.js";
+import * as Harness from "../_namespaces/Harness.js";
+import { checkResolvedModule, checkResolvedModuleWithFailedLookupLocations, createResolvedModule } from "./helpers.js";
 
 interface File {
     name: string;
diff --git a/src/testRunner/unittests/parsePseudoBigInt.ts b/src/testRunner/unittests/parsePseudoBigInt.ts
index 10f5e09836..1048ca639f 100644
--- a/src/testRunner/unittests/parsePseudoBigInt.ts
+++ b/src/testRunner/unittests/parsePseudoBigInt.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: BigInt literal base conversions", () => {
     describe("parsePseudoBigInt", () => {
diff --git a/src/testRunner/unittests/paths.ts b/src/testRunner/unittests/paths.ts
index fcd8de8ebe..837aa3cda0 100644
--- a/src/testRunner/unittests/paths.ts
+++ b/src/testRunner/unittests/paths.ts
@@ -1,4 +1,4 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
 describe("unittests:: core paths", () => {
     it("normalizeSlashes", () => {
diff --git a/src/testRunner/unittests/printer.ts b/src/testRunner/unittests/printer.ts
index 103c0e69da..6704939b1e 100644
--- a/src/testRunner/unittests/printer.ts
+++ b/src/testRunner/unittests/printer.ts
@@ -1,7 +1,7 @@
-import * as ts from "../_namespaces/ts";
-import * as Harness from "../_namespaces/Harness";
-import * as fakes from "../_namespaces/fakes";
-import * as vfs from "../_namespaces/vfs";
+import * as ts from "../_namespaces/ts.js";
+import * as Harness from "../_namespaces/Harness.js";
+import * as fakes from "../_namespaces/fakes.js";
+import * as vfs from "../_namespaces/vfs.js";
 
 describe("unittests:: PrinterAPI", () => {
     function makePrintsCorrectly(prefix: string) {
diff --git a/src/testRunner/unittests/programApi.ts b/src/testRunner/unittests/programApi.ts
index ac8bd74f56..f6b46dede9 100644
--- a/src/testRunner/unittests/programApi.ts
+++ b/src/testRunner/unittests/programApi.ts
@@ -1,8 +1,8 @@
-import * as ts from "../_namespaces/ts";
-import * as documents from "../_namespaces/documents";
-import * as fakes from "../_namespaces/fakes";
-import * as vfs from "../_namespaces/vfs";
-import * as Harness from "../_namespaces/Harness";
+import * as ts from "../_namespaces/ts.js";
+import * as documents from "../_namespaces/documents.js";
+import * as fakes from "../_namespaces/fakes.js";
+import * as vfs from "../_namespaces/vfs.js";
+import * as Harness from "../_namespaces/Harness.js";
 
 function verifyMissingFilePaths(missingPaths: readonly ts.Path[], expected: readonly string[]) {
     assert.isDefined(missingPaths);
diff --git a/src/testRunner/unittests/publicApi.ts b/src/testRunner/unittests/publicApi.ts
index 54004b9a89..78739232a8 100644
--- a/src/testRunner/unittests/publicApi.ts
+++ b/src/testRunner/unittests/publicApi.ts
@@ -1,9 +1,9 @@
-import * as Harness from "../_namespaces/Harness";
-import * as vfs from "../_namespaces/vfs";
-import * as fakes from "../_namespaces/fakes";
-import * as ts from "../_namespaces/ts";
-import * as compiler from "../_namespaces/compiler";
-import * as documents from "../_namespaces/documents";
+import * as Harness from "../_namespaces/Harness.js";
+import * as vfs from "../_namespaces/vfs.js";
+import * as fakes from "../_namespaces/fakes.js";
+import * as ts from "../_namespaces/ts.js";
+import * as compiler from "../_namespaces/compiler.js";
+import * as documents from "../_namespaces/documents.js";
 
 describe("unittests:: Public APIs", () => {
     function verifyApi(fileName: string) {
diff --git a/src/testRunner/unittests/reuseProgramStructure.ts b/src/testRunner/unittests/reuseProgramStructure.ts
index b597538f08..c2485fe165 100644
--- a/src/testRunner/unittests/reuseProgramStructure.ts
+++ b/src/testRunner/unittests/reuseProgramStructure.ts
@@ -1,6 +1,6 @@
-import * as ts from "../_namespaces/ts";
+import * as ts from "../_namespaces/ts.js";
 
-import { checkResolvedModulesCache, checkResolvedTypeDirectivesCache, createTestCompilerHost, NamedSourceText, newLine, newProgram, ProgramWithSourceTexts, SourceText, TestCompilerHost, updateProgram, updateProgramText } from "./helpers";
+import { checkResolvedModulesCache, checkResolvedTypeDirectivesCache, createTestCompilerHost, NamedSourceText, newLine, newProgram, ProgramWithSourceTexts, SourceText, TestCompilerHost, updateProgram, updateProgramText } from "./helpers.js";
 
 describe("unittests:: Reuse program structure:: General", () => {
     const target = ts.ScriptTarget.Latest;
diff --git a/src/testRunner/unittests/semver.ts b/src/testRunner/unittests/semver.ts
index 26d2309ac3..3458bfc326 100644
--- a/src/testRunner/unittests/semver.ts
+++ b/src/testRunner/unittests/semver.ts
@@ -1,5 +1,5 @@
-import * as ts from "../_namespaces/ts";
-import * as Utils from "../_namespaces/Utils";
+import * as ts from "../_namespaces/ts.js";
+import * as Utils from "../_namespaces/Utils.js";
 
 import theory = Utils.theory;
 describe("unittests:: semver", () => {
diff --git a/src/testRunner/unittests/services/cancellableLanguageServiceOperations.ts b/src/testRunner/unittests/services/cancellableLanguageServiceOperations.ts
index 85fc11da92..e6b858dead 100644
--- a/src/testRunner/unittests/services/cancellableLanguageServiceOperations.ts
+++ b/src/testRunner/unittests/services/cancellableLanguageServiceOperations.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: services:: cancellableLanguageServiceOperations", () => {
     const file = `
diff --git a/src/testRunner/unittests/services/colorization.ts b/src/testRunner/unittests/services/colorization.ts
index 0afe3176f3..44f4367604 100644
--- a/src/testRunner/unittests/services/colorization.ts
+++ b/src/testRunner/unittests/services/colorization.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 // lots of tests use quoted code
 /* eslint-disable no-template-curly-in-string */
diff --git a/src/testRunner/unittests/services/convertToAsyncFunction.ts b/src/testRunner/unittests/services/convertToAsyncFunction.ts
index 0df0a9691c..557a25cb44 100644
--- a/src/testRunner/unittests/services/convertToAsyncFunction.ts
+++ b/src/testRunner/unittests/services/convertToAsyncFunction.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 const libFile: ts.TestFSWithWatch.File = {
     path: "/a/lib/lib.d.ts",
@@ -1724,7 +1724,7 @@ function [#|f|]() {
 `);
 
     _testConvertToAsyncFunctionWithModule("convertToAsyncFunction_importedFunction", `
-import { fn } from "./module";
+import { fn } from "./module.js";
 function [#|f|]() {
     return Promise.resolve(0).then(fn);
 }
diff --git a/src/testRunner/unittests/services/documentRegistry.ts b/src/testRunner/unittests/services/documentRegistry.ts
index 6281f73125..164a24ed2f 100644
--- a/src/testRunner/unittests/services/documentRegistry.ts
+++ b/src/testRunner/unittests/services/documentRegistry.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: services:: DocumentRegistry", () => {
     it("documents are shared between projects", () => {
diff --git a/src/testRunner/unittests/services/extract/constants.ts b/src/testRunner/unittests/services/extract/constants.ts
index 55a30e21b8..ae360812e9 100644
--- a/src/testRunner/unittests/services/extract/constants.ts
+++ b/src/testRunner/unittests/services/extract/constants.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../../_namespaces/ts";
+import * as ts from "../../../_namespaces/ts.js";
 
 describe("unittests:: services:: extract:: extractConstants", () => {
     testExtractConstant("extractConstant_TopLevel",
diff --git a/src/testRunner/unittests/services/extract/functions.ts b/src/testRunner/unittests/services/extract/functions.ts
index 06f2943970..eb0c6d6ecc 100644
--- a/src/testRunner/unittests/services/extract/functions.ts
+++ b/src/testRunner/unittests/services/extract/functions.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../../_namespaces/ts";
+import * as ts from "../../../_namespaces/ts.js";
 
 describe("unittests:: services:: extract:: extractFunctions", () => {
     testExtractFunction("extractFunction1",
diff --git a/src/testRunner/unittests/services/extract/helpers.ts b/src/testRunner/unittests/services/extract/helpers.ts
index 959b8447c7..e64aaa4c77 100644
--- a/src/testRunner/unittests/services/extract/helpers.ts
+++ b/src/testRunner/unittests/services/extract/helpers.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../../_namespaces/ts";
-import * as Harness from "../../../_namespaces/Harness";
+import * as ts from "../../../_namespaces/ts.js";
+import * as Harness from "../../../_namespaces/Harness.js";
 
 interface Range {
     pos: number;
diff --git a/src/testRunner/unittests/services/extract/ranges.ts b/src/testRunner/unittests/services/extract/ranges.ts
index 71d3559913..85911d18f9 100644
--- a/src/testRunner/unittests/services/extract/ranges.ts
+++ b/src/testRunner/unittests/services/extract/ranges.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../../_namespaces/ts";
+import * as ts from "../../../_namespaces/ts.js";
 
 function testExtractRangeFailed(caption: string, s: string, expectedErrors: string[]) {
     return it(caption, () => {
diff --git a/src/testRunner/unittests/services/extract/symbolWalker.ts b/src/testRunner/unittests/services/extract/symbolWalker.ts
index 0f005bc712..636e8a2fc5 100644
--- a/src/testRunner/unittests/services/extract/symbolWalker.ts
+++ b/src/testRunner/unittests/services/extract/symbolWalker.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../../_namespaces/ts";
-import * as Harness from "../../../_namespaces/Harness";
+import * as ts from "../../../_namespaces/ts.js";
+import * as Harness from "../../../_namespaces/Harness.js";
 
 describe("unittests:: services:: extract:: Symbol Walker", () => {
     function test(description: string, source: string, verifier: (file: ts.SourceFile, checker: ts.TypeChecker) => void) {
diff --git a/src/testRunner/unittests/services/hostNewLineSupport.ts b/src/testRunner/unittests/services/hostNewLineSupport.ts
index d18b593d99..497e10d42a 100644
--- a/src/testRunner/unittests/services/hostNewLineSupport.ts
+++ b/src/testRunner/unittests/services/hostNewLineSupport.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: services:: hostNewLineSupport", () => {
     function testLSWithFiles(settings: ts.CompilerOptions, files: Harness.Compiler.TestFile[]) {
diff --git a/src/testRunner/unittests/services/languageService.ts b/src/testRunner/unittests/services/languageService.ts
index 27b75cadfe..28cd12b1af 100644
--- a/src/testRunner/unittests/services/languageService.ts
+++ b/src/testRunner/unittests/services/languageService.ts
@@ -1,6 +1,6 @@
 import { expect } from "chai";
 
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: services:: languageService", () => {
     const files: {[index: string]: string} = {
diff --git a/src/testRunner/unittests/services/organizeImports.ts b/src/testRunner/unittests/services/organizeImports.ts
index 05fcabe662..6db27e1afd 100644
--- a/src/testRunner/unittests/services/organizeImports.ts
+++ b/src/testRunner/unittests/services/organizeImports.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: services:: organizeImports", () => {
     describe("Sort imports", () => {
diff --git a/src/testRunner/unittests/services/patternMatcher.ts b/src/testRunner/unittests/services/patternMatcher.ts
index d48dd97220..ea72ef2a10 100644
--- a/src/testRunner/unittests/services/patternMatcher.ts
+++ b/src/testRunner/unittests/services/patternMatcher.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: services:: PatternMatcher", () => {
     describe("BreakIntoCharacterSpans", () => {
diff --git a/src/testRunner/unittests/services/preProcessFile.ts b/src/testRunner/unittests/services/preProcessFile.ts
index 86a1693ec4..5073999a34 100644
--- a/src/testRunner/unittests/services/preProcessFile.ts
+++ b/src/testRunner/unittests/services/preProcessFile.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: services:: PreProcessFile:", () => {
     function test(sourceText: string, readImportFile: boolean, detectJavaScriptImports: boolean, expectedPreProcess: ts.PreProcessedFileInfo): void {
diff --git a/src/testRunner/unittests/services/textChanges.ts b/src/testRunner/unittests/services/textChanges.ts
index 9c47393c81..3566ba8338 100644
--- a/src/testRunner/unittests/services/textChanges.ts
+++ b/src/testRunner/unittests/services/textChanges.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 // Some tests have trailing whitespace
 
diff --git a/src/testRunner/unittests/services/transpile.ts b/src/testRunner/unittests/services/transpile.ts
index 4eed8f72ac..0828f530e0 100644
--- a/src/testRunner/unittests/services/transpile.ts
+++ b/src/testRunner/unittests/services/transpile.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: services:: Transpile", () => {
 
diff --git a/src/testRunner/unittests/transform.ts b/src/testRunner/unittests/transform.ts
index 00af928736..d9563baf97 100644
--- a/src/testRunner/unittests/transform.ts
+++ b/src/testRunner/unittests/transform.ts
@@ -1,9 +1,9 @@
-import * as ts from "../_namespaces/ts";
-import * as Harness from "../_namespaces/Harness";
-import * as evaluator from "../_namespaces/evaluator";
-import * as vfs from "../_namespaces/vfs";
-import * as documents from "../_namespaces/documents";
-import * as fakes from "../_namespaces/fakes";
+import * as ts from "../_namespaces/ts.js";
+import * as Harness from "../_namespaces/Harness.js";
+import * as evaluator from "../_namespaces/evaluator.js";
+import * as vfs from "../_namespaces/vfs.js";
+import * as documents from "../_namespaces/documents.js";
+import * as fakes from "../_namespaces/fakes.js";
 
 describe("unittests:: TransformAPI", () => {
     function replaceUndefinedWithVoid0(context: ts.TransformationContext) {
diff --git a/src/testRunner/unittests/tsbuild/amdModulesWithOut.ts b/src/testRunner/unittests/tsbuild/amdModulesWithOut.ts
index d137e70ecc..cec1fca015 100644
--- a/src/testRunner/unittests/tsbuild/amdModulesWithOut.ts
+++ b/src/testRunner/unittests/tsbuild/amdModulesWithOut.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild:: outFile:: on amd modules with --out", () => {
     let outFileFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/clean.ts b/src/testRunner/unittests/tsbuild/clean.ts
index c3182026a1..46a022552c 100644
--- a/src/testRunner/unittests/tsbuild/clean.ts
+++ b/src/testRunner/unittests/tsbuild/clean.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuild - clean", () => {
     ts.verifyTsc({
@@ -13,4 +13,4 @@ describe("unittests:: tsbuild - clean", () => {
             }),
         }),
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuild/configFileErrors.ts b/src/testRunner/unittests/tsbuild/configFileErrors.ts
index 254a768344..1c3d93b2de 100644
--- a/src/testRunner/unittests/tsbuild/configFileErrors.ts
+++ b/src/testRunner/unittests/tsbuild/configFileErrors.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsbuild:: configFileErrors:: when tsconfig extends the missing file", () => {
     ts.verifyTsc({
diff --git a/src/testRunner/unittests/tsbuild/configFileExtends.ts b/src/testRunner/unittests/tsbuild/configFileExtends.ts
index 85d868dc06..19a8428e0a 100644
--- a/src/testRunner/unittests/tsbuild/configFileExtends.ts
+++ b/src/testRunner/unittests/tsbuild/configFileExtends.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuild:: configFileExtends:: when tsconfig extends another config", () => {
     function getConfigExtendsWithIncludeFs() {
@@ -49,4 +49,4 @@ describe("unittests:: tsbuild:: configFileExtends:: when tsconfig extends anothe
         fs: getConfigExtendsWithIncludeFs,
         commandLineArgs: ["--b", "/src/webpack/tsconfig.json", "--v", "--listFiles"],
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuild/containerOnlyReferenced.ts b/src/testRunner/unittests/tsbuild/containerOnlyReferenced.ts
index 45e4be8380..548374a970 100644
--- a/src/testRunner/unittests/tsbuild/containerOnlyReferenced.ts
+++ b/src/testRunner/unittests/tsbuild/containerOnlyReferenced.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuild:: when containerOnly project is referenced", () => {
     ts.verifyTscWithEdits({
diff --git a/src/testRunner/unittests/tsbuild/declarationEmit.ts b/src/testRunner/unittests/tsbuild/declarationEmit.ts
index e7dc2b9f50..c6a1d81e29 100644
--- a/src/testRunner/unittests/tsbuild/declarationEmit.ts
+++ b/src/testRunner/unittests/tsbuild/declarationEmit.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsbuild:: declarationEmit", () => {
     function getFiles(): vfs.FileSet {
diff --git a/src/testRunner/unittests/tsbuild/demo.ts b/src/testRunner/unittests/tsbuild/demo.ts
index 18666a748d..ac93e39b62 100644
--- a/src/testRunner/unittests/tsbuild/demo.ts
+++ b/src/testRunner/unittests/tsbuild/demo.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild:: on demo project", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/emitDeclarationOnly.ts b/src/testRunner/unittests/tsbuild/emitDeclarationOnly.ts
index f7726fa349..a9515e3776 100644
--- a/src/testRunner/unittests/tsbuild/emitDeclarationOnly.ts
+++ b/src/testRunner/unittests/tsbuild/emitDeclarationOnly.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild:: on project with emitDeclarationOnly set to true", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/emptyFiles.ts b/src/testRunner/unittests/tsbuild/emptyFiles.ts
index 49d18ace60..5a48bfb116 100644
--- a/src/testRunner/unittests/tsbuild/emptyFiles.ts
+++ b/src/testRunner/unittests/tsbuild/emptyFiles.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild - empty files option in tsconfig", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/exitCodeOnBogusFile.ts b/src/testRunner/unittests/tsbuild/exitCodeOnBogusFile.ts
index f75d4a191d..d17b481ba8 100644
--- a/src/testRunner/unittests/tsbuild/exitCodeOnBogusFile.ts
+++ b/src/testRunner/unittests/tsbuild/exitCodeOnBogusFile.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 // https://github.com/microsoft/TypeScript/issues/33849
 describe("unittests:: tsbuild:: exitCodeOnBogusFile:: test exit code", () => {
diff --git a/src/testRunner/unittests/tsbuild/graphOrdering.ts b/src/testRunner/unittests/tsbuild/graphOrdering.ts
index 06fd1f4b51..d9947b598c 100644
--- a/src/testRunner/unittests/tsbuild/graphOrdering.ts
+++ b/src/testRunner/unittests/tsbuild/graphOrdering.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild - graph-ordering", () => {
     let host: fakes.SolutionBuilderHost | undefined;
diff --git a/src/testRunner/unittests/tsbuild/helpers.ts b/src/testRunner/unittests/tsbuild/helpers.ts
index 6637e9e6ca..a402d01da3 100644
--- a/src/testRunner/unittests/tsbuild/helpers.ts
+++ b/src/testRunner/unittests/tsbuild/helpers.ts
@@ -1,8 +1,8 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as vfs from "../../_namespaces/vfs";
-import * as Harness from "../../_namespaces/Harness";
-import * as vpath from "../../_namespaces/vpath";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as vfs from "../../_namespaces/vfs.js";
+import * as Harness from "../../_namespaces/Harness.js";
+import * as vpath from "../../_namespaces/vpath.js";
 
 export function errorDiagnostic(message: fakes.ExpectedDiagnosticMessage): fakes.ExpectedErrorDiagnostic {
     return { message };
diff --git a/src/testRunner/unittests/tsbuild/inferredTypeFromTransitiveModule.ts b/src/testRunner/unittests/tsbuild/inferredTypeFromTransitiveModule.ts
index 4f3db7518f..a6065397cd 100644
--- a/src/testRunner/unittests/tsbuild/inferredTypeFromTransitiveModule.ts
+++ b/src/testRunner/unittests/tsbuild/inferredTypeFromTransitiveModule.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild:: inferredTypeFromTransitiveModule::", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/javascriptProjectEmit.ts b/src/testRunner/unittests/tsbuild/javascriptProjectEmit.ts
index 499ca98a60..c6ac65d78d 100644
--- a/src/testRunner/unittests/tsbuild/javascriptProjectEmit.ts
+++ b/src/testRunner/unittests/tsbuild/javascriptProjectEmit.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsbuild:: javascriptProjectEmit::", () => {
     ts.verifyTsc({
diff --git a/src/testRunner/unittests/tsbuild/lateBoundSymbol.ts b/src/testRunner/unittests/tsbuild/lateBoundSymbol.ts
index 417be59e44..8d3f4b8008 100644
--- a/src/testRunner/unittests/tsbuild/lateBoundSymbol.ts
+++ b/src/testRunner/unittests/tsbuild/lateBoundSymbol.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuild:: lateBoundSymbol:: interface is merged and contains late bound member", () => {
     ts.verifyTscWithEdits({
diff --git a/src/testRunner/unittests/tsbuild/moduleResolution.ts b/src/testRunner/unittests/tsbuild/moduleResolution.ts
index 544ce81512..e708253b38 100644
--- a/src/testRunner/unittests/tsbuild/moduleResolution.ts
+++ b/src/testRunner/unittests/tsbuild/moduleResolution.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsbuild:: moduleResolution:: handles the modules and options from referenced project correctly", () => {
     function sys(optionsToExtend?: ts.CompilerOptions) {
diff --git a/src/testRunner/unittests/tsbuild/moduleSpecifiers.ts b/src/testRunner/unittests/tsbuild/moduleSpecifiers.ts
index 04d3f714a6..f9ddbad165 100644
--- a/src/testRunner/unittests/tsbuild/moduleSpecifiers.ts
+++ b/src/testRunner/unittests/tsbuild/moduleSpecifiers.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 // https://github.com/microsoft/TypeScript/issues/31696
 describe("unittests:: tsbuild:: moduleSpecifiers:: synthesized module specifiers to referenced projects resolve correctly", () => {
diff --git a/src/testRunner/unittests/tsbuild/noEmitOnError.ts b/src/testRunner/unittests/tsbuild/noEmitOnError.ts
index c61f45a1cd..745c6a1aaa 100644
--- a/src/testRunner/unittests/tsbuild/noEmitOnError.ts
+++ b/src/testRunner/unittests/tsbuild/noEmitOnError.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild - with noEmitOnError", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/outFile.ts b/src/testRunner/unittests/tsbuild/outFile.ts
index 08a80e200e..0d3060833d 100644
--- a/src/testRunner/unittests/tsbuild/outFile.ts
+++ b/src/testRunner/unittests/tsbuild/outFile.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
-import * as fakes from "../../_namespaces/fakes";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
+import * as fakes from "../../_namespaces/fakes.js";
 
 describe("unittests:: tsbuild:: outFile::", () => {
     let outFileFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/outputPaths.ts b/src/testRunner/unittests/tsbuild/outputPaths.ts
index 088a01ba6e..e1a74ac9f9 100644
--- a/src/testRunner/unittests/tsbuild/outputPaths.ts
+++ b/src/testRunner/unittests/tsbuild/outputPaths.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
 
 describe("unittests:: tsbuild - output file paths", () => {
     const noChangeProject: ts.TestTscEdit = {
diff --git a/src/testRunner/unittests/tsbuild/publicApi.ts b/src/testRunner/unittests/tsbuild/publicApi.ts
index b61ba2f5d8..5b758f695a 100644
--- a/src/testRunner/unittests/tsbuild/publicApi.ts
+++ b/src/testRunner/unittests/tsbuild/publicApi.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild:: Public API with custom transformers when passed to build", () => {
     let sys: ts.TscCompileSystem;
diff --git a/src/testRunner/unittests/tsbuild/referencesWithRootDirInParent.ts b/src/testRunner/unittests/tsbuild/referencesWithRootDirInParent.ts
index 1d0d2f131a..6e7147d794 100644
--- a/src/testRunner/unittests/tsbuild/referencesWithRootDirInParent.ts
+++ b/src/testRunner/unittests/tsbuild/referencesWithRootDirInParent.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild:: with rootDir of project reference in parentDirectory", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/resolveJsonModule.ts b/src/testRunner/unittests/tsbuild/resolveJsonModule.ts
index 0d765605c8..1f0cc05e78 100644
--- a/src/testRunner/unittests/tsbuild/resolveJsonModule.ts
+++ b/src/testRunner/unittests/tsbuild/resolveJsonModule.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild:: with resolveJsonModule option on project resolveJsonModuleAndComposite", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/sample.ts b/src/testRunner/unittests/tsbuild/sample.ts
index f6bdce4369..db8a1b8f19 100644
--- a/src/testRunner/unittests/tsbuild/sample.ts
+++ b/src/testRunner/unittests/tsbuild/sample.ts
@@ -1,7 +1,7 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
-import * as fakes from "../../_namespaces/fakes";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: tsbuild:: on 'sample1' project", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuild/transitiveReferences.ts b/src/testRunner/unittests/tsbuild/transitiveReferences.ts
index c3374cb370..0d8e31e36d 100644
--- a/src/testRunner/unittests/tsbuild/transitiveReferences.ts
+++ b/src/testRunner/unittests/tsbuild/transitiveReferences.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsbuild:: when project reference is referenced transitively", () => {
     let projFs: vfs.FileSystem;
diff --git a/src/testRunner/unittests/tsbuildWatch/configFileErrors.ts b/src/testRunner/unittests/tsbuildWatch/configFileErrors.ts
index 73e9fd0e5f..711a1f1faa 100644
--- a/src/testRunner/unittests/tsbuildWatch/configFileErrors.ts
+++ b/src/testRunner/unittests/tsbuildWatch/configFileErrors.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsbuildWatch:: watchMode:: configFileErrors:: reports syntax errors in config file", () => {
     function build(sys: ts.tscWatch.WatchedSystem) {
@@ -58,4 +58,4 @@ describe("unittests:: tsbuildWatch:: watchMode:: configFileErrors:: reports synt
             }
         ]
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/demo.ts b/src/testRunner/unittests/tsbuildWatch/demo.ts
index 81ab4dda2d..720eecdb98 100644
--- a/src/testRunner/unittests/tsbuildWatch/demo.ts
+++ b/src/testRunner/unittests/tsbuildWatch/demo.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuildWatch:: watchMode:: with demo project", () => {
     const projectLocation = `${ts.TestFSWithWatch.tsbuildProjectsLocation}/demo`;
@@ -85,4 +85,4 @@ ${coreFiles[1].content}`),
     function projectFile(fileName: string): ts.tscWatch.File {
         return ts.TestFSWithWatch.getTsBuildProjectFile("demo", fileName);
     }
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/moduleResolution.ts b/src/testRunner/unittests/tsbuildWatch/moduleResolution.ts
index 044ec4844a..b2840759ad 100644
--- a/src/testRunner/unittests/tsbuildWatch/moduleResolution.ts
+++ b/src/testRunner/unittests/tsbuildWatch/moduleResolution.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsbuildWatch:: watchMode:: moduleResolution", () => {
     ts.tscWatch.verifyTscWatch({
@@ -224,4 +224,4 @@ describe("unittests:: tsbuildWatch:: watchMode:: moduleResolution", () => {
             },
         ]
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/noEmit.ts b/src/testRunner/unittests/tsbuildWatch/noEmit.ts
index 37623cd14a..3fbf320e3e 100644
--- a/src/testRunner/unittests/tsbuildWatch/noEmit.ts
+++ b/src/testRunner/unittests/tsbuildWatch/noEmit.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuildWatch:: watchMode:: with noEmit", () => {
     ts.tscWatch.verifyTscWatch({
@@ -30,4 +30,4 @@ describe("unittests:: tsbuildWatch:: watchMode:: with noEmit", () => {
         ],
         baselineIncremental: true
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/noEmitOnError.ts b/src/testRunner/unittests/tsbuildWatch/noEmitOnError.ts
index c59bdc9d86..43c2594332 100644
--- a/src/testRunner/unittests/tsbuildWatch/noEmitOnError.ts
+++ b/src/testRunner/unittests/tsbuildWatch/noEmitOnError.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuildWatch:: watchMode:: with noEmitOnError", () => {
     function change(caption: string, content: string): ts.tscWatch.TscWatchCompileChange {
@@ -43,4 +43,4 @@ const a: string = "hello";`),
         ],
         baselineIncremental: true
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/programUpdates.ts b/src/testRunner/unittests/tsbuildWatch/programUpdates.ts
index 3d0e24d006..c1a43c1217 100644
--- a/src/testRunner/unittests/tsbuildWatch/programUpdates.ts
+++ b/src/testRunner/unittests/tsbuildWatch/programUpdates.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 import projectsLocation = ts.TestFSWithWatch.tsbuildProjectsLocation;
 describe("unittests:: tsbuildWatch:: watchMode:: program updates", () => {
@@ -300,7 +300,7 @@ export function createSomeObject(): SomeObject
                 const subProjectApp = `${projectsLocation}/sample1/App`;
                 const appTs: ts.tscWatch.File = {
                     path: `${subProjectApp}/app.ts`,
-                    content: `import { createSomeObject } from "../Library/library";
+                    content: `import { createSomeObject } from "../Library/library.js";
 createSomeObject().message;`
                 };
                 const appTsconfig: ts.tscWatch.File = {
@@ -743,4 +743,4 @@ export function someFn() { }`),
         commandLineArgs: ["--b", "src/project", "-i", "-w"],
         changes: ts.emptyArray
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/projectsBuilding.ts b/src/testRunner/unittests/tsbuildWatch/projectsBuilding.ts
index b79c49a43b..f577be07bd 100644
--- a/src/testRunner/unittests/tsbuildWatch/projectsBuilding.ts
+++ b/src/testRunner/unittests/tsbuildWatch/projectsBuilding.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuildWatch:: watchMode:: projectsBuilding", () => {
     function pkgs<T>(cb: (index: number) => T, count: number, startIndex?: number): T[] {
@@ -182,4 +182,4 @@ describe("unittests:: tsbuildWatch:: watchMode:: projectsBuilding", () => {
             ts.tscWatch.noopChange,
         ]
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/publicApi.ts b/src/testRunner/unittests/tsbuildWatch/publicApi.ts
index c58862bff6..14c7e0187a 100644
--- a/src/testRunner/unittests/tsbuildWatch/publicApi.ts
+++ b/src/testRunner/unittests/tsbuildWatch/publicApi.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 it("unittests:: tsbuildWatch:: watchMode:: Public API with custom transformers", () => {
     const solution: ts.tscWatch.File = {
@@ -102,4 +102,4 @@ export function f22() { } // trailing`
         };
         return { before: [before], after: [after] };
     }
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/reexport.ts b/src/testRunner/unittests/tsbuildWatch/reexport.ts
index 23d2857bf0..9991e16c98 100644
--- a/src/testRunner/unittests/tsbuildWatch/reexport.ts
+++ b/src/testRunner/unittests/tsbuildWatch/reexport.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuildWatch:: watchMode:: with reexport when referenced project reexports definitions from another file", () => {
     ts.tscWatch.verifyTscWatch({
@@ -38,4 +38,4 @@ describe("unittests:: tsbuildWatch:: watchMode:: with reexport when referenced p
             }
         ]
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsbuildWatch/watchEnvironment.ts b/src/testRunner/unittests/tsbuildWatch/watchEnvironment.ts
index 7021a2ea8a..2625ea5179 100644
--- a/src/testRunner/unittests/tsbuildWatch/watchEnvironment.ts
+++ b/src/testRunner/unittests/tsbuildWatch/watchEnvironment.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsbuildWatch:: watchEnvironment:: tsbuild:: watchMode:: with different watch environments", () => {
     it("watchFile on same file multiple times because file is part of multiple projects", () => {
diff --git a/src/testRunner/unittests/tsc/cancellationToken.ts b/src/testRunner/unittests/tsc/cancellationToken.ts
index 21783b336a..56d1d3a22a 100644
--- a/src/testRunner/unittests/tsc/cancellationToken.ts
+++ b/src/testRunner/unittests/tsc/cancellationToken.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: tsc:: builder cancellationToken", () => {
     verifyCancellation(/*useBuildInfo*/ true, "when emitting buildInfo");
@@ -168,4 +168,4 @@ describe("unittests:: tsc:: builder cancellationToken", () => {
             }
         });
     }
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsc/composite.ts b/src/testRunner/unittests/tsc/composite.ts
index 3746de6552..022b43f549 100644
--- a/src/testRunner/unittests/tsc/composite.ts
+++ b/src/testRunner/unittests/tsc/composite.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsc:: composite::", () => {
     ts.verifyTsc({
diff --git a/src/testRunner/unittests/tsc/declarationEmit.ts b/src/testRunner/unittests/tsc/declarationEmit.ts
index 06ef754312..999f052c67 100644
--- a/src/testRunner/unittests/tsc/declarationEmit.ts
+++ b/src/testRunner/unittests/tsc/declarationEmit.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsc:: declarationEmit::", () => {
     interface VerifyDeclarationEmitInput {
diff --git a/src/testRunner/unittests/tsc/forceConsistentCasingInFileNames.ts b/src/testRunner/unittests/tsc/forceConsistentCasingInFileNames.ts
index 8b1ddf0961..b1c11bf850 100644
--- a/src/testRunner/unittests/tsc/forceConsistentCasingInFileNames.ts
+++ b/src/testRunner/unittests/tsc/forceConsistentCasingInFileNames.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsc:: forceConsistentCasingInFileNames::", () => {
     ts.verifyTsc({
@@ -16,4 +16,4 @@ describe("unittests:: tsc:: forceConsistentCasingInFileNames::", () => {
             "/src/project/node_modules/fp-ts/lib/struct.d.ts": `export function foo(): void`,
         }),
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsc/helpers.ts b/src/testRunner/unittests/tsc/helpers.ts
index 5944e54185..20aea0ca5e 100644
--- a/src/testRunner/unittests/tsc/helpers.ts
+++ b/src/testRunner/unittests/tsc/helpers.ts
@@ -1,7 +1,7 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as vfs from "../../_namespaces/vfs";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as vfs from "../../_namespaces/vfs.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 export type TscCompileSystem = fakes.System & {
     writtenFiles: ts.Set<ts.Path>;
diff --git a/src/testRunner/unittests/tsc/incremental.ts b/src/testRunner/unittests/tsc/incremental.ts
index 9fb1cdf647..5cb2ee1d5e 100644
--- a/src/testRunner/unittests/tsc/incremental.ts
+++ b/src/testRunner/unittests/tsc/incremental.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
-import * as vfs from "../../_namespaces/vfs";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
+import * as vfs from "../../_namespaces/vfs.js";
 
 describe("unittests:: tsc:: incremental::", () => {
     ts.verifyTscWithEdits({
diff --git a/src/testRunner/unittests/tsc/listFilesOnly.ts b/src/testRunner/unittests/tsc/listFilesOnly.ts
index 03c19fd3b3..94b9678348 100644
--- a/src/testRunner/unittests/tsc/listFilesOnly.ts
+++ b/src/testRunner/unittests/tsc/listFilesOnly.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsc:: listFilesOnly::", () => {
     ts.verifyTsc({
diff --git a/src/testRunner/unittests/tsc/projectReferences.ts b/src/testRunner/unittests/tsc/projectReferences.ts
index 47b9486d02..acc0302b9b 100644
--- a/src/testRunner/unittests/tsc/projectReferences.ts
+++ b/src/testRunner/unittests/tsc/projectReferences.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsc:: projectReferences::", () => {
     ts.verifyTsc({
diff --git a/src/testRunner/unittests/tsc/redirect.ts b/src/testRunner/unittests/tsc/redirect.ts
index df174a6dd5..0fd7c60eb6 100644
--- a/src/testRunner/unittests/tsc/redirect.ts
+++ b/src/testRunner/unittests/tsc/redirect.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsc:: redirect::", () => {
     ts.verifyTsc({
diff --git a/src/testRunner/unittests/tsc/runWithoutArgs.ts b/src/testRunner/unittests/tsc/runWithoutArgs.ts
index 6c7af42052..be4bef2f71 100644
--- a/src/testRunner/unittests/tsc/runWithoutArgs.ts
+++ b/src/testRunner/unittests/tsc/runWithoutArgs.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsc:: runWithoutArgs::", () => {
     ts.verifyTsc({
diff --git a/src/testRunner/unittests/tscWatch/consoleClearing.ts b/src/testRunner/unittests/tscWatch/consoleClearing.ts
index 7039748e91..8aff1abe04 100644
--- a/src/testRunner/unittests/tscWatch/consoleClearing.ts
+++ b/src/testRunner/unittests/tscWatch/consoleClearing.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsc-watch:: console clearing", () => {
     const scenario = "consoleClearing";
diff --git a/src/testRunner/unittests/tscWatch/emit.ts b/src/testRunner/unittests/tscWatch/emit.ts
index 2ab59f8d37..83bc69a0e8 100644
--- a/src/testRunner/unittests/tscWatch/emit.ts
+++ b/src/testRunner/unittests/tscWatch/emit.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 const scenario = "emit";
 describe("unittests:: tsc-watch:: emit with outFile or out setting", () => {
diff --git a/src/testRunner/unittests/tscWatch/emitAndErrorUpdates.ts b/src/testRunner/unittests/tscWatch/emitAndErrorUpdates.ts
index 40afb4bce5..a5d96da264 100644
--- a/src/testRunner/unittests/tscWatch/emitAndErrorUpdates.ts
+++ b/src/testRunner/unittests/tscWatch/emitAndErrorUpdates.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsc-watch:: Emit times and Error updates in builder after program changes", () => {
     const config: ts.tscWatch.File = {
diff --git a/src/testRunner/unittests/tscWatch/forceConsistentCasingInFileNames.ts b/src/testRunner/unittests/tscWatch/forceConsistentCasingInFileNames.ts
index f301dc7708..90a5763281 100644
--- a/src/testRunner/unittests/tscWatch/forceConsistentCasingInFileNames.ts
+++ b/src/testRunner/unittests/tscWatch/forceConsistentCasingInFileNames.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsc-watch:: forceConsistentCasingInFileNames", () => {
     const loggerFile: ts.tscWatch.File = {
diff --git a/src/testRunner/unittests/tscWatch/helpers.ts b/src/testRunner/unittests/tscWatch/helpers.ts
index c4d059b896..2ec809d152 100644
--- a/src/testRunner/unittests/tscWatch/helpers.ts
+++ b/src/testRunner/unittests/tscWatch/helpers.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as fakes from "../../_namespaces/fakes";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as fakes from "../../_namespaces/fakes.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 export const projects = `/user/username/projects`;
 export const projectRoot = `${projects}/myproject`;
diff --git a/src/testRunner/unittests/tscWatch/incremental.ts b/src/testRunner/unittests/tscWatch/incremental.ts
index 3de067d433..4e1795b5b0 100644
--- a/src/testRunner/unittests/tscWatch/incremental.ts
+++ b/src/testRunner/unittests/tscWatch/incremental.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: tsc-watch:: emit file --incremental", () => {
     const project = "/users/username/projects/project";
diff --git a/src/testRunner/unittests/tscWatch/moduleResolution.ts b/src/testRunner/unittests/tscWatch/moduleResolution.ts
index ccc049c4b7..f4a838cf4a 100644
--- a/src/testRunner/unittests/tscWatch/moduleResolution.ts
+++ b/src/testRunner/unittests/tscWatch/moduleResolution.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsc-watch:: moduleResolution", () => {
     ts.tscWatch.verifyTscWatch({
@@ -258,4 +258,4 @@ describe("unittests:: tsc-watch:: moduleResolution", () => {
             ],
         });
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tscWatch/nodeNextWatch.ts b/src/testRunner/unittests/tscWatch/nodeNextWatch.ts
index 744b60a1d0..5d87447185 100644
--- a/src/testRunner/unittests/tscWatch/nodeNextWatch.ts
+++ b/src/testRunner/unittests/tscWatch/nodeNextWatch.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsc-watch:: nodeNextWatch:: emit when module emit is specified as nodenext", () => {
     ts.tscWatch.verifyTscWatch({
@@ -56,4 +56,4 @@ describe("unittests:: tsc-watch:: nodeNextWatch:: emit when module emit is speci
             }
         ],
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tscWatch/programUpdates.ts b/src/testRunner/unittests/tscWatch/programUpdates.ts
index c8e4ac1153..6e543c4d92 100644
--- a/src/testRunner/unittests/tscWatch/programUpdates.ts
+++ b/src/testRunner/unittests/tscWatch/programUpdates.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: tsc-watch:: program updates", () => {
     const scenario = "programUpdates";
diff --git a/src/testRunner/unittests/tscWatch/projectsWithReferences.ts b/src/testRunner/unittests/tscWatch/projectsWithReferences.ts
index 2ce3c74754..7adfc0c2a5 100644
--- a/src/testRunner/unittests/tscWatch/projectsWithReferences.ts
+++ b/src/testRunner/unittests/tscWatch/projectsWithReferences.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsc-watch:: projects with references: invoking when references are already built", () => {
     ts.tscWatch.verifyTscWatch({
@@ -411,4 +411,4 @@ X;`,
         ],
         baselineDependencies: true,
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tscWatch/resolutionCache.ts b/src/testRunner/unittests/tscWatch/resolutionCache.ts
index df69419ac6..6b7dafba14 100644
--- a/src/testRunner/unittests/tscWatch/resolutionCache.ts
+++ b/src/testRunner/unittests/tscWatch/resolutionCache.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsc-watch:: resolutionCache:: tsc-watch module resolution caching", () => {
     const scenario = "resolutionCache";
diff --git a/src/testRunner/unittests/tscWatch/sourceOfProjectReferenceRedirect.ts b/src/testRunner/unittests/tscWatch/sourceOfProjectReferenceRedirect.ts
index 7be526e395..e8ee429f41 100644
--- a/src/testRunner/unittests/tscWatch/sourceOfProjectReferenceRedirect.ts
+++ b/src/testRunner/unittests/tscWatch/sourceOfProjectReferenceRedirect.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 import getFileFromProject = ts.TestFSWithWatch.getTsBuildProjectFile;
 describe("unittests:: tsc-watch:: watchAPI:: with sourceOfProjectReferenceRedirect", () => {
diff --git a/src/testRunner/unittests/tscWatch/watchApi.ts b/src/testRunner/unittests/tscWatch/watchApi.ts
index f92acb71d3..14368ca57b 100644
--- a/src/testRunner/unittests/tscWatch/watchApi.ts
+++ b/src/testRunner/unittests/tscWatch/watchApi.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: tsc-watch:: watchAPI:: tsc-watch with custom module resolution", () => {
     const configFileJson: any = {
diff --git a/src/testRunner/unittests/tscWatch/watchEnvironment.ts b/src/testRunner/unittests/tscWatch/watchEnvironment.ts
index fa0c6315a0..0dd8bf077e 100644
--- a/src/testRunner/unittests/tscWatch/watchEnvironment.ts
+++ b/src/testRunner/unittests/tscWatch/watchEnvironment.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 import Tsc_WatchDirectory = ts.TestFSWithWatch.Tsc_WatchDirectory;
 describe("unittests:: tsc-watch:: watchEnvironment:: tsc-watch with different polling/non polling options", () => {
diff --git a/src/testRunner/unittests/tsserver/applyChangesToOpenFiles.ts b/src/testRunner/unittests/tsserver/applyChangesToOpenFiles.ts
index f778e72139..15fa3f6334 100644
--- a/src/testRunner/unittests/tsserver/applyChangesToOpenFiles.ts
+++ b/src/testRunner/unittests/tsserver/applyChangesToOpenFiles.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: applyChangesToOpenFiles", () => {
     const configFile: ts.projectSystem.File = {
diff --git a/src/testRunner/unittests/tsserver/autoImportProvider.ts b/src/testRunner/unittests/tsserver/autoImportProvider.ts
index 5d2113bb64..1a74850548 100644
--- a/src/testRunner/unittests/tsserver/autoImportProvider.ts
+++ b/src/testRunner/unittests/tsserver/autoImportProvider.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 const angularFormsDts: ts.projectSystem.File = {
     path: "/node_modules/@angular/forms/forms.d.ts",
diff --git a/src/testRunner/unittests/tsserver/auxiliaryProject.ts b/src/testRunner/unittests/tsserver/auxiliaryProject.ts
index 58742f0e42..113e0e8be1 100644
--- a/src/testRunner/unittests/tsserver/auxiliaryProject.ts
+++ b/src/testRunner/unittests/tsserver/auxiliaryProject.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 const aTs: ts.projectSystem.File = {
     path: "/a.ts",
diff --git a/src/testRunner/unittests/tsserver/cachingFileSystemInformation.ts b/src/testRunner/unittests/tsserver/cachingFileSystemInformation.ts
index 5834c4592c..b9fb2e8894 100644
--- a/src/testRunner/unittests/tsserver/cachingFileSystemInformation.ts
+++ b/src/testRunner/unittests/tsserver/cachingFileSystemInformation.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: CachingFileSystemInformation:: tsserverProjectSystem CachingFileSystemInformation", () => {
     enum CalledMapsWithSingleArg {
diff --git a/src/testRunner/unittests/tsserver/cancellationToken.ts b/src/testRunner/unittests/tsserver/cancellationToken.ts
index 5c207e74d8..8d98c9c0ba 100644
--- a/src/testRunner/unittests/tsserver/cancellationToken.ts
+++ b/src/testRunner/unittests/tsserver/cancellationToken.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: cancellationToken", () => {
     // Disable sourcemap support for the duration of the test, as sourcemapping the errors generated during this test is slow and not something we care to test
diff --git a/src/testRunner/unittests/tsserver/compileOnSave.ts b/src/testRunner/unittests/tsserver/compileOnSave.ts
index 133ef59c81..1036e827f8 100644
--- a/src/testRunner/unittests/tsserver/compileOnSave.ts
+++ b/src/testRunner/unittests/tsserver/compileOnSave.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 import CommandNames = ts.server.CommandNames;
 function createTestTypingsInstaller(host: ts.server.ServerHost) {
diff --git a/src/testRunner/unittests/tsserver/completions.ts b/src/testRunner/unittests/tsserver/completions.ts
index 4e046ae6eb..794ede9802 100644
--- a/src/testRunner/unittests/tsserver/completions.ts
+++ b/src/testRunner/unittests/tsserver/completions.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: completions", () => {
     it("works", () => {
diff --git a/src/testRunner/unittests/tsserver/completionsIncomplete.ts b/src/testRunner/unittests/tsserver/completionsIncomplete.ts
index e0d3ee5ed4..769ef3d1e3 100644
--- a/src/testRunner/unittests/tsserver/completionsIncomplete.ts
+++ b/src/testRunner/unittests/tsserver/completionsIncomplete.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 function createExportingModuleFile(path: string, exportPrefix: string, exportCount: number): ts.projectSystem.File {
     return {
diff --git a/src/testRunner/unittests/tsserver/configFileSearch.ts b/src/testRunner/unittests/tsserver/configFileSearch.ts
index 8ed168c683..f75fce8972 100644
--- a/src/testRunner/unittests/tsserver/configFileSearch.ts
+++ b/src/testRunner/unittests/tsserver/configFileSearch.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: searching for config file", () => {
     it("should stop at projectRootPath if given", () => {
diff --git a/src/testRunner/unittests/tsserver/configuredProjects.ts b/src/testRunner/unittests/tsserver/configuredProjects.ts
index 97cbf4e951..4db0b49d9d 100644
--- a/src/testRunner/unittests/tsserver/configuredProjects.ts
+++ b/src/testRunner/unittests/tsserver/configuredProjects.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: ConfiguredProjects", () => {
     it("create configured project without file list", () => {
diff --git a/src/testRunner/unittests/tsserver/declarationFileMaps.ts b/src/testRunner/unittests/tsserver/declarationFileMaps.ts
index ccc6b96263..342549040b 100644
--- a/src/testRunner/unittests/tsserver/declarationFileMaps.ts
+++ b/src/testRunner/unittests/tsserver/declarationFileMaps.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 function documentSpanFromSubstring({ file, text, contextText, options, contextOptions }: ts.projectSystem.DocumentSpanFromSubstring): ts.DocumentSpan {
     const contextSpan = contextText !== undefined ? documentSpanFromSubstring({ file, text: contextText, options: contextOptions }) : undefined;
diff --git a/src/testRunner/unittests/tsserver/documentRegistry.ts b/src/testRunner/unittests/tsserver/documentRegistry.ts
index fbb291a738..ffa633974d 100644
--- a/src/testRunner/unittests/tsserver/documentRegistry.ts
+++ b/src/testRunner/unittests/tsserver/documentRegistry.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: document registry in project service", () => {
     const importModuleContent = `import {a} from "./module1"`;
diff --git a/src/testRunner/unittests/tsserver/duplicatePackages.ts b/src/testRunner/unittests/tsserver/duplicatePackages.ts
index 7dac9af67e..8dfa12f6ed 100644
--- a/src/testRunner/unittests/tsserver/duplicatePackages.ts
+++ b/src/testRunner/unittests/tsserver/duplicatePackages.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: duplicate packages", () => {
     // Tests that 'moduleSpecifiers.ts' will import from the redirecting file, and not from the file it redirects to, if that can provide a global module specifier.
diff --git a/src/testRunner/unittests/tsserver/dynamicFiles.ts b/src/testRunner/unittests/tsserver/dynamicFiles.ts
index 8ef9fd038b..538b812ff6 100644
--- a/src/testRunner/unittests/tsserver/dynamicFiles.ts
+++ b/src/testRunner/unittests/tsserver/dynamicFiles.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import { verifyDynamic } from "./helpers";
+import * as ts from "../../_namespaces/ts.js";
+import { verifyDynamic } from "./helpers.js";
 
 function verifyPathRecognizedAsDynamic(path: string) {
     const file: ts.projectSystem.File = {
diff --git a/src/testRunner/unittests/tsserver/events/largeFileReferenced.ts b/src/testRunner/unittests/tsserver/events/largeFileReferenced.ts
index 57a295d8cf..2c52e0b765 100644
--- a/src/testRunner/unittests/tsserver/events/largeFileReferenced.ts
+++ b/src/testRunner/unittests/tsserver/events/largeFileReferenced.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../../_namespaces/ts";
+import * as ts from "../../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: events:: LargeFileReferencedEvent with large file", () => {
 
diff --git a/src/testRunner/unittests/tsserver/events/projectLanguageServiceState.ts b/src/testRunner/unittests/tsserver/events/projectLanguageServiceState.ts
index 7fcb0b56c4..d5707f9037 100644
--- a/src/testRunner/unittests/tsserver/events/projectLanguageServiceState.ts
+++ b/src/testRunner/unittests/tsserver/events/projectLanguageServiceState.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../../_namespaces/ts";
+import * as ts from "../../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: events:: ProjectLanguageServiceStateEvent", () => {
     it("language service disabled events are triggered", () => {
diff --git a/src/testRunner/unittests/tsserver/events/projectLoading.ts b/src/testRunner/unittests/tsserver/events/projectLoading.ts
index ee8d024157..fe2e9e8e8c 100644
--- a/src/testRunner/unittests/tsserver/events/projectLoading.ts
+++ b/src/testRunner/unittests/tsserver/events/projectLoading.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../../_namespaces/ts";
+import * as ts from "../../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: events:: ProjectLoadingStart and ProjectLoadingFinish events", () => {
     const aTs: ts.projectSystem.File = {
diff --git a/src/testRunner/unittests/tsserver/events/projectUpdatedInBackground.ts b/src/testRunner/unittests/tsserver/events/projectUpdatedInBackground.ts
index 47d51d169c..5540b24156 100644
--- a/src/testRunner/unittests/tsserver/events/projectUpdatedInBackground.ts
+++ b/src/testRunner/unittests/tsserver/events/projectUpdatedInBackground.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../../_namespaces/ts";
+import * as ts from "../../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: events:: ProjectsUpdatedInBackground", () => {
     function verifyFiles(caption: string, actual: readonly string[], expected: readonly string[]) {
diff --git a/src/testRunner/unittests/tsserver/exportMapCache.ts b/src/testRunner/unittests/tsserver/exportMapCache.ts
index 4cbb70fd45..7f2116b027 100644
--- a/src/testRunner/unittests/tsserver/exportMapCache.ts
+++ b/src/testRunner/unittests/tsserver/exportMapCache.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 const packageJson: ts.projectSystem.File = {
     path: "/package.json",
diff --git a/src/testRunner/unittests/tsserver/externalProjects.ts b/src/testRunner/unittests/tsserver/externalProjects.ts
index cbd3ffced2..d2f8fa670f 100644
--- a/src/testRunner/unittests/tsserver/externalProjects.ts
+++ b/src/testRunner/unittests/tsserver/externalProjects.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: tsserver:: ExternalProjects", () => {
     describe("can handle tsconfig file name with difference casing", () => {
diff --git a/src/testRunner/unittests/tsserver/forceConsistentCasingInFileNames.ts b/src/testRunner/unittests/tsserver/forceConsistentCasingInFileNames.ts
index 74551041f8..463bf4127a 100644
--- a/src/testRunner/unittests/tsserver/forceConsistentCasingInFileNames.ts
+++ b/src/testRunner/unittests/tsserver/forceConsistentCasingInFileNames.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: forceConsistentCasingInFileNames", () => {
     it("works when extends is specified with a case insensitive file system", () => {
diff --git a/src/testRunner/unittests/tsserver/formatSettings.ts b/src/testRunner/unittests/tsserver/formatSettings.ts
index 0fde7703d3..585c53f4a4 100644
--- a/src/testRunner/unittests/tsserver/formatSettings.ts
+++ b/src/testRunner/unittests/tsserver/formatSettings.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: format settings", () => {
     it("can be set globally", () => {
diff --git a/src/testRunner/unittests/tsserver/getApplicableRefactors.ts b/src/testRunner/unittests/tsserver/getApplicableRefactors.ts
index 65497bb2bc..5687a98b23 100644
--- a/src/testRunner/unittests/tsserver/getApplicableRefactors.ts
+++ b/src/testRunner/unittests/tsserver/getApplicableRefactors.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: getApplicableRefactors", () => {
     it("works when taking position", () => {
diff --git a/src/testRunner/unittests/tsserver/getEditsForFileRename.ts b/src/testRunner/unittests/tsserver/getEditsForFileRename.ts
index 89e3d708be..bbbd655cbc 100644
--- a/src/testRunner/unittests/tsserver/getEditsForFileRename.ts
+++ b/src/testRunner/unittests/tsserver/getEditsForFileRename.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: getEditsForFileRename", () => {
     it("works for host implementing 'resolveModuleNames' and 'getResolvedModuleWithFailedLookupLocationsFromCache'", () => {
diff --git a/src/testRunner/unittests/tsserver/getExportReferences.ts b/src/testRunner/unittests/tsserver/getExportReferences.ts
index f1009a8d56..cd400da64a 100644
--- a/src/testRunner/unittests/tsserver/getExportReferences.ts
+++ b/src/testRunner/unittests/tsserver/getExportReferences.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: getExportReferences", () => {
     const exportVariable = "export const value = 0;";
diff --git a/src/testRunner/unittests/tsserver/getFileReferences.ts b/src/testRunner/unittests/tsserver/getFileReferences.ts
index a79ad89a41..8f4c438b8a 100644
--- a/src/testRunner/unittests/tsserver/getFileReferences.ts
+++ b/src/testRunner/unittests/tsserver/getFileReferences.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: getFileReferences", () => {
     const importA = `import "./a";`;
diff --git a/src/testRunner/unittests/tsserver/helpers.ts b/src/testRunner/unittests/tsserver/helpers.ts
index 055ca6ae6c..76c7ea549b 100644
--- a/src/testRunner/unittests/tsserver/helpers.ts
+++ b/src/testRunner/unittests/tsserver/helpers.ts
@@ -1,6 +1,6 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 export import TI = ts.server.typingsInstaller;
 export import protocol = ts.server.protocol;
diff --git a/src/testRunner/unittests/tsserver/importHelpers.ts b/src/testRunner/unittests/tsserver/importHelpers.ts
index 483ce6edda..e0727e5679 100644
--- a/src/testRunner/unittests/tsserver/importHelpers.ts
+++ b/src/testRunner/unittests/tsserver/importHelpers.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: import helpers", () => {
     it("should not crash in tsserver", () => {
diff --git a/src/testRunner/unittests/tsserver/inferredProjects.ts b/src/testRunner/unittests/tsserver/inferredProjects.ts
index 12e51e9810..9bf4810f99 100644
--- a/src/testRunner/unittests/tsserver/inferredProjects.ts
+++ b/src/testRunner/unittests/tsserver/inferredProjects.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: Inferred projects", () => {
     it("create inferred project", () => {
diff --git a/src/testRunner/unittests/tsserver/inlayHints.ts b/src/testRunner/unittests/tsserver/inlayHints.ts
index d5e41272cc..5aa16c9d56 100644
--- a/src/testRunner/unittests/tsserver/inlayHints.ts
+++ b/src/testRunner/unittests/tsserver/inlayHints.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: inlayHints", () => {
     const configFile: ts.projectSystem.File = {
diff --git a/src/testRunner/unittests/tsserver/jsdocTag.ts b/src/testRunner/unittests/tsserver/jsdocTag.ts
index ec0c44b1e1..5c3ef7e2fc 100644
--- a/src/testRunner/unittests/tsserver/jsdocTag.ts
+++ b/src/testRunner/unittests/tsserver/jsdocTag.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: jsdoc @link ", () => {
     const config: ts.projectSystem.File = {
diff --git a/src/testRunner/unittests/tsserver/languageService.ts b/src/testRunner/unittests/tsserver/languageService.ts
index 5353b73ccd..da7cdd509c 100644
--- a/src/testRunner/unittests/tsserver/languageService.ts
+++ b/src/testRunner/unittests/tsserver/languageService.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsserver:: languageService", () => {
     it("should work correctly on case-sensitive file systems", () => {
diff --git a/src/testRunner/unittests/tsserver/maxNodeModuleJsDepth.ts b/src/testRunner/unittests/tsserver/maxNodeModuleJsDepth.ts
index 928ec383d4..718dca2da7 100644
--- a/src/testRunner/unittests/tsserver/maxNodeModuleJsDepth.ts
+++ b/src/testRunner/unittests/tsserver/maxNodeModuleJsDepth.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: maxNodeModuleJsDepth for inferred projects", () => {
     it("should be set to 2 if the project has js root files", () => {
diff --git a/src/testRunner/unittests/tsserver/metadataInResponse.ts b/src/testRunner/unittests/tsserver/metadataInResponse.ts
index 35d3081ebc..ba40107f0b 100644
--- a/src/testRunner/unittests/tsserver/metadataInResponse.ts
+++ b/src/testRunner/unittests/tsserver/metadataInResponse.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: tsserver:: with metadata in response", () => {
     const metadata = "Extra Info";
diff --git a/src/testRunner/unittests/tsserver/moduleResolution.ts b/src/testRunner/unittests/tsserver/moduleResolution.ts
index 0ff53167e2..c289d9d3f8 100644
--- a/src/testRunner/unittests/tsserver/moduleResolution.ts
+++ b/src/testRunner/unittests/tsserver/moduleResolution.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 describe("unittests:: tsserver:: moduleResolution", () => {
     describe("package json file is edited", () => {
@@ -119,4 +119,4 @@ describe("unittests:: tsserver:: moduleResolution", () => {
             ts.projectSystem.baselineTsserverLogs("moduleResolution", "package json file is edited when package json with type module exists", session);
         });
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsserver/moduleSpecifierCache.ts b/src/testRunner/unittests/tsserver/moduleSpecifierCache.ts
index 59d05ef1a9..8fc620302d 100644
--- a/src/testRunner/unittests/tsserver/moduleSpecifierCache.ts
+++ b/src/testRunner/unittests/tsserver/moduleSpecifierCache.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 const packageJson: ts.projectSystem.File = {
     path: "/package.json",
diff --git a/src/testRunner/unittests/tsserver/navTo.ts b/src/testRunner/unittests/tsserver/navTo.ts
index 1d181b4551..6fc2b85a64 100644
--- a/src/testRunner/unittests/tsserver/navTo.ts
+++ b/src/testRunner/unittests/tsserver/navTo.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: navigate-to for javascript project", () => {
     function findNavToItem(items: ts.projectSystem.protocol.NavtoItem[], itemName: string, itemKind: string) {
diff --git a/src/testRunner/unittests/tsserver/occurences.ts b/src/testRunner/unittests/tsserver/occurences.ts
index d797525916..a0ec7f5241 100644
--- a/src/testRunner/unittests/tsserver/occurences.ts
+++ b/src/testRunner/unittests/tsserver/occurences.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: occurrence highlight on string", () => {
     it("should be marked if only on string values", () => {
diff --git a/src/testRunner/unittests/tsserver/openFile.ts b/src/testRunner/unittests/tsserver/openFile.ts
index ae8e284d61..f4833e5627 100644
--- a/src/testRunner/unittests/tsserver/openFile.ts
+++ b/src/testRunner/unittests/tsserver/openFile.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: Open-file", () => {
     it("can be reloaded with empty content", () => {
diff --git a/src/testRunner/unittests/tsserver/packageJsonInfo.ts b/src/testRunner/unittests/tsserver/packageJsonInfo.ts
index d6bf2116a8..0be2879088 100644
--- a/src/testRunner/unittests/tsserver/packageJsonInfo.ts
+++ b/src/testRunner/unittests/tsserver/packageJsonInfo.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 const tsConfig: ts.projectSystem.File = {
     path: "/tsconfig.json",
diff --git a/src/testRunner/unittests/tsserver/partialSemanticServer.ts b/src/testRunner/unittests/tsserver/partialSemanticServer.ts
index 60d4adb1ae..400dbff24f 100644
--- a/src/testRunner/unittests/tsserver/partialSemanticServer.ts
+++ b/src/testRunner/unittests/tsserver/partialSemanticServer.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: Semantic operations on partialSemanticServer", () => {
     function setup() {
diff --git a/src/testRunner/unittests/tsserver/plugins.ts b/src/testRunner/unittests/tsserver/plugins.ts
index 54320b2d57..9848f41e5a 100644
--- a/src/testRunner/unittests/tsserver/plugins.ts
+++ b/src/testRunner/unittests/tsserver/plugins.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 describe("unittests:: tsserver:: plugins loading", () => {
     const testProtocolCommand = "testProtocolCommand";
@@ -102,4 +102,4 @@ describe("unittests:: tsserver:: plugins loading", () => {
         };
         assert.deepEqual(resp, expectedResp);
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsserver/projectErrors.ts b/src/testRunner/unittests/tsserver/projectErrors.ts
index 49c0651187..2d994e8507 100644
--- a/src/testRunner/unittests/tsserver/projectErrors.ts
+++ b/src/testRunner/unittests/tsserver/projectErrors.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: Project Errors", () => {
     function checkProjectErrors(projectFiles: ts.server.ProjectFilesWithTSDiagnostics, expectedErrors: readonly string[]): void {
@@ -769,7 +769,7 @@ describe("unittests:: tsserver:: Project Errors with resolveJsonModule", () => {
     function createSessionForTest({ include }: { include: readonly string[]; }) {
         const test: ts.projectSystem.File = {
             path: `${ts.tscWatch.projectRoot}/src/test.ts`,
-            content: `import * as blabla from "./blabla.json";
+            content: `import * as blabla from "./blabla.json.js";
 declare var console: any;
 console.log(blabla);`
         };
diff --git a/src/testRunner/unittests/tsserver/projectReferenceCompileOnSave.ts b/src/testRunner/unittests/tsserver/projectReferenceCompileOnSave.ts
index f2a6941347..45497f1b1d 100644
--- a/src/testRunner/unittests/tsserver/projectReferenceCompileOnSave.ts
+++ b/src/testRunner/unittests/tsserver/projectReferenceCompileOnSave.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: with project references and compile on save", () => {
     const dependecyLocation = `${ts.tscWatch.projectRoot}/dependency`;
@@ -1733,4 +1733,4 @@ describe("unittests:: tsserver:: with project references and compile on save wit
         });
         ts.projectSystem.baselineTsserverLogs("projectReferenceCompileOnSave", "compile on save emits same output as project build with external project", session);
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsserver/projectReferenceErrors.ts b/src/testRunner/unittests/tsserver/projectReferenceErrors.ts
index 1dc9e6e020..5d21e10145 100644
--- a/src/testRunner/unittests/tsserver/projectReferenceErrors.ts
+++ b/src/testRunner/unittests/tsserver/projectReferenceErrors.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: with project references and error reporting", () => {
     const dependecyLocation = `${ts.tscWatch.projectRoot}/dependency`;
diff --git a/src/testRunner/unittests/tsserver/projectReferences.ts b/src/testRunner/unittests/tsserver/projectReferences.ts
index d03e2167de..95c9571359 100644
--- a/src/testRunner/unittests/tsserver/projectReferences.ts
+++ b/src/testRunner/unittests/tsserver/projectReferences.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import { createHostWithSolutionBuild } from "./helpers";
+import * as ts from "../../_namespaces/ts.js";
+import { createHostWithSolutionBuild } from "./helpers.js";
 
 describe("unittests:: tsserver:: with project references and tsbuild", () => {
     describe("with container project", () => {
diff --git a/src/testRunner/unittests/tsserver/projectReferencesSourcemap.ts b/src/testRunner/unittests/tsserver/projectReferencesSourcemap.ts
index fd644f6291..a1181a6b6a 100644
--- a/src/testRunner/unittests/tsserver/projectReferencesSourcemap.ts
+++ b/src/testRunner/unittests/tsserver/projectReferencesSourcemap.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: with project references and tsbuild source map", () => {
     const dependecyLocation = `${ts.tscWatch.projectRoot}/dependency`;
@@ -3038,4 +3038,4 @@ ${dependencyTs.content}`);
             });
         });
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsserver/projects.ts b/src/testRunner/unittests/tsserver/projects.ts
index ee2ec740a3..03372234a8 100644
--- a/src/testRunner/unittests/tsserver/projects.ts
+++ b/src/testRunner/unittests/tsserver/projects.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: Projects", () => {
     it("handles the missing files - that were added to program because they were added with ///<ref", () => {
diff --git a/src/testRunner/unittests/tsserver/projectsWithReferences.ts b/src/testRunner/unittests/tsserver/projectsWithReferences.ts
index 75700e7df0..9de4f56cbc 100644
--- a/src/testRunner/unittests/tsserver/projectsWithReferences.ts
+++ b/src/testRunner/unittests/tsserver/projectsWithReferences.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: projects with references: invoking when references are already built", () => {
     it("on sample project", () => {
@@ -267,4 +267,4 @@ export class A {}`
             ts.projectSystem.baselineTsserverLogs("projectsWithReferences", "trasitive references without files with deleting transitively referenced config file", service);
         });
     });
-});
\ No newline at end of file
+});
diff --git a/src/testRunner/unittests/tsserver/refactors.ts b/src/testRunner/unittests/tsserver/refactors.ts
index 8468ef9ef7..98bdd5fd07 100644
--- a/src/testRunner/unittests/tsserver/refactors.ts
+++ b/src/testRunner/unittests/tsserver/refactors.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: refactors", () => {
     it("use formatting options", () => {
diff --git a/src/testRunner/unittests/tsserver/reload.ts b/src/testRunner/unittests/tsserver/reload.ts
index 2fa5355062..05ef7918c5 100644
--- a/src/testRunner/unittests/tsserver/reload.ts
+++ b/src/testRunner/unittests/tsserver/reload.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: reload", () => {
     it("should work with temp file", () => {
diff --git a/src/testRunner/unittests/tsserver/reloadProjects.ts b/src/testRunner/unittests/tsserver/reloadProjects.ts
index b6f479f8fd..e86c576417 100644
--- a/src/testRunner/unittests/tsserver/reloadProjects.ts
+++ b/src/testRunner/unittests/tsserver/reloadProjects.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: reloadProjects", () => {
     const configFile: ts.projectSystem.File = {
diff --git a/src/testRunner/unittests/tsserver/rename.ts b/src/testRunner/unittests/tsserver/rename.ts
index e3d465eb70..f3910def13 100644
--- a/src/testRunner/unittests/tsserver/rename.ts
+++ b/src/testRunner/unittests/tsserver/rename.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: rename", () => {
     it("works with fileToRename", () => {
diff --git a/src/testRunner/unittests/tsserver/resolutionCache.ts b/src/testRunner/unittests/tsserver/resolutionCache.ts
index 3e37ab44c3..355f7380b2 100644
--- a/src/testRunner/unittests/tsserver/resolutionCache.ts
+++ b/src/testRunner/unittests/tsserver/resolutionCache.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: resolutionCache:: tsserverProjectSystem extra resolution pass in server host", () => {
     it("can load typings that are proper modules", () => {
diff --git a/src/testRunner/unittests/tsserver/session.ts b/src/testRunner/unittests/tsserver/session.ts
index 5148809511..f27e48a18e 100644
--- a/src/testRunner/unittests/tsserver/session.ts
+++ b/src/testRunner/unittests/tsserver/session.ts
@@ -1,8 +1,8 @@
 import { expect } from "chai";
 
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 let lastWrittenToHost: string;
 const noopFileWatcher: ts.FileWatcher = { close: ts.noop };
diff --git a/src/testRunner/unittests/tsserver/skipLibCheck.ts b/src/testRunner/unittests/tsserver/skipLibCheck.ts
index 0ade6c7d47..bed45b423e 100644
--- a/src/testRunner/unittests/tsserver/skipLibCheck.ts
+++ b/src/testRunner/unittests/tsserver/skipLibCheck.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: with skipLibCheck", () => {
     it("should be turned on for js-only inferred projects", () => {
diff --git a/src/testRunner/unittests/tsserver/smartSelection.ts b/src/testRunner/unittests/tsserver/smartSelection.ts
index bbd120ac11..f03b47d52c 100644
--- a/src/testRunner/unittests/tsserver/smartSelection.ts
+++ b/src/testRunner/unittests/tsserver/smartSelection.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 function setup(fileName: string, content: string) {
     const file: ts.projectSystem.File = { path: fileName, content };
diff --git a/src/testRunner/unittests/tsserver/symLinks.ts b/src/testRunner/unittests/tsserver/symLinks.ts
index 5b9b0e6392..19b4cb2c29 100644
--- a/src/testRunner/unittests/tsserver/symLinks.ts
+++ b/src/testRunner/unittests/tsserver/symLinks.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: symLinks", () => {
     it("rename in common file renames all project", () => {
diff --git a/src/testRunner/unittests/tsserver/symlinkCache.ts b/src/testRunner/unittests/tsserver/symlinkCache.ts
index e821aabdf2..1091c7cabb 100644
--- a/src/testRunner/unittests/tsserver/symlinkCache.ts
+++ b/src/testRunner/unittests/tsserver/symlinkCache.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 const appTsconfigJson: ts.projectSystem.File = {
     path: "/packages/app/tsconfig.json",
diff --git a/src/testRunner/unittests/tsserver/syntacticServer.ts b/src/testRunner/unittests/tsserver/syntacticServer.ts
index ac40a78ce8..a1013b6187 100644
--- a/src/testRunner/unittests/tsserver/syntacticServer.ts
+++ b/src/testRunner/unittests/tsserver/syntacticServer.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: Semantic operations on Syntax server", () => {
     function setup() {
diff --git a/src/testRunner/unittests/tsserver/syntaxOperations.ts b/src/testRunner/unittests/tsserver/syntaxOperations.ts
index 505bffd884..dd83e73215 100644
--- a/src/testRunner/unittests/tsserver/syntaxOperations.ts
+++ b/src/testRunner/unittests/tsserver/syntaxOperations.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: syntax operations", () => {
     function navBarFull(session: ts.projectSystem.TestSession, file: ts.projectSystem.File) {
diff --git a/src/testRunner/unittests/tsserver/telemetry.ts b/src/testRunner/unittests/tsserver/telemetry.ts
index a320a21e49..c879016da9 100644
--- a/src/testRunner/unittests/tsserver/telemetry.ts
+++ b/src/testRunner/unittests/tsserver/telemetry.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: project telemetry", () => {
     it("does nothing for inferred project", () => {
diff --git a/src/testRunner/unittests/tsserver/textStorage.ts b/src/testRunner/unittests/tsserver/textStorage.ts
index 68c84e0b52..63dff8ffe1 100644
--- a/src/testRunner/unittests/tsserver/textStorage.ts
+++ b/src/testRunner/unittests/tsserver/textStorage.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: Text storage", () => {
     const f = {
diff --git a/src/testRunner/unittests/tsserver/typeAquisition.ts b/src/testRunner/unittests/tsserver/typeAquisition.ts
index ea501d5f91..90cb461344 100644
--- a/src/testRunner/unittests/tsserver/typeAquisition.ts
+++ b/src/testRunner/unittests/tsserver/typeAquisition.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: autoDiscovery", () => {
     it("does not depend on extension", () => {
diff --git a/src/testRunner/unittests/tsserver/typeOnlyImportChains.ts b/src/testRunner/unittests/tsserver/typeOnlyImportChains.ts
index 91857ce790..b824c11bb1 100644
--- a/src/testRunner/unittests/tsserver/typeOnlyImportChains.ts
+++ b/src/testRunner/unittests/tsserver/typeOnlyImportChains.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: typeOnlyImportChains", () => {
     it("named export -> type-only namespace import -> named export -> named import", () => {
diff --git a/src/testRunner/unittests/tsserver/typeReferenceDirectives.ts b/src/testRunner/unittests/tsserver/typeReferenceDirectives.ts
index 24a3de5650..85fce9d0ce 100644
--- a/src/testRunner/unittests/tsserver/typeReferenceDirectives.ts
+++ b/src/testRunner/unittests/tsserver/typeReferenceDirectives.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 describe("unittests:: tsserver:: typeReferenceDirectives", () => {
     it("when typeReferenceDirective contains UpperCasePackage", () => {
diff --git a/src/testRunner/unittests/tsserver/typingsInstaller.ts b/src/testRunner/unittests/tsserver/typingsInstaller.ts
index 65a0c908f9..b79a113d41 100644
--- a/src/testRunner/unittests/tsserver/typingsInstaller.ts
+++ b/src/testRunner/unittests/tsserver/typingsInstaller.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 import validatePackageName = ts.JsTyping.validatePackageName;
 import NameValidationResult = ts.JsTyping.NameValidationResult;
diff --git a/src/testRunner/unittests/tsserver/versionCache.ts b/src/testRunner/unittests/tsserver/versionCache.ts
index 37179f9261..5a3c570bb3 100644
--- a/src/testRunner/unittests/tsserver/versionCache.ts
+++ b/src/testRunner/unittests/tsserver/versionCache.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Harness from "../../_namespaces/Harness";
+import * as ts from "../../_namespaces/ts.js";
+import * as Harness from "../../_namespaces/Harness.js";
 
 function editFlat(position: number, deletedLength: number, newText: string, source: string) {
     return source.substring(0, position) + newText + source.substring(position + deletedLength, source.length);
diff --git a/src/testRunner/unittests/tsserver/watchEnvironment.ts b/src/testRunner/unittests/tsserver/watchEnvironment.ts
index 99a0b3aff5..e850509d61 100644
--- a/src/testRunner/unittests/tsserver/watchEnvironment.ts
+++ b/src/testRunner/unittests/tsserver/watchEnvironment.ts
@@ -1,4 +1,4 @@
-import * as ts from "../../_namespaces/ts";
+import * as ts from "../../_namespaces/ts.js";
 
 import Tsc_WatchDirectory = ts.TestFSWithWatch.Tsc_WatchDirectory;
 describe("unittests:: tsserver:: watchEnvironment:: tsserverProjectSystem watchDirectories implementation", () => {
diff --git a/src/testRunner/unittests/tsserver/webServer.ts b/src/testRunner/unittests/tsserver/webServer.ts
index 4e50f9297f..d20a6a2f48 100644
--- a/src/testRunner/unittests/tsserver/webServer.ts
+++ b/src/testRunner/unittests/tsserver/webServer.ts
@@ -1,5 +1,5 @@
-import * as ts from "../../_namespaces/ts";
-import * as Utils from "../../_namespaces/Utils";
+import * as ts from "../../_namespaces/ts.js";
+import * as Utils from "../../_namespaces/Utils.js";
 
 /* eslint-disable local/boolean-trivia */
 describe("unittests:: tsserver:: webServer", () => {
diff --git a/src/tsc/_namespaces/ts.ts b/src/tsc/_namespaces/ts.ts
index 8e361ae718..3de85e26c7 100644
--- a/src/tsc/_namespaces/ts.ts
+++ b/src/tsc/_namespaces/ts.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../executeCommandLine/_namespaces/ts";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../executeCommandLine/_namespaces/ts.js";
diff --git a/src/tsc/tsc.ts b/src/tsc/tsc.ts
index ce8b356b68..a5140d6544 100644
--- a/src/tsc/tsc.ts
+++ b/src/tsc/tsc.ts
@@ -1,4 +1,4 @@
-import * as ts from "./_namespaces/ts";
+import * as ts from "./_namespaces/ts.js";
 
 // This file actually uses arguments passed on commandline and executes it
 
diff --git a/src/tsconfig-base.json b/src/tsconfig-base.json
index bae7684eed..e75aa6220f 100644
--- a/src/tsconfig-base.json
+++ b/src/tsconfig-base.json
@@ -3,7 +3,8 @@
         "pretty": true,
         "lib": ["es2015.iterable", "es2015.generator", "es5"],
         "target": "es5",
-        "moduleResolution": "node",
+        "module": "Node16",
+        "moduleResolution": "Node16",
 
         "declaration": true,
         "declarationMap": true,
diff --git a/src/tsserver/_namespaces/ts.server.ts b/src/tsserver/_namespaces/ts.server.ts
index c7eb056ac0..c778555f11 100644
--- a/src/tsserver/_namespaces/ts.server.ts
+++ b/src/tsserver/_namespaces/ts.server.ts
@@ -1,8 +1,8 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-export * from "../../server/_namespaces/ts.server";
-export * from "../../webServer/_namespaces/ts.server";
-export * from "../nodeServer";
-export * from "../webServer";
-export * from "../server";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+export * from "../../server/_namespaces/ts.server.js";
+export * from "../../webServer/_namespaces/ts.server.js";
+export * from "../nodeServer.js";
+export * from "../webServer.js";
+export * from "../server.js";
diff --git a/src/tsserver/_namespaces/ts.ts b/src/tsserver/_namespaces/ts.ts
index 70c879deb4..3dcd3fc4e3 100644
--- a/src/tsserver/_namespaces/ts.ts
+++ b/src/tsserver/_namespaces/ts.ts
@@ -1,10 +1,10 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../services/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../server/_namespaces/ts";
-export * from "../../webServer/_namespaces/ts";
-export * from "../../deprecatedCompat/_namespaces/ts";
-import * as server from "./ts.server";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../services/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../server/_namespaces/ts.js";
+export * from "../../webServer/_namespaces/ts.js";
+export * from "../../deprecatedCompat/_namespaces/ts.js";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/tsserver/nodeServer.ts b/src/tsserver/nodeServer.ts
index 9ea213f134..0d03ef0986 100644
--- a/src/tsserver/nodeServer.ts
+++ b/src/tsserver/nodeServer.ts
@@ -1,4 +1,11 @@
-import * as ts from "./_namespaces/ts";
+import { createRequire } from "module";
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+const require = createRequire(import.meta.url);
+const __filename = fileURLToPath(new URL(import.meta.url));
+const __dirname = dirname(__filename);
+
+import * as ts from "./_namespaces/ts.js";
 import {
     ActionInvalidate, ActionPackageInstalled, ActionSet, Arguments, BaseLogger, BeginInstallTypes,
     createInstallTypingsRequest, EndInstallTypes, Event, EventBeginInstallTypes, EventEndInstallTypes,
@@ -8,14 +15,14 @@ import {
     PackageInstalledResponse, Project, ProjectService, protocol, ServerCancellationToken, ServerHost, Session,
     SetTypings, StartInput, StartSessionOptions, stringifyIndented, toEvent, TypesRegistryResponse,
     TypingInstallerRequestUnion,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 import {
     ApplyCodeActionCommandResult, assertType, CharacterCodes, combinePaths, createQueue, Debug, directorySeparator,
     DirectoryWatcherCallback, ESMap, FileWatcher, getDirectoryPath, getEntries, getNodeMajorVersion, getRootLength,
     JsTyping, LanguageServiceMode, Map, MapLike, noop, noopFileWatcher, normalizeSlashes, resolveJSModule,
     SortedReadonlyArray, startTracing, stripQuotes, sys, toFileNameLowerCase, tracing, TypeAcquisition,
     validateLocaleAndSetLanguage, versionMajorMinor, WatchOptions,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 interface LogOptions {
     file?: string;
diff --git a/src/tsserver/server.ts b/src/tsserver/server.ts
index 754b3e2edf..55e63c406d 100644
--- a/src/tsserver/server.ts
+++ b/src/tsserver/server.ts
@@ -1,8 +1,11 @@
+import { createRequire } from "module";
+const require = createRequire(import.meta.url);
+
 import {
     emptyArray, findArgument, hasArgument, initializeNodeSystem, initializeWebSystem, Logger, LogLevel, Msg,
     ServerCancellationToken, StartSessionOptions,
-} from "./_namespaces/ts.server";
-import { Debug, getNodeMajorVersion, LanguageServiceMode, setStackTraceLimit, sys, version } from "./_namespaces/ts";
+} from "./_namespaces/ts.server.js";
+import { Debug, getNodeMajorVersion, LanguageServiceMode, setStackTraceLimit, sys, version } from "./_namespaces/ts.js";
 
 declare const addEventListener: any;
 declare const removeEventListener: any;
diff --git a/src/tsserver/webServer.ts b/src/tsserver/webServer.ts
index ed941f59b7..133b5dc4bf 100644
--- a/src/tsserver/webServer.ts
+++ b/src/tsserver/webServer.ts
@@ -1,12 +1,12 @@
-import * as ts from "./_namespaces/ts";
-import * as server from "./_namespaces/ts.server";
+import * as ts from "./_namespaces/ts.js";
+import * as server from "./_namespaces/ts.server.js";
 import {
     findArgument, getLogLevel, Logger, MainProcessLogger, Msg, nullCancellationToken, ServerCancellationToken,
     ServerHost, StartInput, StartSessionOptions, WebHost,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 import {
     Debug, LanguageServiceMode, LogLevel, noop, returnFalse, returnUndefined, setSys, sys, validateLocaleAndSetLanguage,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 declare const addEventListener: any;
 declare const postMessage: any;
diff --git a/src/tsserverlibrary/_namespaces/ts.server.ts b/src/tsserverlibrary/_namespaces/ts.server.ts
index 21b0d0335f..6e53b0a9ae 100644
--- a/src/tsserverlibrary/_namespaces/ts.server.ts
+++ b/src/tsserverlibrary/_namespaces/ts.server.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-export * from "../../server/_namespaces/ts.server";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+export * from "../../server/_namespaces/ts.server.js";
diff --git a/src/tsserverlibrary/_namespaces/ts.ts b/src/tsserverlibrary/_namespaces/ts.ts
index 3c0e2227e9..52cd4ae187 100644
--- a/src/tsserverlibrary/_namespaces/ts.ts
+++ b/src/tsserverlibrary/_namespaces/ts.ts
@@ -1,9 +1,9 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../services/_namespaces/ts";
-export * from "../../server/_namespaces/ts";
-export * from "../../deprecatedCompat/_namespaces/ts";
-import * as server from "./ts.server";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../services/_namespaces/ts.js";
+export * from "../../server/_namespaces/ts.js";
+export * from "../../deprecatedCompat/_namespaces/ts.js";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/tsserverlibrary/tsserverlibrary.ts b/src/tsserverlibrary/tsserverlibrary.ts
index caa2e6b1db..95810c2d90 100644
--- a/src/tsserverlibrary/tsserverlibrary.ts
+++ b/src/tsserverlibrary/tsserverlibrary.ts
@@ -1 +1 @@
-export * from "./_namespaces/ts";
+export * from "./_namespaces/ts.js";
diff --git a/src/typescript/_namespaces/ts.ts b/src/typescript/_namespaces/ts.ts
index e55b264380..067e4af349 100644
--- a/src/typescript/_namespaces/ts.ts
+++ b/src/typescript/_namespaces/ts.ts
@@ -1,6 +1,6 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../services/_namespaces/ts";
-export * from "../../deprecatedCompat/_namespaces/ts";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../services/_namespaces/ts.js";
+export * from "../../deprecatedCompat/_namespaces/ts.js";
diff --git a/src/typescript/typescript.ts b/src/typescript/typescript.ts
index 8a5136a1eb..972fb04acf 100644
--- a/src/typescript/typescript.ts
+++ b/src/typescript/typescript.ts
@@ -1,4 +1,4 @@
-import { Debug, LogLevel } from "./_namespaces/ts";
+import { Debug, LogLevel } from "./_namespaces/ts.js";
 
 // enable deprecation logging
 declare const console: any;
@@ -15,4 +15,4 @@ if (typeof console !== "undefined") {
     };
 }
 
-export * from "./_namespaces/ts";
+export * from "./_namespaces/ts.js";
diff --git a/src/typingsInstaller/_namespaces/ts.server.ts b/src/typingsInstaller/_namespaces/ts.server.ts
index 97838f9d98..57c1c980eb 100644
--- a/src/typingsInstaller/_namespaces/ts.server.ts
+++ b/src/typingsInstaller/_namespaces/ts.server.ts
@@ -1,6 +1,6 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-export * from "../../typingsInstallerCore/_namespaces/ts.server";
-import * as typingsInstaller from "./ts.server.typingsInstaller";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+export * from "../../typingsInstallerCore/_namespaces/ts.server.js";
+import * as typingsInstaller from "./ts.server.typingsInstaller.js";
 export { typingsInstaller };
diff --git a/src/typingsInstaller/_namespaces/ts.server.typingsInstaller.ts b/src/typingsInstaller/_namespaces/ts.server.typingsInstaller.ts
index 595dd244d3..57544624eb 100644
--- a/src/typingsInstaller/_namespaces/ts.server.typingsInstaller.ts
+++ b/src/typingsInstaller/_namespaces/ts.server.typingsInstaller.ts
@@ -1,4 +1,4 @@
 /* Generated file to emulate the ts.server.typingsInstaller namespace. */
 
-export * from "../../typingsInstallerCore/_namespaces/ts.server.typingsInstaller";
-export * from "../nodeTypingsInstaller";
+export * from "../../typingsInstallerCore/_namespaces/ts.server.typingsInstaller.js";
+export * from "../nodeTypingsInstaller.js";
diff --git a/src/typingsInstaller/_namespaces/ts.ts b/src/typingsInstaller/_namespaces/ts.ts
index efb16fe7a1..23ea497e62 100644
--- a/src/typingsInstaller/_namespaces/ts.ts
+++ b/src/typingsInstaller/_namespaces/ts.ts
@@ -1,7 +1,7 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../typingsInstallerCore/_namespaces/ts";
-import * as server from "./ts.server";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../typingsInstallerCore/_namespaces/ts.js";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/typingsInstaller/nodeTypingsInstaller.ts b/src/typingsInstaller/nodeTypingsInstaller.ts
index f043e44a18..b12eebe65c 100644
--- a/src/typingsInstaller/nodeTypingsInstaller.ts
+++ b/src/typingsInstaller/nodeTypingsInstaller.ts
@@ -1,18 +1,26 @@
 import * as fs from "fs";
 import * as path from "path";
 
+import { createRequire } from "module";
+import { dirname } from "path";
+import { fileURLToPath } from "url";
+const require = createRequire(import.meta.url);
+const __filename = fileURLToPath(new URL(import.meta.url));
+const __dirname = dirname(__filename);
+
+
 import {
     installNpmPackages, Log, RequestCompletedAction, TypingsInstaller,
-} from "./_namespaces/ts.server.typingsInstaller";
+} from "./_namespaces/ts.server.typingsInstaller.js";
 import {
     ActionPackageInstalled, Arguments, EventTypesRegistry, findArgument, hasArgument, InitializationFailedResponse,
     InstallTypingHost, nowString, PackageInstalledResponse, TypesRegistryResponse, TypingInstallerRequestUnion,
     TypingInstallerResponseUnion,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 import {
     combinePaths, createGetCanonicalFileName, Debug, ESMap, forEachAncestorDirectory, getDirectoryPath, getEntries, Map,
     MapLike, normalizeSlashes, stringContains, sys, toPath, version,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 class FileLog implements Log {
     constructor(private logFile: string | undefined) {
diff --git a/src/typingsInstallerCore/_namespaces/ts.server.ts b/src/typingsInstallerCore/_namespaces/ts.server.ts
index 252296d233..ca409c9f6c 100644
--- a/src/typingsInstallerCore/_namespaces/ts.server.ts
+++ b/src/typingsInstallerCore/_namespaces/ts.server.ts
@@ -1,5 +1,5 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-import * as typingsInstaller from "./ts.server.typingsInstaller";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+import * as typingsInstaller from "./ts.server.typingsInstaller.js";
 export { typingsInstaller };
diff --git a/src/typingsInstallerCore/_namespaces/ts.server.typingsInstaller.ts b/src/typingsInstallerCore/_namespaces/ts.server.typingsInstaller.ts
index 2964824604..fb809d4555 100644
--- a/src/typingsInstallerCore/_namespaces/ts.server.typingsInstaller.ts
+++ b/src/typingsInstallerCore/_namespaces/ts.server.typingsInstaller.ts
@@ -1,3 +1,3 @@
 /* Generated file to emulate the ts.server.typingsInstaller namespace. */
 
-export * from "../typingsInstaller";
+export * from "../typingsInstaller.js";
diff --git a/src/typingsInstallerCore/_namespaces/ts.ts b/src/typingsInstallerCore/_namespaces/ts.ts
index aa90e7daa8..aaadedb2ed 100644
--- a/src/typingsInstallerCore/_namespaces/ts.ts
+++ b/src/typingsInstallerCore/_namespaces/ts.ts
@@ -1,6 +1,6 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-import * as server from "./ts.server";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/typingsInstallerCore/typingsInstaller.ts b/src/typingsInstallerCore/typingsInstaller.ts
index c404433663..8d228eac9e 100644
--- a/src/typingsInstallerCore/typingsInstaller.ts
+++ b/src/typingsInstallerCore/typingsInstaller.ts
@@ -5,11 +5,11 @@ import {
     mangleScopedPackageName, Map, mapDefined, MapLike, ModuleResolutionKind, noop, Path, PollingInterval,
     resolveModuleName, Set, version, Version, versionMajorMinor, WatchDirectoryFlags, WatchFactory, WatchFactoryHost,
     WatchLogLevel, WatchOptions,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 import {
     ActionInvalidate, ActionSet, BeginInstallTypes, CloseProject, DiscoverTypings, EndInstallTypes,
     EventBeginInstallTypes, EventEndInstallTypes, InstallTypingHost, InvalidateCachedTypings, SetTypings,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 
 interface NpmConfig {
     devDependencies: MapLike<any>;
diff --git a/src/webServer/_namespaces/ts.server.ts b/src/webServer/_namespaces/ts.server.ts
index d21d521a90..1d0df927d4 100644
--- a/src/webServer/_namespaces/ts.server.ts
+++ b/src/webServer/_namespaces/ts.server.ts
@@ -1,5 +1,5 @@
 /* Generated file to emulate the ts.server namespace. */
 
-export * from "../../jsTyping/_namespaces/ts.server";
-export * from "../../server/_namespaces/ts.server";
-export * from "../webServer";
+export * from "../../jsTyping/_namespaces/ts.server.js";
+export * from "../../server/_namespaces/ts.server.js";
+export * from "../webServer.js";
diff --git a/src/webServer/_namespaces/ts.ts b/src/webServer/_namespaces/ts.ts
index 3060a64378..1c1a9fcb82 100644
--- a/src/webServer/_namespaces/ts.ts
+++ b/src/webServer/_namespaces/ts.ts
@@ -1,8 +1,8 @@
 /* Generated file to emulate the ts namespace. */
 
-export * from "../../compiler/_namespaces/ts";
-export * from "../../jsTyping/_namespaces/ts";
-export * from "../../services/_namespaces/ts";
-export * from "../../server/_namespaces/ts";
-import * as server from "./ts.server";
+export * from "../../compiler/_namespaces/ts.js";
+export * from "../../jsTyping/_namespaces/ts.js";
+export * from "../../services/_namespaces/ts.js";
+export * from "../../server/_namespaces/ts.js";
+import * as server from "./ts.server.js";
 export { server };
diff --git a/src/webServer/webServer.ts b/src/webServer/webServer.ts
index ece05e4db6..1ac7c4d659 100644
--- a/src/webServer/webServer.ts
+++ b/src/webServer/webServer.ts
@@ -1,12 +1,12 @@
-import * as server from "./_namespaces/ts.server";
+import * as server from "./_namespaces/ts.server.js";
 import {
     indent, Logger, LogLevel, ModuleImportResult, Msg, nowString, nullTypingsInstaller, protocol,
     ServerCancellationToken, ServerHost, Session, SessionOptions,
-} from "./_namespaces/ts.server";
+} from "./_namespaces/ts.server.js";
 import {
     combinePaths, Debug, directorySeparator, ensureTrailingDirectorySeparator, getDirectoryPath, identity, memoize,
     notImplemented, perfLogger, returnFalse, returnNoopFileWatcher, startsWith,
-} from "./_namespaces/ts";
+} from "./_namespaces/ts.js";
 
 declare const fetch: any;
 declare const importScripts: any;
-- 
2.37.1

