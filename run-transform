#!/usr/bin/env bash

# Ensure "| indent" doesn't drop errors
set -o pipefail

here="$(dirname "$0")"
tsroot="$PWD"

failwith() { echo "error: $*" 1>&2; exit 1; }
indent() {
  local line last="x"
  while IFS="" read -r line; do
    if [[ -n "$line" ]]; then line="  $line"; fi
    echo "$line"; last="$line"
  done
  if [[ -n "$last" ]]; then echo ""; fi
}
run() {
  echo ">>>> ($PWD) $@"; "$@" 2>&1 | indent || failwith "run error"
}
run_in() {
  local owd="$PWD" dir="$1"; shift; cd "$dir"; run "$@"; cd "$owd"
}

if [[ ! -r "Gulpfile.js" || ! -d ".git" ]]; then
  failwith "Should run this from the root of the TS repo"
fi

if [[ ! -d "$here/node_modules" ]]; then
  run_in "$here" npm install
fi

if [[ ! -r "$here/lib/cli.js" ]]; then
  run_in "$here" npm run build
fi

if [[ -d "srctmp" ]]; then
  run rm -rf "srctmp"
fi

tweak_and_commit() { # msg cmd -- arg ... [-- cmd arg ...]
  local msg="$1" cmd=(); shift
  if git log --oneline -30 --format="%s" | grep -q "^$msg\$"; then return; fi
  if ! git diff --quiet || ! git diff --cached --quiet; then
    failwith "directory is dirty"
  fi
  while [[ "$#" -gt 0 ]]; do
    if [[ "x$1" != "x--" ]]; then cmd+=("$1")
    else "${cmd[@]}"; cmd=(); fi
    shift
  done
  "${cmd[@]}"
  if git diff --quiet; then return; fi
  run git add .; run git commit -m "$msg"
}

gen_diag() {
  # The generated diagnostics might have been transformed by a previous attempt,
  # and restoring all changes wouldn't restore it since it's not tracked; so
  # force a proper file is there.
  rm -f "src/compiler/diagnosticInformationMap.generated.ts"
  run npx gulp generate-diagnostics
}

ensure_crlf_at_eof() {
  echo ">>> adding CRLF at all EOFs"
  # finds all files without a terminating newline
  local file
  for file in $(grep -rPlz '[^\r\n]$' "src"); do
    if [[ "$file" = *."d.ts" ]]; then continue; fi
    if [[ "$file" != *."ts" && "$file" != *."json" ]]; then continue; fi
    echo "  $file"; printf '\r\n' >> "$file"
  done
  echo ""
}

undo_whitespaces() {
  return # TODO: this helps prevent the removal of newlines, but causes other oddites. enable later.

  echo ">>> undoing whitespace changes"
  echo "  creating a hacked diff"
  git diff -w -U0 | node "$here/lib/filter-patch.js" > "/tmp/P$$"
  echo "  cleaning"
  git checkout -- .
  echo "  applying diff"
  git apply --whitespace=nowarn --ignore-whitespace --unidiff-zero "/tmp/P$$"
  # rm -f "/tmp/P$$"
}

patchdir="$here/patches"
apply_patches() {
  # To update patch files:
  #   git format-patch -o ~/ts/typeformer/patches ":/CONVERTED TO MODULES"
  # Or when using split steps
  #   git format-patch -o ~/ts/typeformer/patches ":/CONVERSION STEP"
  local msg="$(grep "^Subject" "$patchdir/$(ls "$patchdir" | tail -1)")"
  msg="${msg#"Subject: [PATCH "?/?"] "}"
  tweak_and_commit "$msg" \
    -- run git am --3way --whitespace=nowarn --quoted-cr=nowarn --keep-cr \
       "$patchdir"/*.patch
}

tweak_and_commit "UNDO WEBWORKER CHANGE" \
  -- run sh -c "git revert --no-edit 55e2e15aa37e685b7adcc61dd3091a2d9c7773a1 && git reset HEAD^"

# tweak_and_commit "CONVERTED TO MODULES" \
#   -- gen_diag \
#   -- run_in "src" node "$here/lib/cli.js" "tsconfig.json" \
#   -- undo_whitespaces

gen_diag

tweak_and_commit "CONVERSION STEP - explicitify" \
  -- run_in "src" node "$here/lib/cli.js" "tsconfig.json" "explicitify" \
  -- undo_whitespaces

# do this after explicitify, which avoids whitespace problems when explicitify
# tries to restore the indention implied by the braces.
tweak_and_commit "UNINDENT" \
  -- ensure_crlf_at_eof \
  -- run node "$here/lib/unindent.js"

tweak_and_commit "CONVERSION STEP - stripNamespaces" \
  -- run_in "src" node "$here/lib/cli.js" "tsconfig.json" "stripNamespaces" \
  -- undo_whitespaces

tweak_and_commit "CONVERSION STEP - inlineImports" \
  -- run_in "src" node "$here/lib/cli.js" "tsconfig.json" "inlineImports" \
  -- undo_whitespaces

# apply_patches
