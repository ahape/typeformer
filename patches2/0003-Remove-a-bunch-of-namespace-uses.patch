From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Thu, 26 May 2022 20:40:20 -0700
Subject: [PATCH] Remove a bunch of namespace uses

---
 src/compiler/binder.ts                        |  3 +--
 src/compiler/parser.ts                        | 20 +++++++++----------
 src/compiler/resolutionCache.ts               |  9 +++++----
 .../transformers/declarations/diagnostics.ts  |  5 ++---
 src/compiler/tsbuildPublic.ts                 |  5 ++---
 src/compiler/watch.ts                         |  7 ++++---
 src/debug/dbg.ts                              |  8 --------
 src/harness/client.ts                         |  2 +-
 src/harness/fourslashImpl.ts                  |  2 +-
 src/harness/fourslashInterfaceImpl.ts         |  2 +-
 src/server/editorServices.ts                  |  2 +-
 src/server/project.ts                         |  2 +-
 src/server/scriptInfo.ts                      |  2 +-
 src/server/scriptVersionCache.ts              |  2 +-
 src/server/session.ts                         |  2 +-
 src/services/documentRegistry.ts              |  5 ++---
 .../unittests/services/textChanges.ts         |  7 ++++---
 src/testRunner/unittests/tsbuild/publicApi.ts |  4 ++--
 src/testRunner/unittests/tsc/helpers.ts       |  5 ++---
 src/testRunner/unittests/tscWatch/helpers.ts  |  4 ++--
 .../unittests/tsserver/cancellationToken.ts   |  2 +-
 .../unittests/tsserver/compileOnSave.ts       |  2 +-
 src/testRunner/unittests/tsserver/helpers.ts  |  2 +-
 .../unittests/tsserver/inferredProjects.ts    |  2 +-
 .../unittests/tsserver/projectErrors.ts       |  2 +-
 src/testRunner/unittests/tsserver/projects.ts |  2 +-
 .../unittests/tsserver/refactors.ts           |  2 +-
 src/testRunner/unittests/tsserver/reload.ts   |  2 +-
 .../unittests/tsserver/resolutionCache.ts     |  2 +-
 src/testRunner/unittests/tsserver/session.ts  |  2 +-
 .../unittests/tsserver/syntacticServer.ts     |  2 +-
 .../unittests/tsserver/telemetry.ts           |  2 +-
 .../unittests/tsserver/typingsInstaller.ts    |  2 +-
 src/tsserver/nodeServer.ts                    |  2 +-
 src/webServer/webServer.ts                    |  2 +-
 35 files changed, 59 insertions(+), 69 deletions(-)

diff --git a/src/compiler/binder.ts b/src/compiler/binder.ts
index 4c06caaa9d..17fa819ffc 100644
--- a/src/compiler/binder.ts
+++ b/src/compiler/binder.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import { getNodeId } from "./checker";
 import {
     append, appendIfUnique, cast, concatenate, contains, every, forEach, getRangesWhere, isString, length, Pattern,
@@ -471,7 +470,7 @@ function createBinder(): (file: SourceFile, options: CompilerOptions) => void {
             case SyntaxKind.Parameter:
                 // Parameters with names are handled at the top of this function.  Parameters
                 // without names can only come from JSDocFunctionTypes.
-                Debug.assert(node.parent.kind === SyntaxKind.JSDocFunctionType, "Impossible parameter parent kind", () => `parent is: ${(ts as any).SyntaxKind ? (ts as any).SyntaxKind[node.parent.kind] : node.parent.kind}, expected JSDocFunctionType`);
+                Debug.assert(node.parent.kind === SyntaxKind.JSDocFunctionType, "Impossible parameter parent kind", () => `parent is: ${Debug.formatSyntaxKind(node.parent.kind)}, expected JSDocFunctionType`);
                 const functionType = node.parent as JSDocFunctionType;
                 const index = functionType.parameters.indexOf(node as ParameterDeclaration);
                 return "arg" + index as __String;
diff --git a/src/compiler/parser.ts b/src/compiler/parser.ts
index e7e2b39881..7e18aa5ac9 100644
--- a/src/compiler/parser.ts
+++ b/src/compiler/parser.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import { convertToObjectWorker } from "./commandLineParser";
 import {
     addRange, append, AssertionLevel, concatenate, emptyArray, emptyMap, findIndex, forEach, getSpellingSuggestion,
@@ -11,9 +10,10 @@ import { BaseNodeFactory } from "./factory/baseNodeFactory";
 import { createNodeFactory, NodeFactoryFlags } from "./factory/nodeFactory";
 import {
     isAsyncModifier, isExportAssignment, isExportDeclaration, isExportModifier, isExternalModuleReference,
-    isFunctionTypeNode, isImportDeclaration, isImportEqualsDeclaration, isJSDocFunctionType, isJSDocNullableType,
-    isJSDocReturnTag, isJSDocTypeTag, isJsxOpeningElement, isJsxOpeningFragment, isMetaProperty, isNonNullExpression,
-    isPrivateIdentifier, isTaggedTemplateExpression, isTypeReferenceNode,
+    isFunctionTypeNode, isIdentifier as isIdentifierNode, isImportDeclaration, isImportEqualsDeclaration,
+    isJSDocFunctionType, isJSDocNullableType, isJSDocReturnTag, isJSDocTypeTag, isJsxOpeningElement,
+    isJsxOpeningFragment, isMetaProperty, isNonNullExpression, isPrivateIdentifier, isTaggedTemplateExpression,
+    isTypeReferenceNode,
 } from "./factory/nodeTests";
 import { setTextRange } from "./factory/utilitiesPublic";
 import { fileExtensionIsOneOf, normalizePath } from "./path";
@@ -1757,7 +1757,7 @@ namespace Parser {
         }
 
         // Otherwise, if this isn't a well-known keyword-like identifier, give the generic fallback message.
-        const expressionText = ts.isIdentifier(node) ? idText(node) : undefined;
+        const expressionText = isIdentifierNode(node) ? idText(node) : undefined;
         if (!expressionText || !isIdentifierText(expressionText, languageVersion)) {
             parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(SyntaxKind.SemicolonToken));
             return;
@@ -6335,7 +6335,7 @@ namespace Parser {
         let node: ExpressionStatement | LabeledStatement;
         const hasParen = token() === SyntaxKind.OpenParenToken;
         const expression = allowInAnd(parseExpression);
-        if (ts.isIdentifier(expression) && parseOptional(SyntaxKind.ColonToken)) {
+        if (isIdentifierNode(expression) && parseOptional(SyntaxKind.ColonToken)) {
             node = factory.createLabeledStatement(expression, parseStatement());
         }
         else {
@@ -8393,7 +8393,7 @@ namespace Parser {
                     case SyntaxKind.ArrayType:
                         return isObjectOrObjectArrayTypeReference((node as ArrayTypeNode).elementType);
                     default:
-                        return isTypeReferenceNode(node) && ts.isIdentifier(node.typeName) && node.typeName.escapedText === "Object" && !node.typeArguments;
+                        return isTypeReferenceNode(node) && isIdentifierNode(node.typeName) && node.typeName.escapedText === "Object" && !node.typeArguments;
                 }
             }
 
@@ -8664,8 +8664,8 @@ namespace Parser {
             }
 
             function escapedTextsEqual(a: EntityName, b: EntityName): boolean {
-                while (!ts.isIdentifier(a) || !ts.isIdentifier(b)) {
-                    if (!ts.isIdentifier(a) && !ts.isIdentifier(b) && a.right.escapedText === b.right.escapedText) {
+                while (!isIdentifierNode(a) || !isIdentifierNode(b)) {
+                    if (!isIdentifierNode(a) && !isIdentifierNode(b) && a.right.escapedText === b.right.escapedText) {
                         a = a.left;
                         b = b.left;
                     }
@@ -8690,7 +8690,7 @@ namespace Parser {
                                 const child = tryParseChildTag(target, indent);
                                 if (child && (child.kind === SyntaxKind.JSDocParameterTag || child.kind === SyntaxKind.JSDocPropertyTag) &&
                                     target !== PropertyLikeParse.CallbackParameter &&
-                                    name && (ts.isIdentifier(child.name) || !escapedTextsEqual(name, child.name.left))) {
+                                    name && (isIdentifierNode(child.name) || !escapedTextsEqual(name, child.name.left))) {
                                     return false;
                                 }
                                 return child;
diff --git a/src/compiler/resolutionCache.ts b/src/compiler/resolutionCache.ts
index 5b79bdcbb1..6f444844f1 100644
--- a/src/compiler/resolutionCache.ts
+++ b/src/compiler/resolutionCache.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import {
     arrayToMap, contains, createMultiMap, emptyIterator, endsWith, firstDefinedIterator, GetCanonicalFileName, isString,
     length, memoize, removeSuffix, returnTrue, some, startsWith, stringContains, unorderedRemoveItem,
@@ -9,7 +8,9 @@ import { Diagnostics } from "./diagnosticInformationMap.generated";
 import {
     CacheWithRedirects, createCacheWithRedirects, createModeAwareCache, createModuleResolutionCache,
     createTypeReferenceDirectiveResolutionCache, getEffectiveTypeRoots, isTraceEnabled, loadModuleFromGlobalCache,
-    ModeAwareCache, ModuleResolutionCache, parseNodeModuleFromPath, pathContainsNodeModules, PerModuleNameCache, trace,
+    ModeAwareCache, ModuleResolutionCache, parseNodeModuleFromPath, pathContainsNodeModules, PerModuleNameCache,
+    resolveModuleName as internalResolveModuleName,
+    resolveTypeReferenceDirective as internalResolveTypeReferenceDirective, trace,
 } from "./moduleNameResolver";
 import {
     directorySeparator, fileExtensionIs, fileExtensionIsOneOf, getDirectoryPath, getNormalizedAbsolutePath,
@@ -349,7 +350,7 @@ export function createResolutionCache(resolutionHost: ResolutionCacheHost, rootD
     }
 
     function resolveModuleName(moduleName: string, containingFile: string, compilerOptions: CompilerOptions, host: ModuleResolutionHost, redirectedReference?: ResolvedProjectReference, _containingSourceFile?: never, mode?: ModuleKind.CommonJS | ModuleKind.ESNext | undefined): CachedResolvedModuleWithFailedLookupLocations {
-        const primaryResult = ts.resolveModuleName(moduleName, containingFile, compilerOptions, host, moduleResolutionCache, redirectedReference, mode);
+        const primaryResult = internalResolveModuleName(moduleName, containingFile, compilerOptions, host, moduleResolutionCache, redirectedReference, mode);
         // return result immediately only if global cache support is not enabled or if it is .ts, .tsx or .d.ts
         if (!resolutionHost.getGlobalCache) {
             return primaryResult;
@@ -381,7 +382,7 @@ export function createResolutionCache(resolutionHost: ResolutionCacheHost, rootD
     }
 
     function resolveTypeReferenceDirective(typeReferenceDirectiveName: string, containingFile: string | undefined, options: CompilerOptions, host: ModuleResolutionHost, redirectedReference?: ResolvedProjectReference, _containingSourceFile?: SourceFile, resolutionMode?: SourceFile["impliedNodeFormat"] | undefined): CachedResolvedTypeReferenceDirectiveWithFailedLookupLocations {
-        return ts.resolveTypeReferenceDirective(typeReferenceDirectiveName, containingFile, options, host, redirectedReference, typeReferenceDirectiveResolutionCache, resolutionMode);
+        return internalResolveTypeReferenceDirective(typeReferenceDirectiveName, containingFile, options, host, redirectedReference, typeReferenceDirectiveResolutionCache, resolutionMode);
     }
 
     interface ResolveNamesWithLocalCacheInput<T extends ResolutionWithFailedLookupLocations, R extends ResolutionWithResolvedFileName> {
diff --git a/src/compiler/transformers/declarations/diagnostics.ts b/src/compiler/transformers/declarations/diagnostics.ts
index a821217498..0b7535fcdb 100644
--- a/src/compiler/transformers/declarations/diagnostics.ts
+++ b/src/compiler/transformers/declarations/diagnostics.ts
@@ -1,4 +1,3 @@
-import * as ts from "../../_namespaces/ts";
 import { Debug } from "../../debug";
 import { Diagnostics } from "../../diagnosticInformationMap.generated";
 import {
@@ -185,7 +184,7 @@ export function createGetSymbolAccessibilityDiagnosticForNode(node: DeclarationD
         return getTypeAliasDeclarationVisibilityError;
     }
     else {
-        return Debug.assertNever(node, `Attempted to set a declaration diagnostic context for unhandled node kind: ${(ts as any).SyntaxKind[(node as any).kind]}`);
+        return Debug.assertNever(node, `Attempted to set a declaration diagnostic context for unhandled node kind: ${Debug.formatSyntaxKind((node as any).kind)}`);
     }
 
     function getVariableDeclarationTypeVisibilityDiagnosticMessage(symbolAccessibilityResult: SymbolAccessibilityResult) {
@@ -414,7 +413,7 @@ export function createGetSymbolAccessibilityDiagnosticForNode(node: DeclarationD
                     Diagnostics.Parameter_0_of_accessor_has_or_is_using_private_name_1;
 
             default:
-                return Debug.fail(`Unknown parent for parameter: ${(ts as any).SyntaxKind[node.parent.kind]}`);
+                return Debug.fail(`Unknown parent for parameter: ${Debug.formatSyntaxKind(node.parent.kind)}`);
         }
     }
 
diff --git a/src/compiler/tsbuildPublic.ts b/src/compiler/tsbuildPublic.ts
index c457a697ca..c3546ec61b 100644
--- a/src/compiler/tsbuildPublic.ts
+++ b/src/compiler/tsbuildPublic.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import {
     AffectedFileResult, BuilderProgram, EmitAndSemanticDiagnosticsBuilderProgram, SemanticDiagnosticsBuilderProgram,
 } from "./builderPublic";
@@ -23,7 +22,7 @@ import {
     resolveTypeReferenceDirective, TypeReferenceDirectiveResolutionCache,
 } from "./moduleNameResolver";
 import { isDeclarationFileName } from "./parser";
-import { convertToRelativePath, getDirectoryPath, resolvePath } from "./path";
+import { convertToRelativePath, getDirectoryPath, resolvePath, toPath as internalToPath } from "./path";
 import {
     changeCompilerHostLikeToUseCache, flattenDiagnosticMessageText, ForegroundColorEscapeSequences, formatColorAndReset,
     getConfigFileParsingDiagnostics, loadWithModeAwareCache, loadWithTypeDirectiveCache,
@@ -408,7 +407,7 @@ function createSolutionBuilderState<T extends BuilderProgram>(watch: boolean, ho
 }
 
 function toPath(state: SolutionBuilderState, fileName: string) {
-    return ts.toPath(fileName, state.currentDirectory, state.getCanonicalFileName);
+    return internalToPath(fileName, state.currentDirectory, state.getCanonicalFileName);
 }
 
 function toResolvedConfigFilePath(state: SolutionBuilderState, fileName: ResolvedConfigFileName): ResolvedConfigFilePath {
diff --git a/src/compiler/watch.ts b/src/compiler/watch.ts
index 9997c288d2..af090f302a 100644
--- a/src/compiler/watch.ts
+++ b/src/compiler/watch.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import {
     BuilderProgram, createEmitAndSemanticDiagnosticsBuilderProgram, EmitAndSemanticDiagnosticsBuilderProgram,
 } from "./builderPublic";
@@ -42,7 +41,9 @@ import {
     createIncrementalCompilerHost, createIncrementalProgram, CreateProgram, ProgramHost, WatchCompilerHost,
     WatchCompilerHostOfConfigFile, WatchCompilerHostOfFilesAndCompilerOptions, WatchHost, WatchStatusReporter,
 } from "./watchPublic";
-import { DirectoryStructureHost, getWatchFactory, WatchFactoryHost, WatchLogLevel } from "./watchUtilities";
+import {
+    DirectoryStructureHost, getWatchFactory, WatchFactory as InternalWatchFactory, WatchFactoryHost, WatchLogLevel,
+} from "./watchUtilities";
 
 const sysFormatDiagnosticsHost: FormatDiagnosticsHost | undefined = sys ? {
     getCurrentDirectory: () => sys.getCurrentDirectory(),
@@ -613,7 +614,7 @@ export interface WatchTypeRegistry {
     NodeModulesForModuleSpecifierCache: "node_modules for module specifier cache invalidation",
 }
 
-interface WatchFactory<X, Y = undefined> extends ts.WatchFactory<X, Y> {
+interface WatchFactory<X, Y = undefined> extends InternalWatchFactory<X, Y> {
     writeLog: (s: string) => void;
 }
 
diff --git a/src/debug/dbg.ts b/src/debug/dbg.ts
index c86b021fe2..342bf6bd2d 100644
--- a/src/debug/dbg.ts
+++ b/src/debug/dbg.ts
@@ -1,5 +1,3 @@
-import * as Debug from "./_namespaces/Debug";
-
 /// <reference lib="es2019" />
 
 interface Node {
@@ -510,9 +508,3 @@ export function formatControlFlowGraph(flowNode: FlowNode) {
         return s;
     }
 }
-
-// Export as a module. NOTE: Can't use module exports as this is built using --outFile
-declare const module: { exports: {} };
-if (typeof module !== "undefined" && module.exports) {
-    module.exports = Debug;
-}
\ No newline at end of file
diff --git a/src/harness/client.ts b/src/harness/client.ts
index 1c7d6f7cea..d33388551a 100644
--- a/src/harness/client.ts
+++ b/src/harness/client.ts
@@ -10,7 +10,7 @@ import {
     UserPreferences,
 } from "../compiler/types";
 import { createTextSpanFromBounds } from "../compiler/utilitiesPublic";
-import { protocol } from "../server/_namespaces/ts.server";
+import * as protocol from "../server/protocol";
 import { CommandNames } from "../server/session";
 import { DocumentHighlights } from "../services/documentHighlights";
 import { PatternMatchKind } from "../services/patternMatcher";
diff --git a/src/harness/fourslashImpl.ts b/src/harness/fourslashImpl.ts
index 4bfec6c1e5..a1d2e6f76d 100644
--- a/src/harness/fourslashImpl.ts
+++ b/src/harness/fourslashImpl.ts
@@ -36,7 +36,7 @@ import {
     createTextSpan, textRangeContainsPositionInclusive, textSpanContainsPosition, textSpanEnd,
     textSpanIntersectsWithPosition,
 } from "../compiler/utilitiesPublic";
-import { protocol } from "../server/_namespaces/ts.server";
+import * as protocol from "../server/protocol";
 import { TokenEncodingConsts, TokenModifier, TokenType } from "../services/classifier2020";
 import { importFixName } from "../services/codefixes/importFixes";
 import { SortText } from "../services/completions";
diff --git a/src/harness/fourslashInterfaceImpl.ts b/src/harness/fourslashInterfaceImpl.ts
index ece75ec3b3..941afe03e7 100644
--- a/src/harness/fourslashInterfaceImpl.ts
+++ b/src/harness/fourslashInterfaceImpl.ts
@@ -4,7 +4,7 @@ import { Comparison, ESMap, MapLike } from "../compiler/corePublic";
 import { tokenToString } from "../compiler/scanner";
 import { LineAndCharacter, Symbol, SyntaxKind, TextSpan, UserPreferences } from "../compiler/types";
 import { createTextSpan } from "../compiler/utilitiesPublic";
-import { protocol } from "../server/_namespaces/ts.server";
+import * as protocol from "../server/protocol";
 import { Completions } from "../services/_namespaces/ts";
 import { SortText } from "../services/completions";
 import { PatternMatchKind } from "../services/patternMatcher";
diff --git a/src/server/editorServices.ts b/src/server/editorServices.ts
index 899f8ffb19..2e6c937517 100644
--- a/src/server/editorServices.ts
+++ b/src/server/editorServices.ts
@@ -51,12 +51,12 @@ import {
     PerformanceEvent, TextChange,
 } from "../services/types";
 import { getSnapshotText, isInsideNodeModules } from "../services/utilities";
-import { protocol } from "./_namespaces/ts.server";
 import { createPackageJsonCache, PackageJsonCache } from "./packageJsonCache";
 import {
     AutoImportProviderProject, ConfiguredProject, countEachFileTypes, ExternalProject, hasNoTypeScriptSource,
     InferredProject, isConfiguredProject, isInferredProject, Project, ProjectFilesWithTSDiagnostics, ProjectKind,
 } from "./project";
+import * as protocol from "./protocol";
 import { isDynamicFileName, ScriptInfo, ScriptInfoVersion } from "./scriptInfo";
 import { Session } from "./session";
 import { ServerHost } from "./types";
diff --git a/src/server/project.ts b/src/server/project.ts
index dfd37c3eb6..48c7bf0f88 100644
--- a/src/server/project.ts
+++ b/src/server/project.ts
@@ -54,12 +54,12 @@ import {
 } from "../services/types";
 import { cloneCompilerOptions, isInsideNodeModules } from "../services/utilities";
 import * as ts from "./_namespaces/ts";
-import { protocol } from "./_namespaces/ts.server";
 import {
     FileStats, forEachResolvedProjectReferenceProject, projectContainsInfoDirectly, ProjectReferenceProjectLoadKind,
     ProjectService, updateProjectIfDirty,
 } from "./editorServices";
 import { createModuleSpecifierCache } from "./moduleSpecifierCache";
+import * as protocol from "./protocol";
 import { ScriptInfo } from "./scriptInfo";
 import { Session } from "./session";
 import { ServerHost } from "./types";
diff --git a/src/server/scriptInfo.ts b/src/server/scriptInfo.ts
index b01706465f..2aa1a9ce7a 100644
--- a/src/server/scriptInfo.ts
+++ b/src/server/scriptInfo.ts
@@ -18,12 +18,12 @@ import {
     emptyOptions, FormatCodeSettings, getDefaultFormatCodeSettings, IScriptSnapshot, ScriptSnapshot,
 } from "../services/types";
 import { getSnapshotText } from "../services/utilities";
-import { protocol } from "./_namespaces/ts.server";
 import { maxFileSize } from "./editorServices";
 import {
     ConfiguredProject, ExternalProject, InferredProject, isConfiguredProject, isExternalProject, isInferredProject,
     Project, ProjectKind,
 } from "./project";
+import * as protocol from "./protocol";
 import { AbsolutePositionAndLineText, ScriptVersionCache } from "./scriptVersionCache";
 import { ServerHost } from "./types";
 import { Errors, NormalizedPath } from "./utilitiesPublic";
diff --git a/src/server/scriptVersionCache.ts b/src/server/scriptVersionCache.ts
index 4eec06854a..74d4ba7eb4 100644
--- a/src/server/scriptVersionCache.ts
+++ b/src/server/scriptVersionCache.ts
@@ -5,7 +5,7 @@ import {
     collapseTextChangeRangesAcrossMultipleVersions, createTextChangeRange, createTextSpan, unchangedTextChangeRange,
 } from "../compiler/utilitiesPublic";
 import { IScriptSnapshot } from "../services/types";
-import { protocol } from "./_namespaces/ts.server";
+import * as protocol from "./protocol";
 import { emptyArray } from "./utilitiesPublic";
 
 const lineCollectionCapacity = 4;
diff --git a/src/server/session.ts b/src/server/session.ts
index 0df63f2cf4..cdded16804 100644
--- a/src/server/session.ts
+++ b/src/server/session.ts
@@ -50,7 +50,6 @@ import {
 import {
     documentSpansEqual, getSnapshotText, getTouchingPropertyName, mapOneOrMany, PossibleProgramFileInfo,
 } from "../services/utilities";
-import { protocol } from "./_namespaces/ts.server";
 import {
     ConfigFileDiagEvent, convertFormatOptions, convertScriptKindName, convertUserPreferences, isConfigFile,
     LargeFileReferencedEvent, ProjectInfoTelemetryEvent, ProjectLanguageServiceStateEvent, ProjectLoadingFinishEvent,
@@ -60,6 +59,7 @@ import {
 import {
     ConfiguredProject, EmitResult, isConfiguredProject, isExternalProject, isInferredProject, Project, ProjectKind,
 } from "./project";
+import * as protocol from "./protocol";
 import { ScriptInfo } from "./scriptInfo";
 import { ServerHost } from "./types";
 import { ITypingsInstaller } from "./typingsCache";
diff --git a/src/services/documentRegistry.ts b/src/services/documentRegistry.ts
index 2dc2d26fe3..72fa96d99e 100644
--- a/src/services/documentRegistry.ts
+++ b/src/services/documentRegistry.ts
@@ -1,6 +1,6 @@
 import { sourceFileAffectingCompilerOptions } from "../compiler/commandLineParser";
 import {
-    arrayFrom, createGetCanonicalFileName, firstDefinedIterator, getOrUpdate, identity, isArray, map,
+    arrayFrom, createGetCanonicalFileName, firstDefinedIterator, getOrUpdate, hasProperty, identity, isArray, map,
 } from "../compiler/core";
 import { ESMap, Map } from "../compiler/corePublic";
 import { Debug } from "../compiler/debug";
@@ -14,7 +14,6 @@ import {
 import {
     ensureScriptKind, forEachEntry, getCompilerOptionValue, getEmitScriptTarget, getSetExternalModuleIndicator,
 } from "../compiler/utilities";
-import * as ts from "./_namespaces/ts";
 import { createLanguageServiceSourceFile, updateLanguageServiceSourceFile } from "./services";
 import { IScriptSnapshot } from "./types";
 
@@ -385,7 +384,7 @@ function compilerOptionValueToString(value: unknown): string {
     }
     let str = "{";
     for (const key in value) {
-        if (ts.hasOwnProperty.call(value, key)) { // eslint-disable-line @typescript-eslint/no-unnecessary-qualifier
+        if (hasProperty.call(value, key)) { // eslint-disable-line @typescript-eslint/no-unnecessary-qualifier
             str += `${key}: ${compilerOptionValueToString((value as any)[key])}`;
         }
     }
diff --git a/src/testRunner/unittests/services/textChanges.ts b/src/testRunner/unittests/services/textChanges.ts
index 4ce51c2475..07b55da43a 100644
--- a/src/testRunner/unittests/services/textChanges.ts
+++ b/src/testRunner/unittests/services/textChanges.ts
@@ -12,15 +12,17 @@ import {
 import { getNewLineCharacter } from "../../../compiler/utilities";
 import { isDeclaration } from "../../../compiler/utilitiesPublic";
 import { Baseline } from "../../../harness/harnessIO";
-import { textChanges } from "../../../services/_namespaces/ts";
 import { FormatContext } from "../../../services/formatting/formatting";
 import { getFormatContext } from "../../../services/formatting/rulesMap";
-import { applyChanges, ChangeTracker, LeadingTriviaOption, TrailingTriviaOption } from "../../../services/textChanges";
+import {
+    applyChanges, ChangeTracker, deleteNode, LeadingTriviaOption, TrailingTriviaOption,
+} from "../../../services/textChanges";
 import { testFormatSettings } from "../../../services/types";
 import { notImplementedHost } from "./extract/helpers";
 
 // Some tests have trailing whitespace
 
+
 describe("unittests:: services:: textChanges", () => {
     function findChild(name: string, n: Node) {
         return find(n)!;
@@ -145,7 +147,6 @@ function bar() {
     function findVariableDeclarationContaining(name: string, sourceFile: SourceFile): VariableDeclaration {
         return cast(findChild(name, sourceFile), isVariableDeclaration);
     }
-    const { deleteNode } = textChanges;
     {
         const text = `
 var x = 1; // some comment - 1
diff --git a/src/testRunner/unittests/tsbuild/publicApi.ts b/src/testRunner/unittests/tsbuild/publicApi.ts
index 534a5f0e27..8c8e3e3c68 100644
--- a/src/testRunner/unittests/tsbuild/publicApi.ts
+++ b/src/testRunner/unittests/tsbuild/publicApi.ts
@@ -13,7 +13,7 @@ import { createDiagnosticReporter, getErrorSummaryText } from "../../../compiler
 import { patchHostForBuildInfoReadWrite, System } from "../../../harness/fakesHosts";
 import { formatPatch } from "../../../harness/vfsUtil";
 import { commandLineCallbacks, TscCompileSystem, verifyTscBaseline } from "../tsc/helpers";
-import { baselinePrograms } from "../tscWatch/helpers";
+import { baselineAllPrograms } from "../tscWatch/helpers";
 import { loadProjectFromFiles, toPathWithSystem } from "./helpers";
 
 describe("unittests:: tsbuild:: Public API with custom transformers when passed to build", () => {
@@ -78,7 +78,7 @@ export function f22() { } // trailing`,
         sys.exit(exitStatus);
         sys.write(`exitCode:: ExitStatus.${ExitStatus[sys.exitCode as ExitStatus]}\n`);
         const baseline: string[] = [];
-        baselinePrograms(baseline, getPrograms, emptyArray, /*baselineDependencies*/ false);
+        baselineAllPrograms(baseline, getPrograms, emptyArray, /*baselineDependencies*/ false);
         sys.write(baseline.join("\n"));
         fs.makeReadonly();
         sys.baseLine = () => {
diff --git a/src/testRunner/unittests/tsc/helpers.ts b/src/testRunner/unittests/tsc/helpers.ts
index 54c8dba349..557fbbb12b 100644
--- a/src/testRunner/unittests/tsc/helpers.ts
+++ b/src/testRunner/unittests/tsc/helpers.ts
@@ -12,9 +12,8 @@ import { patchHostForBuildInfoReadWrite, patchHostForBuildInfoWrite, System } fr
 import { Baseline } from "../../../harness/harnessIO";
 import { FileSystem, formatPatch } from "../../../harness/vfsUtil";
 import * as ts from "../../_namespaces/ts";
-import { tscWatch } from "../../_namespaces/ts";
 import { baselineBuildInfo, generateSourceMapBaselineFiles, TestTscEdit, toPathWithSystem } from "../tsbuild/helpers";
-import { WatchedSystem } from "../tscWatch/helpers";
+import { baselineAllPrograms, WatchedSystem } from "../tscWatch/helpers";
 
 export type TscCompileSystem = System & {
     writtenFiles: Set<Path>;
@@ -210,7 +209,7 @@ export function testTscCompile(input: TestTscCompile) {
         const { baselineSourceMap, baselineReadFileCalls, baselinePrograms, baselineDependencies } = input;
         if (baselinePrograms) {
             const baseline: string[] = [];
-            tscWatch.baselinePrograms(baseline, getPrograms!, emptyArray, baselineDependencies);
+            baselineAllPrograms(baseline, getPrograms!, emptyArray, baselineDependencies);
             sys.write(baseline.join("\n"));
         }
         if (baselineReadFileCalls) {
diff --git a/src/testRunner/unittests/tscWatch/helpers.ts b/src/testRunner/unittests/tscWatch/helpers.ts
index bc4d380f02..9f1362fd52 100644
--- a/src/testRunner/unittests/tscWatch/helpers.ts
+++ b/src/testRunner/unittests/tscWatch/helpers.ts
@@ -335,7 +335,7 @@ export interface WatchBaseline extends BaselineBase, TscWatchCheckOptions {
 export function watchBaseline({ baseline, getPrograms, oldPrograms, sys, oldSnap, baselineSourceMap, baselineDependencies }: WatchBaseline) {
     if (baselineSourceMap) generateSourceMapBaselineFiles(sys);
     sys.serializeOutput(baseline);
-    const programs = baselinePrograms(baseline, getPrograms, oldPrograms, baselineDependencies);
+    const programs = baselineAllPrograms(baseline, getPrograms, oldPrograms, baselineDependencies);
     sys.serializeWatches(baseline);
     baseline.push(`exitCode:: ExitStatus.${ExitStatus[sys.exitCode as ExitStatus]}`, "");
     sys.diff(baseline, oldSnap);
@@ -346,7 +346,7 @@ export function watchBaseline({ baseline, getPrograms, oldPrograms, sys, oldSnap
     return programs;
 }
 
-export function baselinePrograms(baseline: string[], getPrograms: () => readonly CommandLineProgram[], oldPrograms: readonly (CommandLineProgram | undefined)[], baselineDependencies: boolean | undefined) {
+export function baselineAllPrograms(baseline: string[], getPrograms: () => readonly CommandLineProgram[], oldPrograms: readonly (CommandLineProgram | undefined)[], baselineDependencies: boolean | undefined) {
     const programs = getPrograms();
     for (let i = 0; i < programs.length; i++) {
         baselineProgram(baseline, programs[i], oldPrograms[i], baselineDependencies);
diff --git a/src/testRunner/unittests/tsserver/cancellationToken.ts b/src/testRunner/unittests/tsserver/cancellationToken.ts
index eb635c66bd..ec89b2348b 100644
--- a/src/testRunner/unittests/tsserver/cancellationToken.ts
+++ b/src/testRunner/unittests/tsserver/cancellationToken.ts
@@ -1,7 +1,7 @@
 import { AnyFunction, noop } from "../../../compiler/core";
 import { OperationCanceledException } from "../../../compiler/types";
 import { extractMessage } from "../../../harness/client";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { ServerCancellationToken } from "../../../server/session";
 import { projectSystem } from "../../_namespaces/ts";
 import { createServerHost, createSession, TestServerCancellationToken } from "./helpers";
diff --git a/src/testRunner/unittests/tsserver/compileOnSave.ts b/src/testRunner/unittests/tsserver/compileOnSave.ts
index 2038a9ebd1..f1bbf2b49b 100644
--- a/src/testRunner/unittests/tsserver/compileOnSave.ts
+++ b/src/testRunner/unittests/tsserver/compileOnSave.ts
@@ -2,7 +2,7 @@ import { arrayIsEqualTo, compareStringsCaseSensitive, emptyArray, map, stringCon
 import { Diagnostics } from "../../../compiler/diagnosticInformationMap.generated";
 import { CompilerOptions, diagnosticCategoryName, Extension } from "../../../compiler/types";
 import { changeExtension, formatStringFromArgs } from "../../../compiler/utilities";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { CommandNames, Session } from "../../../server/session";
 import { ServerHost } from "../../../server/types";
 import { projectSystem } from "../../_namespaces/ts";
diff --git a/src/testRunner/unittests/tsserver/helpers.ts b/src/testRunner/unittests/tsserver/helpers.ts
index 628b199e9a..9158b3d51e 100644
--- a/src/testRunner/unittests/tsserver/helpers.ts
+++ b/src/testRunner/unittests/tsserver/helpers.ts
@@ -19,12 +19,12 @@ import {
     createServerHost, libFile, safeList, TestServerHost,
 } from "../../../harness/virtualFileSystemWithWatch";
 import { InvalidateCachedTypings, SetTypings } from "../../../jsTyping/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import {
     FileStats, OpenFileInfo, OpenFileInfoTelemetryEvent, OpenFileInfoTelemetryEventData, ProjectInfoTelemetryEvent,
     ProjectInfoTelemetryEventData, ProjectService, ProjectServiceEvent, ProjectServiceOptions,
 } from "../../../server/editorServices";
 import { Project, ProjectKind } from "../../../server/project";
+import * as protocol from "../../../server/protocol";
 import {
     CommandNames, nullCancellationToken, ServerCancellationToken, Session, SessionOptions, toEvent,
 } from "../../../server/session";
diff --git a/src/testRunner/unittests/tsserver/inferredProjects.ts b/src/testRunner/unittests/tsserver/inferredProjects.ts
index 06fa9e4462..f053bdeab1 100644
--- a/src/testRunner/unittests/tsserver/inferredProjects.ts
+++ b/src/testRunner/unittests/tsserver/inferredProjects.ts
@@ -1,8 +1,8 @@
 import { Map } from "../../../compiler/corePublic";
 import { combinePaths } from "../../../compiler/path";
 import { ModuleResolutionKind, ScriptKind, ScriptTarget } from "../../../compiler/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import { InferredProject } from "../../../server/project";
+import * as protocol from "../../../server/protocol";
 import { projectRoot } from "../tscWatch/helpers";
 import {
     checkArray, checkNumberOfConfiguredProjects, checkNumberOfInferredProjects, checkNumberOfProjects,
diff --git a/src/testRunner/unittests/tsserver/projectErrors.ts b/src/testRunner/unittests/tsserver/projectErrors.ts
index 09c161a9f7..9b86d041f2 100644
--- a/src/testRunner/unittests/tsserver/projectErrors.ts
+++ b/src/testRunner/unittests/tsserver/projectErrors.ts
@@ -3,8 +3,8 @@ import { Diagnostics } from "../../../compiler/diagnosticInformationMap.generate
 import { getBaseFileName } from "../../../compiler/path";
 import { flattenDiagnosticMessageText } from "../../../compiler/program";
 import { Diagnostic, ModuleKind } from "../../../compiler/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import { ProjectFilesWithTSDiagnostics } from "../../../server/project";
+import * as protocol from "../../../server/protocol";
 import { CommandNames } from "../../../server/session";
 import { projectSystem } from "../../_namespaces/ts";
 import { projectRoot } from "../tscWatch/helpers";
diff --git a/src/testRunner/unittests/tsserver/projects.ts b/src/testRunner/unittests/tsserver/projects.ts
index 09695df970..f79f6851ff 100644
--- a/src/testRunner/unittests/tsserver/projects.ts
+++ b/src/testRunner/unittests/tsserver/projects.ts
@@ -5,7 +5,7 @@ import { Debug } from "../../../compiler/debug";
 import { combinePaths, getDirectoryPath, normalizePath } from "../../../compiler/path";
 import { Path, ScriptKind, ScriptTarget } from "../../../compiler/types";
 import { createTextSpan } from "../../../compiler/utilitiesPublic";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { CommandNames } from "../../../server/session";
 import { ITypingsInstaller } from "../../../server/typingsCache";
 import {
diff --git a/src/testRunner/unittests/tsserver/refactors.ts b/src/testRunner/unittests/tsserver/refactors.ts
index 125a4008a7..88288e02ce 100644
--- a/src/testRunner/unittests/tsserver/refactors.ts
+++ b/src/testRunner/unittests/tsserver/refactors.ts
@@ -1,4 +1,4 @@
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { projectSystem } from "../../_namespaces/ts";
 import { createServerHost, createSession, executeSessionRequest, File, openFilesForSession } from "./helpers";
 
diff --git a/src/testRunner/unittests/tsserver/reload.ts b/src/testRunner/unittests/tsserver/reload.ts
index 946ed9338f..9897c808d4 100644
--- a/src/testRunner/unittests/tsserver/reload.ts
+++ b/src/testRunner/unittests/tsserver/reload.ts
@@ -1,4 +1,4 @@
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { getSnapshotText } from "../../../services/utilities";
 import { checkNumberOfProjects, createServerHost, createSession, libFile } from "./helpers";
 
diff --git a/src/testRunner/unittests/tsserver/resolutionCache.ts b/src/testRunner/unittests/tsserver/resolutionCache.ts
index 7ef9f71c82..bf4c856313 100644
--- a/src/testRunner/unittests/tsserver/resolutionCache.ts
+++ b/src/testRunner/unittests/tsserver/resolutionCache.ts
@@ -4,7 +4,7 @@ import { Debug } from "../../../compiler/debug";
 import { combinePaths, forEachAncestorDirectory, getDirectoryPath, normalizePath } from "../../../compiler/path";
 import { ModuleResolutionHost, ScriptKind } from "../../../compiler/types";
 import { removeFileExtension } from "../../../compiler/utilities";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { CommandNames } from "../../../server/session";
 import { projectSystem } from "../../_namespaces/ts";
 import { projectRoot } from "../tscWatch/helpers";
diff --git a/src/testRunner/unittests/tsserver/session.ts b/src/testRunner/unittests/tsserver/session.ts
index b443e5c8f7..65bb2212a9 100644
--- a/src/testRunner/unittests/tsserver/session.ts
+++ b/src/testRunner/unittests/tsserver/session.ts
@@ -9,8 +9,8 @@ import {
 } from "../../../compiler/types";
 import { mockHash } from "../../../harness/harnessIO";
 import { byteLength } from "../../../harness/harnessUtils";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import { ProjectService } from "../../../server/editorServices";
+import * as protocol from "../../../server/protocol";
 import {
     CommandNames, getLocationInNewDocument, HandlerResponse, nullCancellationToken, Session, SessionOptions,
 } from "../../../server/session";
diff --git a/src/testRunner/unittests/tsserver/syntacticServer.ts b/src/testRunner/unittests/tsserver/syntacticServer.ts
index 866935e6ab..256aaef904 100644
--- a/src/testRunner/unittests/tsserver/syntacticServer.ts
+++ b/src/testRunner/unittests/tsserver/syntacticServer.ts
@@ -1,5 +1,5 @@
 import { emptyArray } from "../../../compiler/core";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { projectSystem } from "../../_namespaces/ts";
 import { projectRoot } from "../tscWatch/helpers";
 import {
diff --git a/src/testRunner/unittests/tsserver/telemetry.ts b/src/testRunner/unittests/tsserver/telemetry.ts
index 96cd0e13e2..cb6a9340c1 100644
--- a/src/testRunner/unittests/tsserver/telemetry.ts
+++ b/src/testRunner/unittests/tsserver/telemetry.ts
@@ -1,9 +1,9 @@
 import { isString } from "../../../compiler/core";
 import { CompilerOptions } from "../../../compiler/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import {
     maxProgramSizeForNonTsFiles, ProjectInfoTelemetryEvent, ProjectLanguageServiceStateEvent,
 } from "../../../server/editorServices";
+import * as protocol from "../../../server/protocol";
 import { checkNumberOfProjects, File, fileStats, TestServerEventManager, toExternalFiles } from "./helpers";
 
 describe("unittests:: tsserver:: project telemetry", () => {
diff --git a/src/testRunner/unittests/tsserver/typingsInstaller.ts b/src/testRunner/unittests/tsserver/typingsInstaller.ts
index c67437645c..f2fd08e378 100644
--- a/src/testRunner/unittests/tsserver/typingsInstaller.ts
+++ b/src/testRunner/unittests/tsserver/typingsInstaller.ts
@@ -11,9 +11,9 @@ import {
 } from "../../../jsTyping/jsTyping";
 import { EventBeginInstallTypes, EventEndInstallTypes } from "../../../jsTyping/shared";
 import { BeginInstallTypes, EndInstallTypes, InvalidateCachedTypings, SetTypings } from "../../../jsTyping/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import { updateProjectIfDirty } from "../../../server/editorServices";
 import { Project } from "../../../server/project";
+import * as protocol from "../../../server/protocol";
 import { ServerHost } from "../../../server/types";
 import {
     getNpmCommandForInstallation, installNpmPackages, Log, RequestCompletedAction, typingsName,
diff --git a/src/tsserver/nodeServer.ts b/src/tsserver/nodeServer.ts
index a0ee7a3a09..0d249c11a8 100644
--- a/src/tsserver/nodeServer.ts
+++ b/src/tsserver/nodeServer.ts
@@ -18,9 +18,9 @@ import {
     BeginInstallTypes, EndInstallTypes, InitializationFailedResponse, InstallPackageRequest, InvalidateCachedTypings,
     PackageInstalledResponse, SetTypings, TypesRegistryResponse, TypingInstallerRequestUnion,
 } from "../jsTyping/types";
-import { protocol } from "../server/_namespaces/ts.server";
 import { ProjectService } from "../server/editorServices";
 import { Project } from "../server/project";
+import * as protocol from "../server/protocol";
 import {
     Event, formatMessage, nullCancellationToken, ServerCancellationToken, Session, toEvent,
 } from "../server/session";
diff --git a/src/webServer/webServer.ts b/src/webServer/webServer.ts
index a248c8253c..5a6b7d6f2c 100644
--- a/src/webServer/webServer.ts
+++ b/src/webServer/webServer.ts
@@ -4,7 +4,7 @@ import { directorySeparator, ensureTrailingDirectorySeparator, getDirectoryPath
 import { perfLogger } from "../compiler/perfLogger";
 import { returnNoopFileWatcher } from "../compiler/watch";
 import { nowString } from "../jsTyping/shared";
-import { protocol } from "../server/_namespaces/ts.server";
+import * as protocol from "../server/protocol";
 import { ServerCancellationToken, Session, SessionOptions } from "../server/session";
 import { ServerHost } from "../server/types";
 import { nullTypingsInstaller } from "../server/typingsCache";
-- 
2.36.1

