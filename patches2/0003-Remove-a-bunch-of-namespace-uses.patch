From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Thu, 26 May 2022 20:40:20 -0700
Subject: [PATCH] Remove a bunch of namespace uses

---
 src/compiler/binder.ts                        |  5 ++---
 src/compiler/builder.ts                       |  6 ++---
 src/compiler/checker.ts                       | 16 +++++++-------
 src/compiler/emitter.ts                       | 20 ++++++++---------
 src/compiler/parser.ts                        | 22 +++++++++----------
 src/compiler/program.ts                       |  6 ++---
 src/compiler/resolutionCache.ts               |  9 ++++----
 src/compiler/sourcemap.ts                     |  2 +-
 src/compiler/sys.ts                           | 21 +++++++++---------
 src/compiler/tracing.ts                       |  2 +-
 src/compiler/transformer.ts                   |  2 +-
 src/compiler/transformers/declarations.ts     |  7 +++---
 .../transformers/declarations/diagnostics.ts  |  5 ++---
 src/compiler/tsbuildPublic.ts                 |  5 ++---
 src/compiler/types.ts                         |  1 +
 src/compiler/utilities.ts                     |  9 ++------
 src/compiler/watch.ts                         |  9 ++++----
 src/compiler/watchPublic.ts                   |  5 ++---
 src/compiler/watchUtilities.ts                |  5 ++---
 src/debug/dbg.ts                              |  8 -------
 src/executeCommandLine/executeCommandLine.ts  | 11 +++++-----
 src/harness/client.ts                         |  2 +-
 src/harness/fourslashImpl.ts                  |  4 ++--
 src/harness/fourslashInterfaceImpl.ts         |  4 ++--
 src/harness/vfsUtil.ts                        |  2 +-
 src/server/editorServices.ts                  |  2 +-
 src/server/project.ts                         |  2 +-
 src/server/scriptInfo.ts                      |  2 +-
 src/server/scriptVersionCache.ts              |  2 +-
 src/server/session.ts                         |  2 +-
 src/services/completions.ts                   |  5 ++---
 src/services/documentRegistry.ts              |  5 ++---
 src/testRunner/_namespaces/FourSlash.ts       |  1 -
 src/testRunner/_namespaces/Playback.ts        |  1 -
 src/testRunner/_namespaces/Utils.ts           |  1 -
 src/testRunner/_namespaces/compiler.ts        |  1 -
 src/testRunner/_namespaces/documents.ts       |  1 -
 src/testRunner/_namespaces/evaluator.ts       |  1 -
 src/testRunner/_namespaces/fakes.ts           |  1 -
 src/testRunner/_namespaces/vfs.ts             |  1 -
 src/testRunner/_namespaces/vpath.ts           |  1 -
 src/testRunner/compilerRef.ts                 |  2 --
 src/testRunner/documentsRef.ts                |  2 --
 src/testRunner/evaluatorRef.ts                |  2 --
 src/testRunner/fakesRef.ts                    |  2 --
 src/testRunner/fourslashRef.ts                |  2 --
 src/testRunner/playbackRef.ts                 |  2 --
 src/testRunner/runner.ts                      |  2 +-
 src/testRunner/tsconfig.json                  | 10 ---------
 .../unittests/services/textChanges.ts         |  7 +++---
 src/testRunner/unittests/tsbuild/publicApi.ts |  4 ++--
 src/testRunner/unittests/tsc/helpers.ts       |  5 ++---
 src/testRunner/unittests/tscWatch/helpers.ts  |  4 ++--
 .../unittests/tsserver/cancellationToken.ts   |  2 +-
 .../unittests/tsserver/compileOnSave.ts       |  2 +-
 src/testRunner/unittests/tsserver/helpers.ts  |  2 +-
 .../unittests/tsserver/inferredProjects.ts    |  2 +-
 .../unittests/tsserver/projectErrors.ts       |  2 +-
 src/testRunner/unittests/tsserver/projects.ts |  2 +-
 .../unittests/tsserver/refactors.ts           |  2 +-
 src/testRunner/unittests/tsserver/reload.ts   |  2 +-
 .../unittests/tsserver/resolutionCache.ts     |  2 +-
 src/testRunner/unittests/tsserver/session.ts  |  2 +-
 .../unittests/tsserver/syntacticServer.ts     |  2 +-
 .../unittests/tsserver/telemetry.ts           |  2 +-
 .../unittests/tsserver/typingsInstaller.ts    |  2 +-
 src/testRunner/utilsRef.ts                    |  2 --
 src/testRunner/vfsRef.ts                      |  2 --
 src/testRunner/vpathRef.ts                    |  2 --
 src/tsserver/nodeServer.ts                    |  2 +-
 src/tsserver/webServer.ts                     |  2 +-
 src/webServer/webServer.ts                    |  2 +-
 72 files changed, 121 insertions(+), 178 deletions(-)
 delete mode 100644 src/testRunner/compilerRef.ts
 delete mode 100644 src/testRunner/documentsRef.ts
 delete mode 100644 src/testRunner/evaluatorRef.ts
 delete mode 100644 src/testRunner/fakesRef.ts
 delete mode 100644 src/testRunner/fourslashRef.ts
 delete mode 100644 src/testRunner/playbackRef.ts
 delete mode 100644 src/testRunner/utilsRef.ts
 delete mode 100644 src/testRunner/vfsRef.ts
 delete mode 100644 src/testRunner/vpathRef.ts

diff --git a/src/compiler/binder.ts b/src/compiler/binder.ts
index 566c09e641..797b82073a 100644
--- a/src/compiler/binder.ts
+++ b/src/compiler/binder.ts
@@ -1,5 +1,3 @@
-import * as ts from "./_namespaces/ts";
-import { performance } from "./_namespaces/ts";
 import { getNodeId } from "./checker";
 import {
     append, appendIfUnique, cast, concatenate, contains, every, forEach, getRangesWhere, isString, length, Pattern,
@@ -19,6 +17,7 @@ import {
 import { createBinaryExpressionTrampoline } from "./factory/utilities";
 import { forEachChild, isExternalModule } from "./parser";
 import { perfLogger } from "./perfLogger";
+import * as performance from "./performance";
 import { tokenToString } from "./scanner";
 import { tracing, TracingNode } from "./tracing";
 import {
@@ -471,7 +470,7 @@ function createBinder(): (file: SourceFile, options: CompilerOptions) => void {
             case SyntaxKind.Parameter:
                 // Parameters with names are handled at the top of this function.  Parameters
                 // without names can only come from JSDocFunctionTypes.
-                Debug.assert(node.parent.kind === SyntaxKind.JSDocFunctionType, "Impossible parameter parent kind", () => `parent is: ${(ts as any).SyntaxKind ? (ts as any).SyntaxKind[node.parent.kind] : node.parent.kind}, expected JSDocFunctionType`);
+                Debug.assert(node.parent.kind === SyntaxKind.JSDocFunctionType, "Impossible parameter parent kind", () => `parent is: ${Debug.formatSyntaxKind(node.parent.kind)}, expected JSDocFunctionType`);
                 const functionType = node.parent as JSDocFunctionType;
                 const index = functionType.parameters.indexOf(node as ParameterDeclaration);
                 return "arg" + index as __String;
diff --git a/src/compiler/builder.ts b/src/compiler/builder.ts
index ff784ad15c..ed43ea1ce3 100644
--- a/src/compiler/builder.ts
+++ b/src/compiler/builder.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import {
     AffectedFileResult, BuilderProgram, BuilderProgramHost, EmitAndSemanticDiagnosticsBuilderProgram,
     SemanticDiagnosticsBuilderProgram,
@@ -16,6 +15,7 @@ import { getTsBuildInfoEmitOutputFilePath } from "./emitter";
 import { isDeclarationFileName } from "./parser";
 import {
     ensurePathIsNonModuleName, getDirectoryPath, getNormalizedAbsolutePath, getRelativePathFromDirectory,
+    toPath as toPathInternal,
 } from "./path";
 import { createProgram, emitSkippedWithNoDiagnostics, filterSemanticDiagnostics, handleNoEmitOptions } from "./program";
 import { generateDjb2Hash } from "./sys";
@@ -328,7 +328,7 @@ function convertToDiagnostics(diagnostics: readonly ReusableDiagnostic[], newPro
     });
 
     function toPath(path: string) {
-        return ts.toPath(path, buildInfoDirectory, getCanonicalFileName);
+        return toPathInternal(path, buildInfoDirectory, getCanonicalFileName);
     }
 }
 
@@ -1456,7 +1456,7 @@ export function createBuildProgramUsingProgramBuildInfo(program: ProgramBuildInf
     };
 
     function toPath(path: string) {
-        return ts.toPath(path, buildInfoDirectory, getCanonicalFileName);
+        return toPathInternal(path, buildInfoDirectory, getCanonicalFileName);
     }
 
     function toAbsolutePath(path: string) {
diff --git a/src/compiler/checker.ts b/src/compiler/checker.ts
index 99291e11a5..c4032f9b79 100644
--- a/src/compiler/checker.ts
+++ b/src/compiler/checker.ts
@@ -1,5 +1,3 @@
-import * as ts from "./_namespaces/ts";
-import { performance } from "./_namespaces/ts";
 import { bindSourceFile, getModuleInstanceState, ModuleInstanceState } from "./binder";
 import {
     addRange, and, append, appendIfUnique, arrayFrom, arrayOf, arraysEqual, arrayToMultiMap, binarySearch,
@@ -57,6 +55,7 @@ import {
     comparePaths, fileExtensionIs, fileExtensionIsOneOf, getDirectoryPath, getNormalizedAbsolutePath, hasExtension,
     pathIsRelative,
 } from "./path";
+import * as performance from "./performance";
 import {
     getModeForUsageLocation, getResolutionDiagnostic, getResolutionModeOverrideForClause,
     isExclusivelyTypeOnlyImportOrExport, resolveTripleslashReference,
@@ -212,8 +211,8 @@ import {
     getEffectiveConstraintOfTypeParameter, getEffectiveTypeParameterDeclarations, getJSDocClassTag,
     getJSDocDeprecatedTag, getJSDocEnumTag, getJSDocParameterTags, getJSDocTags, getJSDocThisTag, getJSDocType,
     getJSDocTypeTag, getNameOfDeclaration, getOriginalNode, getParseTreeNode, getTextOfJSDocComment, hasInitializer,
-    hasJSDocNodes, hasJSDocParameterTags, hasOnlyExpressionInitializer, hasRestParameter, hasScopeMarker, idText,
-    isAccessor, isAssertionExpression, isAssignmentPattern, isBindingPattern, isCallChain, isCallLikeExpression,
+    hasJSDocNodes, hasJSDocParameterTags, hasOnlyExpressionInitializer, hasRestParameter, hasScopeMarker, hasType,
+    idText, isAccessor, isAssertionExpression, isAssignmentPattern, isBindingPattern, isCallChain, isCallLikeExpression,
     isCallOrNewExpression, isClassElement, isClassLike, isConstTypeReference, isDeclaration, isEntityName, isExpression,
     isExpressionOfOptionalChainRoot, isExternalModuleIndicator, isExternalModuleNameRelative, isForInOrOfStatement,
     isFunctionLike, isFunctionLikeDeclaration, isFunctionLikeOrClassStaticBlockDeclaration, isFunctionOrModuleBlock,
@@ -966,6 +965,7 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {
         isPropertyAccessible,
         getTypeOnlyAliasDeclaration,
         getMemberOverrideModifierStatus,
+        typeHasCallOrConstructSignatures,
     };
 
     function runWithInferenceBlockedFromSourceNode<T>(node: Node | undefined, fn: () => T): T {
@@ -8817,7 +8817,7 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {
 
     function findResolutionCycleStartIndex(target: TypeSystemEntity, propertyName: TypeSystemPropertyName): number {
         for (let i = resolutionTargets.length - 1; i >= 0; i--) {
-            if (hasType(resolutionTargets[i], resolutionPropertyNames[i])) {
+            if (resolutionTargetHasType(resolutionTargets[i], resolutionPropertyNames[i])) {
                 return -1;
             }
             if (resolutionTargets[i] === target && resolutionPropertyNames[i] === propertyName) {
@@ -8827,7 +8827,7 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {
         return -1;
     }
 
-    function hasType(target: TypeSystemEntity, propertyName: TypeSystemPropertyName): boolean {
+    function resolutionTargetHasType(target: TypeSystemEntity, propertyName: TypeSystemPropertyName): boolean {
         switch (propertyName) {
             case TypeSystemPropertyName.Type:
                 return !!getSymbolLinks(target as Symbol).type;
@@ -17751,7 +17751,7 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {
             return false;
         }
         // Or functions with annotated parameter types
-        if (some(node.parameters, ts.hasType)) {
+        if (some(node.parameters, hasType)) {
             return false;
         }
         const sourceSig = getSingleCallSignature(source);
@@ -42643,7 +42643,7 @@ export function createTypeChecker(host: TypeCheckerHost): TypeChecker {
     }
 
     function typeHasCallOrConstructSignatures(type: Type): boolean {
-        return ts.typeHasCallOrConstructSignatures(type, checker);
+        return getSignaturesOfType(type, SignatureKind.Call).length !== 0 || getSignaturesOfType(type, SignatureKind.Construct).length !== 0;
     }
 
     function getRootSymbols(symbol: Symbol): readonly Symbol[] {
diff --git a/src/compiler/emitter.ts b/src/compiler/emitter.ts
index 82754ac7f6..42ae569e53 100644
--- a/src/compiler/emitter.ts
+++ b/src/compiler/emitter.ts
@@ -1,5 +1,3 @@
-import * as ts from "./_namespaces/ts";
-import { performance } from "./_namespaces/ts";
 import { OutputFile } from "./builderStatePublic";
 import { getNodeId } from "./checker";
 import {
@@ -7,7 +5,7 @@ import {
     forEach, GetCanonicalFileName, isArray, last, lastOrUndefined, length, memoize, notImplemented, returnFalse,
     returnUndefined, singleOrUndefined, some, stableSort, stringContains,
 } from "./core";
-import { Comparison, Map, Set } from "./corePublic";
+import { Comparison, Map, Set, version } from "./corePublic";
 import { Debug } from "./debug";
 import { compareEmitHelpers } from "./factory/emitHelpers";
 import {
@@ -32,6 +30,7 @@ import {
     getRelativePathFromDirectory, getRelativePathToDirectoryOrUrl, getRootLength, normalizePath, normalizeSlashes,
     resolvePath,
 } from "./path";
+import * as performance from "./performance";
 import { computeCommonSourceDirectoryOfFilenames, createPrependNodes } from "./program";
 import {
     computeLineStarts, forEachLeadingCommentRange, forEachTrailingCommentRange, getLeadingCommentRanges,
@@ -93,12 +92,12 @@ import {
     getLinesBetweenRangeEndAndRangeStart, getLiteralText, GetLiteralTextFlags, getNewLineCharacter,
     getOwnEmitOutputFilePath, getSourceFileOfNode, getSourceFilePathInNewDir, getSourceFilesToEmit,
     getSourceTextOfNodeFromSourceFile, getTrailingSemicolonDeferringWriter, isAccessExpression, isBundleFileTextLike,
-    isIncrementalCompilation, isInJsonFile, isJsonSourceFile, isKeyword, isLet, isNodeDescendantOf, isPinnedComment,
-    isPrologueDirective, isRecognizedTripleSlashComment, isSourceFileNotJson, isVarConst, makeIdentifierFromModuleName,
-    nodeIsSynthesized, outFile, positionIsSynthesized, positionsAreOnSameLine, rangeEndIsOnSameLineAsRangeStart,
-    rangeEndPositionsAreOnSameLine, rangeIsOnSingleLine, rangeStartPositionsAreOnSameLine, removeFileExtension,
-    setEachParent, setParent, setTextRangePosEnd, setTextRangePosWidth, supportedJSExtensionsFlat, writeCommentRange,
-    writeFile,
+    isFileLevelUniqueName as isFileLevelUniqueNameInternal, isIncrementalCompilation, isInJsonFile, isJsonSourceFile,
+    isKeyword, isLet, isNodeDescendantOf, isPinnedComment, isPrologueDirective, isRecognizedTripleSlashComment,
+    isSourceFileNotJson, isVarConst, makeIdentifierFromModuleName, nodeIsSynthesized, outFile, positionIsSynthesized,
+    positionsAreOnSameLine, rangeEndIsOnSameLineAsRangeStart, rangeEndPositionsAreOnSameLine, rangeIsOnSingleLine,
+    rangeStartPositionsAreOnSameLine, removeFileExtension, setEachParent, setParent, setTextRangePosEnd,
+    setTextRangePosWidth, supportedJSExtensionsFlat, writeCommentRange, writeFile,
 } from "./utilities";
 import {
     escapeLeadingUnderscores, getOriginalNode, getParseTreeNode, getTextOfJSDocComment, guessIndentation, idText,
@@ -472,7 +471,6 @@ export function emitFiles(resolver: EmitResolver, host: EmitHost, targetSourceFi
             emitSkipped = true;
             return;
         }
-        const version = ts.version; // Extracted into a const so the form is stable between namespace and module
         writeFile(host, emitterDiagnostics, buildInfoPath, getBuildInfoText({ bundle, program, version }), /*writeByteOrderMark*/ false);
     }
 
@@ -5210,7 +5208,7 @@ export function createPrinter(printerOptions: PrinterOptions = {}, handlers: Pri
      * Returns a value indicating whether a name is unique globally or within the current file.
      */
     function isFileLevelUniqueName(name: string) {
-        return currentSourceFile ? ts.isFileLevelUniqueName(currentSourceFile, name, hasGlobalName) : true;
+        return currentSourceFile ? isFileLevelUniqueNameInternal(currentSourceFile, name, hasGlobalName) : true;
     }
 
     /**
diff --git a/src/compiler/parser.ts b/src/compiler/parser.ts
index 821bf35a7f..87a2d9269a 100644
--- a/src/compiler/parser.ts
+++ b/src/compiler/parser.ts
@@ -1,5 +1,3 @@
-import * as ts from "./_namespaces/ts";
-import { performance } from "./_namespaces/ts";
 import { convertToObjectWorker } from "./commandLineParser";
 import {
     addRange, append, AssertionLevel, concatenate, emptyArray, emptyMap, findIndex, forEach, getSpellingSuggestion,
@@ -12,13 +10,15 @@ import { BaseNodeFactory } from "./factory/baseNodeFactory";
 import { createNodeFactory, NodeFactoryFlags } from "./factory/nodeFactory";
 import {
     isAsyncModifier, isExportAssignment, isExportDeclaration, isExportModifier, isExternalModuleReference,
-    isFunctionTypeNode, isImportDeclaration, isImportEqualsDeclaration, isJSDocFunctionType, isJSDocNullableType,
-    isJSDocReturnTag, isJSDocTypeTag, isJsxOpeningElement, isJsxOpeningFragment, isMetaProperty, isNonNullExpression,
-    isPrivateIdentifier, isTaggedTemplateExpression, isTypeReferenceNode,
+    isFunctionTypeNode, isIdentifier as isIdentifierNode, isImportDeclaration, isImportEqualsDeclaration,
+    isJSDocFunctionType, isJSDocNullableType, isJSDocReturnTag, isJSDocTypeTag, isJsxOpeningElement,
+    isJsxOpeningFragment, isMetaProperty, isNonNullExpression, isPrivateIdentifier, isTaggedTemplateExpression,
+    isTypeReferenceNode,
 } from "./factory/nodeTests";
 import { setTextRange } from "./factory/utilitiesPublic";
 import { fileExtensionIsOneOf, normalizePath } from "./path";
 import { perfLogger } from "./perfLogger";
+import * as performance from "./performance";
 import {
     createScanner, getLeadingCommentRanges, isIdentifierText, skipTrivia, textToKeywordObj, tokenIsIdentifierOrKeyword,
     tokenIsIdentifierOrKeywordOrGreaterThan, tokenToString,
@@ -1757,7 +1757,7 @@ namespace Parser {
         }
 
         // Otherwise, if this isn't a well-known keyword-like identifier, give the generic fallback message.
-        const expressionText = ts.isIdentifier(node) ? idText(node) : undefined;
+        const expressionText = isIdentifierNode(node) ? idText(node) : undefined;
         if (!expressionText || !isIdentifierText(expressionText, languageVersion)) {
             parseErrorAtCurrentToken(Diagnostics._0_expected, tokenToString(SyntaxKind.SemicolonToken));
             return;
@@ -6335,7 +6335,7 @@ namespace Parser {
         let node: ExpressionStatement | LabeledStatement;
         const hasParen = token() === SyntaxKind.OpenParenToken;
         const expression = allowInAnd(parseExpression);
-        if (ts.isIdentifier(expression) && parseOptional(SyntaxKind.ColonToken)) {
+        if (isIdentifierNode(expression) && parseOptional(SyntaxKind.ColonToken)) {
             node = factory.createLabeledStatement(expression, parseStatement());
         }
         else {
@@ -8393,7 +8393,7 @@ namespace Parser {
                     case SyntaxKind.ArrayType:
                         return isObjectOrObjectArrayTypeReference((node as ArrayTypeNode).elementType);
                     default:
-                        return isTypeReferenceNode(node) && ts.isIdentifier(node.typeName) && node.typeName.escapedText === "Object" && !node.typeArguments;
+                        return isTypeReferenceNode(node) && isIdentifierNode(node.typeName) && node.typeName.escapedText === "Object" && !node.typeArguments;
                 }
             }
 
@@ -8664,8 +8664,8 @@ namespace Parser {
             }
 
             function escapedTextsEqual(a: EntityName, b: EntityName): boolean {
-                while (!ts.isIdentifier(a) || !ts.isIdentifier(b)) {
-                    if (!ts.isIdentifier(a) && !ts.isIdentifier(b) && a.right.escapedText === b.right.escapedText) {
+                while (!isIdentifierNode(a) || !isIdentifierNode(b)) {
+                    if (!isIdentifierNode(a) && !isIdentifierNode(b) && a.right.escapedText === b.right.escapedText) {
                         a = a.left;
                         b = b.left;
                     }
@@ -8690,7 +8690,7 @@ namespace Parser {
                                 const child = tryParseChildTag(target, indent);
                                 if (child && (child.kind === SyntaxKind.JSDocParameterTag || child.kind === SyntaxKind.JSDocPropertyTag) &&
                                     target !== PropertyLikeParse.CallbackParameter &&
-                                    name && (ts.isIdentifier(child.name) || !escapedTextsEqual(name, child.name.left))) {
+                                    name && (isIdentifierNode(child.name) || !escapedTextsEqual(name, child.name.left))) {
                                     return false;
                                 }
                                 return child;
diff --git a/src/compiler/program.ts b/src/compiler/program.ts
index 120b8e6d96..e6322ebe82 100644
--- a/src/compiler/program.ts
+++ b/src/compiler/program.ts
@@ -1,5 +1,4 @@
 import * as ts from "./_namespaces/ts";
-import { performance } from "./_namespaces/ts";
 import { BuilderProgram } from "./builderPublic";
 import { createTypeChecker } from "./checker";
 import {
@@ -42,8 +41,9 @@ import {
     ensureTrailingDirectorySeparator, fileExtensionIs, fileExtensionIsOneOf, forEachAncestorDirectory, getBaseFileName,
     getDirectoryPath, getNormalizedAbsolutePath, getNormalizedAbsolutePathWithoutRoot, getNormalizedPathComponents,
     getPathFromPathComponents, getRootLength, hasExtension, isRootedDiskPath, normalizePath, pathIsAbsolute,
-    pathIsRelative,
+    pathIsRelative, toPath as toPathInternal,
 } from "./path";
+import * as performance from "./performance";
 import {
     computeLineAndCharacterOfPosition, getLineAndCharacterOfPosition, getLineStarts, getPositionOfLineAndCharacter,
     isIdentifierText, skipTrivia, tokenToString,
@@ -1570,7 +1570,7 @@ export function createProgram(rootNamesOrOptions: readonly string[] | CreateProg
     }
 
     function toPath(fileName: string): Path {
-        return ts.toPath(fileName, currentDirectory, getCanonicalFileName);
+        return toPathInternal(fileName, currentDirectory, getCanonicalFileName);
     }
 
     function getCommonSourceDirectory() {
diff --git a/src/compiler/resolutionCache.ts b/src/compiler/resolutionCache.ts
index 5b79bdcbb1..6f444844f1 100644
--- a/src/compiler/resolutionCache.ts
+++ b/src/compiler/resolutionCache.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import {
     arrayToMap, contains, createMultiMap, emptyIterator, endsWith, firstDefinedIterator, GetCanonicalFileName, isString,
     length, memoize, removeSuffix, returnTrue, some, startsWith, stringContains, unorderedRemoveItem,
@@ -9,7 +8,9 @@ import { Diagnostics } from "./diagnosticInformationMap.generated";
 import {
     CacheWithRedirects, createCacheWithRedirects, createModeAwareCache, createModuleResolutionCache,
     createTypeReferenceDirectiveResolutionCache, getEffectiveTypeRoots, isTraceEnabled, loadModuleFromGlobalCache,
-    ModeAwareCache, ModuleResolutionCache, parseNodeModuleFromPath, pathContainsNodeModules, PerModuleNameCache, trace,
+    ModeAwareCache, ModuleResolutionCache, parseNodeModuleFromPath, pathContainsNodeModules, PerModuleNameCache,
+    resolveModuleName as internalResolveModuleName,
+    resolveTypeReferenceDirective as internalResolveTypeReferenceDirective, trace,
 } from "./moduleNameResolver";
 import {
     directorySeparator, fileExtensionIs, fileExtensionIsOneOf, getDirectoryPath, getNormalizedAbsolutePath,
@@ -349,7 +350,7 @@ export function createResolutionCache(resolutionHost: ResolutionCacheHost, rootD
     }
 
     function resolveModuleName(moduleName: string, containingFile: string, compilerOptions: CompilerOptions, host: ModuleResolutionHost, redirectedReference?: ResolvedProjectReference, _containingSourceFile?: never, mode?: ModuleKind.CommonJS | ModuleKind.ESNext | undefined): CachedResolvedModuleWithFailedLookupLocations {
-        const primaryResult = ts.resolveModuleName(moduleName, containingFile, compilerOptions, host, moduleResolutionCache, redirectedReference, mode);
+        const primaryResult = internalResolveModuleName(moduleName, containingFile, compilerOptions, host, moduleResolutionCache, redirectedReference, mode);
         // return result immediately only if global cache support is not enabled or if it is .ts, .tsx or .d.ts
         if (!resolutionHost.getGlobalCache) {
             return primaryResult;
@@ -381,7 +382,7 @@ export function createResolutionCache(resolutionHost: ResolutionCacheHost, rootD
     }
 
     function resolveTypeReferenceDirective(typeReferenceDirectiveName: string, containingFile: string | undefined, options: CompilerOptions, host: ModuleResolutionHost, redirectedReference?: ResolvedProjectReference, _containingSourceFile?: SourceFile, resolutionMode?: SourceFile["impliedNodeFormat"] | undefined): CachedResolvedTypeReferenceDirectiveWithFailedLookupLocations {
-        return ts.resolveTypeReferenceDirective(typeReferenceDirectiveName, containingFile, options, host, redirectedReference, typeReferenceDirectiveResolutionCache, resolutionMode);
+        return internalResolveTypeReferenceDirective(typeReferenceDirectiveName, containingFile, options, host, redirectedReference, typeReferenceDirectiveResolutionCache, resolutionMode);
     }
 
     interface ResolveNamesWithLocalCacheInput<T extends ResolutionWithFailedLookupLocations, R extends ResolutionWithResolvedFileName> {
diff --git a/src/compiler/sourcemap.ts b/src/compiler/sourcemap.ts
index de32e59d81..a49f17324f 100644
--- a/src/compiler/sourcemap.ts
+++ b/src/compiler/sourcemap.ts
@@ -1,4 +1,3 @@
-import { performance } from "./_namespaces/ts";
 import {
     arrayFrom, binarySearchKey, compareValues, emptyArray, every, identity, isArray, isString, some, sortAndDeduplicate,
     trimStringEnd,
@@ -6,6 +5,7 @@ import {
 import { ESMap, Iterator, Map, SortedReadonlyArray } from "./corePublic";
 import { Debug } from "./debug";
 import { combinePaths, getDirectoryPath, getNormalizedAbsolutePath, getRelativePathToDirectoryOrUrl } from "./path";
+import * as performance from "./performance";
 import { getPositionOfLineAndCharacter } from "./scanner";
 import {
     CharacterCodes, DocumentPosition, DocumentPositionMapper, DocumentPositionMapperHost, EmitHost, LineAndCharacter,
diff --git a/src/compiler/sys.ts b/src/compiler/sys.ts
index a8628245ac..aaf8bca43d 100644
--- a/src/compiler/sys.ts
+++ b/src/compiler/sys.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import { matchesExclude } from "./commandLineParser";
 import {
     AssertionLevel, contains, createGetCanonicalFileName, createMultiMap, emptyArray, enumerateInsertsAndDeletes,
@@ -215,26 +214,26 @@ export function createDynamicPriorityPollingWatchFile(host: {
     getModifiedTime: NonNullable<System["getModifiedTime"]>;
     setTimeout: NonNullable<System["setTimeout"]>;
 }): HostWatchFile {
-    interface WatchedFile extends ts.WatchedFile {
+    interface DynamicWatchedFile extends WatchedFile {
         isClosed?: boolean;
         unchangedPolls: number;
     }
 
-    interface PollingIntervalQueue extends Array<WatchedFile> {
+    interface PollingIntervalQueue extends Array<DynamicWatchedFile> {
         pollingInterval: PollingInterval;
         pollIndex: number;
         pollScheduled: boolean;
     }
 
-    const watchedFiles: WatchedFile[] = [];
-    const changedFilesInLastPoll: WatchedFile[] = [];
+    const watchedFiles: DynamicWatchedFile[] = [];
+    const changedFilesInLastPoll: DynamicWatchedFile[] = [];
     const lowPollingIntervalQueue = createPollingIntervalQueue(PollingInterval.Low);
     const mediumPollingIntervalQueue = createPollingIntervalQueue(PollingInterval.Medium);
     const highPollingIntervalQueue = createPollingIntervalQueue(PollingInterval.High);
     return watchFile;
 
     function watchFile(fileName: string, callback: FileWatcherCallback, defaultPollingInterval: PollingInterval): FileWatcher {
-        const file: WatchedFile = {
+        const file: DynamicWatchedFile = {
             fileName,
             callback,
             unchangedPolls: 0,
@@ -254,7 +253,7 @@ export function createDynamicPriorityPollingWatchFile(host: {
     }
 
     function createPollingIntervalQueue(pollingInterval: PollingInterval): PollingIntervalQueue {
-        const queue = [] as WatchedFile[] as PollingIntervalQueue;
+        const queue = [] as DynamicWatchedFile[] as PollingIntervalQueue;
         queue.pollingInterval = pollingInterval;
         queue.pollIndex = 0;
         queue.pollScheduled = false;
@@ -286,7 +285,7 @@ export function createDynamicPriorityPollingWatchFile(host: {
         }
     }
 
-    function pollQueue(queue: (WatchedFile | undefined)[], pollingInterval: PollingInterval, pollIndex: number, chunkSize: number) {
+    function pollQueue(queue: (DynamicWatchedFile | undefined)[], pollingInterval: PollingInterval, pollIndex: number, chunkSize: number) {
         return pollWatchedFileQueue(
             host,
             queue,
@@ -295,7 +294,7 @@ export function createDynamicPriorityPollingWatchFile(host: {
             onWatchFileStat
         );
 
-        function onWatchFileStat(watchedFile: WatchedFile, pollIndex: number, fileChanged: boolean) {
+        function onWatchFileStat(watchedFile: DynamicWatchedFile, pollIndex: number, fileChanged: boolean) {
             if (fileChanged) {
                 watchedFile.unchangedPolls = 0;
                 // Changed files go to changedFilesInLastPoll queue
@@ -332,12 +331,12 @@ export function createDynamicPriorityPollingWatchFile(host: {
         }
     }
 
-    function addToPollingIntervalQueue(file: WatchedFile, pollingInterval: PollingInterval) {
+    function addToPollingIntervalQueue(file: DynamicWatchedFile, pollingInterval: PollingInterval) {
         pollingIntervalQueue(pollingInterval).push(file);
         scheduleNextPollIfNotAlreadyScheduled(pollingInterval);
     }
 
-    function addChangedFileToLowPollingIntervalQueue(file: WatchedFile) {
+    function addChangedFileToLowPollingIntervalQueue(file: DynamicWatchedFile) {
         changedFilesInLastPoll.push(file);
         scheduleNextPollIfNotAlreadyScheduled(PollingInterval.Low);
     }
diff --git a/src/compiler/tracing.ts b/src/compiler/tracing.ts
index 9705b1b560..8654d385aa 100644
--- a/src/compiler/tracing.ts
+++ b/src/compiler/tracing.ts
@@ -1,7 +1,7 @@
-import { performance } from "./_namespaces/ts";
 import { Map } from "./corePublic";
 import { Debug } from "./debug";
 import { combinePaths } from "./path";
+import * as performance from "./performance";
 import { timestamp } from "./performanceCore";
 import { getLineAndCharacterOfPosition } from "./scanner";
 import {
diff --git a/src/compiler/transformer.ts b/src/compiler/transformer.ts
index 2df182d5e7..78706cfd2a 100644
--- a/src/compiler/transformer.ts
+++ b/src/compiler/transformer.ts
@@ -1,10 +1,10 @@
-import { performance } from "./_namespaces/ts";
 import { addRange, append, emptyArray, map, memoize, noop, notImplemented, returnUndefined, some } from "./core";
 import { Debug } from "./debug";
 import { createEmitHelperFactory } from "./factory/emitHelpers";
 import { disposeEmitNodes, setEmitFlags } from "./factory/emitNode";
 import { factory } from "./factory/nodeFactory";
 import { isBundle, isSourceFile } from "./factory/nodeTests";
+import * as performance from "./performance";
 import { tracing } from "./tracing";
 import { transformClassFields } from "./transformers/classFields";
 import { transformDeclarations } from "./transformers/declarations";
diff --git a/src/compiler/transformers/declarations.ts b/src/compiler/transformers/declarations.ts
index 641496e5de..7b35a3e62f 100644
--- a/src/compiler/transformers/declarations.ts
+++ b/src/compiler/transformers/declarations.ts
@@ -1,4 +1,3 @@
-import * as ts from "../_namespaces/ts";
 import {
     append, arrayFrom, compact, concatenate, contains, emptyArray, filter, flatMap, flatten, forEach, isArray, last,
     length, map, mapDefined, orderedRemoveItem, pushIfUnique, some, startsWith, stringContains, toFileNameLowerCase,
@@ -886,7 +885,7 @@ export function transformDeclarations(context: TransformationContext) {
         while (length(lateMarkedStatements)) {
             const i = lateMarkedStatements!.shift()!;
             if (!isLateVisibilityPaintedStatement(i)) {
-                return Debug.fail(`Late replaced statement was found which is not handled by the declaration transformer!: ${(ts as any).SyntaxKind ? (ts as any).SyntaxKind[(i as any).kind] : (i as any).kind}`);
+                return Debug.fail(`Late replaced statement was found which is not handled by the declaration transformer!: ${Debug.formatSyntaxKind((i as any).kind)}`);
             }
             const priorNeedsDeclare = needsDeclare;
             needsDeclare = i.parent && isSourceFile(i.parent) && !(isExternalModule(i.parent) && isBundledEmit);
@@ -1142,7 +1141,7 @@ export function transformDeclarations(context: TransformationContext) {
                         input.isTypeOf
                     ));
                 }
-                default: Debug.assertNever(input, `Attempted to process unhandled node kind: ${(ts as any).SyntaxKind[(input as any).kind]}`);
+                default: Debug.assertNever(input, `Attempted to process unhandled node kind: ${Debug.formatSyntaxKind((input as any).kind)}`);
             }
         }
 
@@ -1571,7 +1570,7 @@ export function transformDeclarations(context: TransformationContext) {
             }
         }
         // Anything left unhandled is an error, so this should be unreachable
-        return Debug.assertNever(input, `Unhandled top-level node in declaration emit: ${(ts as any).SyntaxKind[(input as any).kind]}`);
+        return Debug.assertNever(input, `Unhandled top-level node in declaration emit: ${Debug.formatSyntaxKind((input as any).kind)}`);
 
         function cleanup<T extends Node>(node: T | undefined): T | undefined {
             if (isEnclosingDeclaration(input)) {
diff --git a/src/compiler/transformers/declarations/diagnostics.ts b/src/compiler/transformers/declarations/diagnostics.ts
index a821217498..0b7535fcdb 100644
--- a/src/compiler/transformers/declarations/diagnostics.ts
+++ b/src/compiler/transformers/declarations/diagnostics.ts
@@ -1,4 +1,3 @@
-import * as ts from "../../_namespaces/ts";
 import { Debug } from "../../debug";
 import { Diagnostics } from "../../diagnosticInformationMap.generated";
 import {
@@ -185,7 +184,7 @@ export function createGetSymbolAccessibilityDiagnosticForNode(node: DeclarationD
         return getTypeAliasDeclarationVisibilityError;
     }
     else {
-        return Debug.assertNever(node, `Attempted to set a declaration diagnostic context for unhandled node kind: ${(ts as any).SyntaxKind[(node as any).kind]}`);
+        return Debug.assertNever(node, `Attempted to set a declaration diagnostic context for unhandled node kind: ${Debug.formatSyntaxKind((node as any).kind)}`);
     }
 
     function getVariableDeclarationTypeVisibilityDiagnosticMessage(symbolAccessibilityResult: SymbolAccessibilityResult) {
@@ -414,7 +413,7 @@ export function createGetSymbolAccessibilityDiagnosticForNode(node: DeclarationD
                     Diagnostics.Parameter_0_of_accessor_has_or_is_using_private_name_1;
 
             default:
-                return Debug.fail(`Unknown parent for parameter: ${(ts as any).SyntaxKind[node.parent.kind]}`);
+                return Debug.fail(`Unknown parent for parameter: ${Debug.formatSyntaxKind(node.parent.kind)}`);
         }
     }
 
diff --git a/src/compiler/tsbuildPublic.ts b/src/compiler/tsbuildPublic.ts
index c457a697ca..c3546ec61b 100644
--- a/src/compiler/tsbuildPublic.ts
+++ b/src/compiler/tsbuildPublic.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import {
     AffectedFileResult, BuilderProgram, EmitAndSemanticDiagnosticsBuilderProgram, SemanticDiagnosticsBuilderProgram,
 } from "./builderPublic";
@@ -23,7 +22,7 @@ import {
     resolveTypeReferenceDirective, TypeReferenceDirectiveResolutionCache,
 } from "./moduleNameResolver";
 import { isDeclarationFileName } from "./parser";
-import { convertToRelativePath, getDirectoryPath, resolvePath } from "./path";
+import { convertToRelativePath, getDirectoryPath, resolvePath, toPath as internalToPath } from "./path";
 import {
     changeCompilerHostLikeToUseCache, flattenDiagnosticMessageText, ForegroundColorEscapeSequences, formatColorAndReset,
     getConfigFileParsingDiagnostics, loadWithModeAwareCache, loadWithTypeDirectiveCache,
@@ -408,7 +407,7 @@ function createSolutionBuilderState<T extends BuilderProgram>(watch: boolean, ho
 }
 
 function toPath(state: SolutionBuilderState, fileName: string) {
-    return ts.toPath(fileName, state.currentDirectory, state.getCanonicalFileName);
+    return internalToPath(fileName, state.currentDirectory, state.getCanonicalFileName);
 }
 
 function toResolvedConfigFilePath(state: SolutionBuilderState, fileName: ResolvedConfigFileName): ResolvedConfigFilePath {
diff --git a/src/compiler/types.ts b/src/compiler/types.ts
index a0960a9520..a9ae4d1be7 100644
--- a/src/compiler/types.ts
+++ b/src/compiler/types.ts
@@ -4468,6 +4468,7 @@ export interface TypeChecker {
     /* @internal */ isPropertyAccessible(node: Node, isSuper: boolean, isWrite: boolean, containingType: Type, property: Symbol): boolean;
     /* @internal */ getTypeOnlyAliasDeclaration(symbol: Symbol): TypeOnlyAliasDeclaration | undefined;
     /* @internal */ getMemberOverrideModifierStatus(node: ClassLikeDeclaration, member: ClassElement): MemberOverrideStatus;
+    /* @internal */ typeHasCallOrConstructSignatures(type: Type): boolean;
 }
 
 /* @internal */
diff --git a/src/compiler/utilities.ts b/src/compiler/utilities.ts
index 25e4e6f08b..75c1920517 100644
--- a/src/compiler/utilities.ts
+++ b/src/compiler/utilities.ts
@@ -87,8 +87,8 @@ import {
     PropertyAccessExpression, PropertyAssignment, PropertyDeclaration, PropertyName, PropertyNameLiteral, PseudoBigInt,
     QualifiedName, ReadonlyTextRange, RequireOrImportCall, RequireVariableStatement, ResolvedModuleFull,
     ResolvedTypeReferenceDirective, ReturnStatement, ScriptKind, ScriptTarget, SetAccessorDeclaration,
-    ShorthandPropertyAssignment, Signature, SignatureDeclaration, SignatureFlags, SignatureKind, SourceFile,
-    SourceFileLike, SourceFileMayBeEmittedHost, SourceMapSource, Statement, StringLiteral, StringLiteralLike, SuperCall,
+    ShorthandPropertyAssignment, Signature, SignatureDeclaration, SignatureFlags, SourceFile, SourceFileLike,
+    SourceFileMayBeEmittedHost, SourceMapSource, Statement, StringLiteral, StringLiteralLike, SuperCall,
     SuperExpression, SuperProperty, SwitchStatement, Symbol, SymbolFlags, SymbolTable, SyntaxKind, SyntaxList,
     TaggedTemplateExpression, TemplateLiteral, TemplateLiteralLikeNode, TemplateLiteralTypeSpan, TemplateSpan,
     TextRange, TextSpan, ThisTypePredicate, Token, TokenFlags, TransformFlags, TransientSymbol, TriviaSyntaxKind,
@@ -6326,11 +6326,6 @@ export function getObjectFlags(type: Type): ObjectFlags {
     return type.flags & TypeFlags.ObjectFlagsType ? (type as ObjectFlagsType).objectFlags : 0;
 }
 
-/* @internal */
-export function typeHasCallOrConstructSignatures(type: Type, checker: TypeChecker) {
-    return checker.getSignaturesOfType(type, SignatureKind.Call).length !== 0 || checker.getSignaturesOfType(type, SignatureKind.Construct).length !== 0;
-}
-
 /* @internal */
 export function forSomeAncestorDirectory(directory: string, callback: (directory: string) => boolean): boolean {
     return !!forEachAncestorDirectory(directory, d => callback(d) ? true : undefined);
diff --git a/src/compiler/watch.ts b/src/compiler/watch.ts
index b6b67c40a2..54fb404f52 100644
--- a/src/compiler/watch.ts
+++ b/src/compiler/watch.ts
@@ -1,5 +1,3 @@
-import * as ts from "./_namespaces/ts";
-import { performance } from "./_namespaces/ts";
 import {
     BuilderProgram, createEmitAndSemanticDiagnosticsBuilderProgram, EmitAndSemanticDiagnosticsBuilderProgram,
 } from "./builderPublic";
@@ -19,6 +17,7 @@ import {
     combinePaths, convertToRelativePath, fileExtensionIs, getDirectoryPath, getNormalizedAbsolutePath,
     getRelativePathFromDirectory, normalizePath, pathIsAbsolute,
 } from "./path";
+import * as performance from "./performance";
 import {
     flattenDiagnosticMessageText, ForegroundColorEscapeSequences, formatColorAndReset, formatDiagnostic,
     FormatDiagnosticsHost, formatDiagnosticsWithColorAndContext, getReferencedFileLocation, isReferencedFile,
@@ -42,7 +41,9 @@ import {
     createIncrementalCompilerHost, createIncrementalProgram, CreateProgram, ProgramHost, WatchCompilerHost,
     WatchCompilerHostOfConfigFile, WatchCompilerHostOfFilesAndCompilerOptions, WatchHost, WatchStatusReporter,
 } from "./watchPublic";
-import { DirectoryStructureHost, getWatchFactory, WatchFactoryHost, WatchLogLevel } from "./watchUtilities";
+import {
+    DirectoryStructureHost, getWatchFactory, WatchFactory as InternalWatchFactory, WatchFactoryHost, WatchLogLevel,
+} from "./watchUtilities";
 
 const sysFormatDiagnosticsHost: FormatDiagnosticsHost | undefined = sys ? {
     getCurrentDirectory: () => sys.getCurrentDirectory(),
@@ -613,7 +614,7 @@ export interface WatchTypeRegistry {
     NodeModulesForModuleSpecifierCache: "node_modules for module specifier cache invalidation",
 }
 
-interface WatchFactory<X, Y = undefined> extends ts.WatchFactory<X, Y> {
+interface WatchFactory<X, Y = undefined> extends InternalWatchFactory<X, Y> {
     writeLog: (s: string) => void;
 }
 
diff --git a/src/compiler/watchPublic.ts b/src/compiler/watchPublic.ts
index abfcfc4ab4..658b4a5005 100644
--- a/src/compiler/watchPublic.ts
+++ b/src/compiler/watchPublic.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import { createBuildProgramUsingProgramBuildInfo } from "./builder";
 import {
     BuilderProgram, createEmitAndSemanticDiagnosticsBuilderProgram, EmitAndSemanticDiagnosticsBuilderProgram,
@@ -13,7 +12,7 @@ import { Debug } from "./debug";
 import { Diagnostics } from "./diagnosticInformationMap.generated";
 import { getBuildInfo, getTsBuildInfoEmitOutputFilePath } from "./emitter";
 import { CreateSourceFileOptions } from "./parser";
-import { getDirectoryPath, getNormalizedAbsolutePath, toPath } from "./path";
+import { getDirectoryPath, getNormalizedAbsolutePath, toPath, toPath as toPathInternal } from "./path";
 import { perfLogger } from "./perfLogger";
 import {
     changeCompilerHostLikeToUseCache, createCompilerHostWorker, getConfigFileParsingDiagnostics,
@@ -556,7 +555,7 @@ export function createWatchProgram<T extends BuilderProgram>(host: WatchCompiler
     }
 
     function toPath(fileName: string) {
-        return ts.toPath(fileName, currentDirectory, getCanonicalFileName);
+        return toPathInternal(fileName, currentDirectory, getCanonicalFileName);
     }
 
     function isFileMissingOnHost(hostSourceFile: HostFileInfo | undefined): hostSourceFile is FileMissingOnHost {
diff --git a/src/compiler/watchUtilities.ts b/src/compiler/watchUtilities.ts
index 5a9110e2b3..b3e5305d0a 100644
--- a/src/compiler/watchUtilities.ts
+++ b/src/compiler/watchUtilities.ts
@@ -1,4 +1,3 @@
-import * as ts from "./_namespaces/ts";
 import { BuilderProgram } from "./builderPublic";
 import { ExtendedConfigCacheEntry, isExcludedFile, matchesExclude } from "./commandLineParser";
 import {
@@ -10,7 +9,7 @@ import { Debug } from "./debug";
 import { isDeclarationFileName } from "./parser";
 import {
     ensureTrailingDirectorySeparator, fileExtensionIsOneOf, getBaseFileName, getDirectoryPath,
-    getNormalizedAbsolutePath, hasExtension, normalizePath,
+    getNormalizedAbsolutePath, hasExtension, normalizePath, toPath as toPathInternal,
 } from "./path";
 import { timestamp } from "./performanceCore";
 import { removeIgnoredPath } from "./resolutionCache";
@@ -91,7 +90,7 @@ export function createCachedDirectoryStructureHost(host: DirectoryStructureHost,
     };
 
     function toPath(fileName: string) {
-        return ts.toPath(fileName, currentDirectory, getCanonicalFileName);
+        return toPathInternal(fileName, currentDirectory, getCanonicalFileName);
     }
 
     function getCachedFileSystemEntries(rootDirPath: Path) {
diff --git a/src/debug/dbg.ts b/src/debug/dbg.ts
index c86b021fe2..342bf6bd2d 100644
--- a/src/debug/dbg.ts
+++ b/src/debug/dbg.ts
@@ -1,5 +1,3 @@
-import * as Debug from "./_namespaces/Debug";
-
 /// <reference lib="es2019" />
 
 interface Node {
@@ -510,9 +508,3 @@ export function formatControlFlowGraph(flowNode: FlowNode) {
         return s;
     }
 }
-
-// Export as a module. NOTE: Can't use module exports as this is built using --outFile
-declare const module: { exports: {} };
-if (typeof module !== "undefined" && module.exports) {
-    module.exports = Debug;
-}
\ No newline at end of file
diff --git a/src/executeCommandLine/executeCommandLine.ts b/src/executeCommandLine/executeCommandLine.ts
index 58e1e2fcd3..a3853686fb 100644
--- a/src/executeCommandLine/executeCommandLine.ts
+++ b/src/executeCommandLine/executeCommandLine.ts
@@ -1,4 +1,3 @@
-import { performance } from "../compiler/_namespaces/ts";
 import { BuilderProgram, EmitAndSemanticDiagnosticsBuilderProgram } from "../compiler/builderPublic";
 import {
     buildOpts, convertToOptionsWithAbsolutePaths, convertToTSConfig, DiagnosticReporter, ExtendedConfigCacheEntry,
@@ -15,6 +14,7 @@ import { Diagnostics } from "../compiler/diagnosticInformationMap.generated";
 import {
     combinePaths, fileExtensionIs, fileExtensionIsOneOf, getNormalizedAbsolutePath, normalizePath, toPath,
 } from "../compiler/path";
+import * as performance from "../compiler/performance";
 import {
     changeCompilerHostLikeToUseCache, createCompilerHostWorker, createProgram, findConfigFile,
     getConfigFileParsingDiagnostics,
@@ -37,12 +37,13 @@ import {
 import { validateLocaleAndSetLanguage } from "../compiler/utilitiesPublic";
 import {
     createDiagnosticReporter, createWatchCompilerHostOfConfigFile, createWatchCompilerHostOfFilesAndCompilerOptions,
-    emitFilesAndReportErrorsAndGetExitStatus, getErrorSummaryText, parseConfigFileWithSystem,
+    createWatchStatusReporter as createWatchStatusReporterInternal, emitFilesAndReportErrorsAndGetExitStatus,
+    getErrorSummaryText, parseConfigFileWithSystem,
+    performIncrementalCompilation as performIncrementalCompilationInternal,
 } from "../compiler/watch";
 import {
     createIncrementalCompilerHost, CreateProgram, createWatchProgram, WatchCompilerHost,
 } from "../compiler/watchPublic";
-import * as ts from "./_namespaces/ts";
 
 interface Statistic {
     name: string;
@@ -863,7 +864,7 @@ function performIncrementalCompilation(
     const { options, fileNames, projectReferences } = config;
     enableStatisticsAndTracing(sys, options, /*isBuildMode*/ false);
     const host = createIncrementalCompilerHost(options, sys);
-    const exitStatus = ts.performIncrementalCompilation({
+    const exitStatus = performIncrementalCompilationInternal({
         host,
         system: sys,
         rootNames: fileNames,
@@ -919,7 +920,7 @@ function updateWatchCompilationHost(
 }
 
 function createWatchStatusReporter(sys: System, options: CompilerOptions | BuildOptions) {
-    return ts.createWatchStatusReporter(sys, shouldBePretty(sys, options));
+    return createWatchStatusReporterInternal(sys, shouldBePretty(sys, options));
 }
 
 function createWatchOfConfigFile(
diff --git a/src/harness/client.ts b/src/harness/client.ts
index 1c7d6f7cea..d33388551a 100644
--- a/src/harness/client.ts
+++ b/src/harness/client.ts
@@ -10,7 +10,7 @@ import {
     UserPreferences,
 } from "../compiler/types";
 import { createTextSpanFromBounds } from "../compiler/utilitiesPublic";
-import { protocol } from "../server/_namespaces/ts.server";
+import * as protocol from "../server/protocol";
 import { CommandNames } from "../server/session";
 import { DocumentHighlights } from "../services/documentHighlights";
 import { PatternMatchKind } from "../services/patternMatcher";
diff --git a/src/harness/fourslashImpl.ts b/src/harness/fourslashImpl.ts
index 0e0f6354fa..8db37c337a 100644
--- a/src/harness/fourslashImpl.ts
+++ b/src/harness/fourslashImpl.ts
@@ -36,7 +36,7 @@ import {
     createTextSpan, textRangeContainsPositionInclusive, textSpanContainsPosition, textSpanEnd,
     textSpanIntersectsWithPosition,
 } from "../compiler/utilitiesPublic";
-import { protocol } from "../server/_namespaces/ts.server";
+import * as protocol from "../server/protocol";
 import { TokenEncodingConsts, TokenModifier, TokenType } from "../services/classifier2020";
 import { importFixName } from "../services/codefixes/importFixes";
 import { SortText } from "../services/completions";
@@ -59,10 +59,10 @@ import {
     createTextRangeFromSpan, createTextSpanFromRange, documentSpansEqual, getTouchingPropertyName, mapOneOrMany,
     repeatString, textSpansEqual,
 } from "../services/utilities";
-import * as FourSlashInterface from "./_namespaces/FourSlashInterface";
 import * as ts from "./_namespaces/ts";
 import { SessionClient } from "./client";
 import { ParseConfigHost } from "./fakesHosts";
+import * as FourSlashInterface from "./fourslashInterfaceImpl";
 import {
     Baseline, Compiler, getConfigNameFromFileName, IO, isDefaultLibraryFile, TestCaseParser, virtualFileSystemRoot,
 } from "./harnessIO";
diff --git a/src/harness/fourslashInterfaceImpl.ts b/src/harness/fourslashInterfaceImpl.ts
index f0fddd78c2..23fcd515b3 100644
--- a/src/harness/fourslashInterfaceImpl.ts
+++ b/src/harness/fourslashInterfaceImpl.ts
@@ -4,7 +4,7 @@ import { Comparison, ESMap, MapLike } from "../compiler/corePublic";
 import { tokenToString } from "../compiler/scanner";
 import { LineAndCharacter, Symbol, SyntaxKind, TextSpan, UserPreferences } from "../compiler/types";
 import { createTextSpan } from "../compiler/utilitiesPublic";
-import { protocol } from "../server/_namespaces/ts.server";
+import * as protocol from "../server/protocol";
 import { Completions } from "../services/_namespaces/ts";
 import { SortText } from "../services/completions";
 import { PatternMatchKind } from "../services/patternMatcher";
@@ -14,8 +14,8 @@ import {
     IndentStyle, InlayHintKind, JSDocTagInfo, JsxClosingTagInfo, RefactorTriggerReason, RenameInfoOptions,
     ScriptElementKind, SemanticClassificationFormat, SignatureHelpTriggerReason, SymbolDisplayPart,
 } from "../services/types";
-import * as FourSlash from "./_namespaces/FourSlash";
 import * as ts from "./_namespaces/ts";
+import * as FourSlash from "./fourslashImpl";
 
 export class Test {
     constructor(private state: FourSlash.TestState) {
diff --git a/src/harness/vfsUtil.ts b/src/harness/vfsUtil.ts
index 26427d6067..96497d5a84 100644
--- a/src/harness/vfsUtil.ts
+++ b/src/harness/vfsUtil.ts
@@ -1,11 +1,11 @@
 import { arrayFrom } from "../compiler/core";
 import { sys } from "../compiler/sys";
 import { FileSystemEntries } from "../compiler/utilities";
-import * as vpath from "./_namespaces/vpath";
 import { closeIterator, getIterator, Metadata, nextResult, SortedMap } from "./collectionsImpl";
 import { TextDocument } from "./documentsUtil";
 import { Compiler } from "./harnessIO";
 import { timeIncrements } from "./virtualFileSystemWithWatch";
+import * as vpath from "./vpathUtil";
 import {
     addTrailingSeparator, combine, compare, compareCaseInsensitive, compareCaseSensitive, dirname, format, isRoot,
     parse, resolve, validate, ValidationFlags,
diff --git a/src/server/editorServices.ts b/src/server/editorServices.ts
index 899f8ffb19..2e6c937517 100644
--- a/src/server/editorServices.ts
+++ b/src/server/editorServices.ts
@@ -51,12 +51,12 @@ import {
     PerformanceEvent, TextChange,
 } from "../services/types";
 import { getSnapshotText, isInsideNodeModules } from "../services/utilities";
-import { protocol } from "./_namespaces/ts.server";
 import { createPackageJsonCache, PackageJsonCache } from "./packageJsonCache";
 import {
     AutoImportProviderProject, ConfiguredProject, countEachFileTypes, ExternalProject, hasNoTypeScriptSource,
     InferredProject, isConfiguredProject, isInferredProject, Project, ProjectFilesWithTSDiagnostics, ProjectKind,
 } from "./project";
+import * as protocol from "./protocol";
 import { isDynamicFileName, ScriptInfo, ScriptInfoVersion } from "./scriptInfo";
 import { Session } from "./session";
 import { ServerHost } from "./types";
diff --git a/src/server/project.ts b/src/server/project.ts
index dfd37c3eb6..48c7bf0f88 100644
--- a/src/server/project.ts
+++ b/src/server/project.ts
@@ -54,12 +54,12 @@ import {
 } from "../services/types";
 import { cloneCompilerOptions, isInsideNodeModules } from "../services/utilities";
 import * as ts from "./_namespaces/ts";
-import { protocol } from "./_namespaces/ts.server";
 import {
     FileStats, forEachResolvedProjectReferenceProject, projectContainsInfoDirectly, ProjectReferenceProjectLoadKind,
     ProjectService, updateProjectIfDirty,
 } from "./editorServices";
 import { createModuleSpecifierCache } from "./moduleSpecifierCache";
+import * as protocol from "./protocol";
 import { ScriptInfo } from "./scriptInfo";
 import { Session } from "./session";
 import { ServerHost } from "./types";
diff --git a/src/server/scriptInfo.ts b/src/server/scriptInfo.ts
index b01706465f..2aa1a9ce7a 100644
--- a/src/server/scriptInfo.ts
+++ b/src/server/scriptInfo.ts
@@ -18,12 +18,12 @@ import {
     emptyOptions, FormatCodeSettings, getDefaultFormatCodeSettings, IScriptSnapshot, ScriptSnapshot,
 } from "../services/types";
 import { getSnapshotText } from "../services/utilities";
-import { protocol } from "./_namespaces/ts.server";
 import { maxFileSize } from "./editorServices";
 import {
     ConfiguredProject, ExternalProject, InferredProject, isConfiguredProject, isExternalProject, isInferredProject,
     Project, ProjectKind,
 } from "./project";
+import * as protocol from "./protocol";
 import { AbsolutePositionAndLineText, ScriptVersionCache } from "./scriptVersionCache";
 import { ServerHost } from "./types";
 import { Errors, NormalizedPath } from "./utilitiesPublic";
diff --git a/src/server/scriptVersionCache.ts b/src/server/scriptVersionCache.ts
index 4eec06854a..74d4ba7eb4 100644
--- a/src/server/scriptVersionCache.ts
+++ b/src/server/scriptVersionCache.ts
@@ -5,7 +5,7 @@ import {
     collapseTextChangeRangesAcrossMultipleVersions, createTextChangeRange, createTextSpan, unchangedTextChangeRange,
 } from "../compiler/utilitiesPublic";
 import { IScriptSnapshot } from "../services/types";
-import { protocol } from "./_namespaces/ts.server";
+import * as protocol from "./protocol";
 import { emptyArray } from "./utilitiesPublic";
 
 const lineCollectionCapacity = 4;
diff --git a/src/server/session.ts b/src/server/session.ts
index 0df63f2cf4..cdded16804 100644
--- a/src/server/session.ts
+++ b/src/server/session.ts
@@ -50,7 +50,6 @@ import {
 import {
     documentSpansEqual, getSnapshotText, getTouchingPropertyName, mapOneOrMany, PossibleProgramFileInfo,
 } from "../services/utilities";
-import { protocol } from "./_namespaces/ts.server";
 import {
     ConfigFileDiagEvent, convertFormatOptions, convertScriptKindName, convertUserPreferences, isConfigFile,
     LargeFileReferencedEvent, ProjectInfoTelemetryEvent, ProjectLanguageServiceStateEvent, ProjectLoadingFinishEvent,
@@ -60,6 +59,7 @@ import {
 import {
     ConfiguredProject, EmitResult, isConfiguredProject, isExternalProject, isInferredProject, Project, ProjectKind,
 } from "./project";
+import * as protocol from "./protocol";
 import { ScriptInfo } from "./scriptInfo";
 import { ServerHost } from "./types";
 import { ITypingsInstaller } from "./typingsCache";
diff --git a/src/services/completions.ts b/src/services/completions.ts
index 25a2467732..331214cc8a 100644
--- a/src/services/completions.ts
+++ b/src/services/completions.ts
@@ -50,8 +50,7 @@ import {
     isLiteralImportTypeNode, isNamedImportsOrExports, isObjectTypeDeclaration, isPartOfTypeNode, isPropertyNameLiteral,
     isSingleOrDoubleQuote, isSourceFileJS, isStatic, isStringANonContextualKeyword, isValidTypeOnlyAliasUseSite,
     isVariableLike, modifiersToFlags, modifierToFlag, nodeIsMissing, positionsAreOnSameLine, pseudoBigIntToString,
-    rangeIsOnSingleLine, skipAlias, stripQuotes, tryGetImportFromModuleSpecifier, typeHasCallOrConstructSignatures,
-    walkUpParenthesizedExpressions,
+    rangeIsOnSingleLine, skipAlias, stripQuotes, tryGetImportFromModuleSpecifier, walkUpParenthesizedExpressions,
 } from "../compiler/utilities";
 import {
     createTextSpanFromBounds, findAncestor, getNameOfDeclaration, hasInitializer, hasType, isAssertionExpression,
@@ -4177,7 +4176,7 @@ function getApparentProperties(type: Type, node: ObjectLiteralExpression | JsxAt
         !(memberType.flags & TypeFlags.Primitive
             || checker.isArrayLikeType(memberType)
             || checker.isTypeInvalidDueToUnionDiscriminant(memberType, node)
-            || typeHasCallOrConstructSignatures(memberType, checker)
+            || checker.typeHasCallOrConstructSignatures(memberType)
             || memberType.isClass() && containsNonPublicProperties(memberType.getApparentProperties()))));
 }
 
diff --git a/src/services/documentRegistry.ts b/src/services/documentRegistry.ts
index 2dc2d26fe3..72fa96d99e 100644
--- a/src/services/documentRegistry.ts
+++ b/src/services/documentRegistry.ts
@@ -1,6 +1,6 @@
 import { sourceFileAffectingCompilerOptions } from "../compiler/commandLineParser";
 import {
-    arrayFrom, createGetCanonicalFileName, firstDefinedIterator, getOrUpdate, identity, isArray, map,
+    arrayFrom, createGetCanonicalFileName, firstDefinedIterator, getOrUpdate, hasProperty, identity, isArray, map,
 } from "../compiler/core";
 import { ESMap, Map } from "../compiler/corePublic";
 import { Debug } from "../compiler/debug";
@@ -14,7 +14,6 @@ import {
 import {
     ensureScriptKind, forEachEntry, getCompilerOptionValue, getEmitScriptTarget, getSetExternalModuleIndicator,
 } from "../compiler/utilities";
-import * as ts from "./_namespaces/ts";
 import { createLanguageServiceSourceFile, updateLanguageServiceSourceFile } from "./services";
 import { IScriptSnapshot } from "./types";
 
@@ -385,7 +384,7 @@ function compilerOptionValueToString(value: unknown): string {
     }
     let str = "{";
     for (const key in value) {
-        if (ts.hasOwnProperty.call(value, key)) { // eslint-disable-line @typescript-eslint/no-unnecessary-qualifier
+        if (hasProperty.call(value, key)) { // eslint-disable-line @typescript-eslint/no-unnecessary-qualifier
             str += `${key}: ${compilerOptionValueToString((value as any)[key])}`;
         }
     }
diff --git a/src/testRunner/_namespaces/FourSlash.ts b/src/testRunner/_namespaces/FourSlash.ts
index b314d7d2e2..b81535c48f 100644
--- a/src/testRunner/_namespaces/FourSlash.ts
+++ b/src/testRunner/_namespaces/FourSlash.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the FourSlash namespace. */
 
 export * from "../../harness/_namespaces/FourSlash";
-export * from "../fourslashRef";
diff --git a/src/testRunner/_namespaces/Playback.ts b/src/testRunner/_namespaces/Playback.ts
index 756f8f0e4e..90e7eae5f1 100644
--- a/src/testRunner/_namespaces/Playback.ts
+++ b/src/testRunner/_namespaces/Playback.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the Playback namespace. */
 
 export * from "../../loggedIO/_namespaces/Playback";
-export * from "../playbackRef";
diff --git a/src/testRunner/_namespaces/Utils.ts b/src/testRunner/_namespaces/Utils.ts
index 69e9f1e29d..f7bd754263 100644
--- a/src/testRunner/_namespaces/Utils.ts
+++ b/src/testRunner/_namespaces/Utils.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the Utils namespace. */
 
 export * from "../../harness/_namespaces/Utils";
-export * from "../utilsRef";
diff --git a/src/testRunner/_namespaces/compiler.ts b/src/testRunner/_namespaces/compiler.ts
index b0836c2749..62e194d597 100644
--- a/src/testRunner/_namespaces/compiler.ts
+++ b/src/testRunner/_namespaces/compiler.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the compiler namespace. */
 
 export * from "../../harness/_namespaces/compiler";
-export * from "../compilerRef";
diff --git a/src/testRunner/_namespaces/documents.ts b/src/testRunner/_namespaces/documents.ts
index ceeb38f29c..bf76b1332f 100644
--- a/src/testRunner/_namespaces/documents.ts
+++ b/src/testRunner/_namespaces/documents.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the documents namespace. */
 
 export * from "../../harness/_namespaces/documents";
-export * from "../documentsRef";
diff --git a/src/testRunner/_namespaces/evaluator.ts b/src/testRunner/_namespaces/evaluator.ts
index 26676e38c3..9710863c9b 100644
--- a/src/testRunner/_namespaces/evaluator.ts
+++ b/src/testRunner/_namespaces/evaluator.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the evaluator namespace. */
 
 export * from "../../harness/_namespaces/evaluator";
-export * from "../evaluatorRef";
diff --git a/src/testRunner/_namespaces/fakes.ts b/src/testRunner/_namespaces/fakes.ts
index f783f8f72b..1b6c51d409 100644
--- a/src/testRunner/_namespaces/fakes.ts
+++ b/src/testRunner/_namespaces/fakes.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the fakes namespace. */
 
 export * from "../../harness/_namespaces/fakes";
-export * from "../fakesRef";
diff --git a/src/testRunner/_namespaces/vfs.ts b/src/testRunner/_namespaces/vfs.ts
index 3a8b4f1e4a..5fe2e7d936 100644
--- a/src/testRunner/_namespaces/vfs.ts
+++ b/src/testRunner/_namespaces/vfs.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the vfs namespace. */
 
 export * from "../../harness/_namespaces/vfs";
-export * from "../vfsRef";
diff --git a/src/testRunner/_namespaces/vpath.ts b/src/testRunner/_namespaces/vpath.ts
index 4b1fd139b3..9ae8ad3777 100644
--- a/src/testRunner/_namespaces/vpath.ts
+++ b/src/testRunner/_namespaces/vpath.ts
@@ -1,4 +1,3 @@
 /* Generated file to emulate the vpath namespace. */
 
 export * from "../../harness/_namespaces/vpath";
-export * from "../vpathRef";
diff --git a/src/testRunner/compilerRef.ts b/src/testRunner/compilerRef.ts
deleted file mode 100644
index c524071b84..0000000000
--- a/src/testRunner/compilerRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to compiler so it can be referenced by unittests
-export { };
diff --git a/src/testRunner/documentsRef.ts b/src/testRunner/documentsRef.ts
deleted file mode 100644
index e1abbfb2d9..0000000000
--- a/src/testRunner/documentsRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to documents so it can be referenced by unittests
-export { };
diff --git a/src/testRunner/evaluatorRef.ts b/src/testRunner/evaluatorRef.ts
deleted file mode 100644
index 965acc02d9..0000000000
--- a/src/testRunner/evaluatorRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to evaluator so it can be referenced by unittests
-export { };
diff --git a/src/testRunner/fakesRef.ts b/src/testRunner/fakesRef.ts
deleted file mode 100644
index ef7d690d5b..0000000000
--- a/src/testRunner/fakesRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to fakes so it can be referenced by unittests
-export { };
diff --git a/src/testRunner/fourslashRef.ts b/src/testRunner/fourslashRef.ts
deleted file mode 100644
index 7436f5ad2d..0000000000
--- a/src/testRunner/fourslashRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to FourSlash so it can be referenced by unittests
-export { };
diff --git a/src/testRunner/playbackRef.ts b/src/testRunner/playbackRef.ts
deleted file mode 100644
index 9a46d5740c..0000000000
--- a/src/testRunner/playbackRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to Playback so it can be referenced by unittests
-export { };
diff --git a/src/testRunner/runner.ts b/src/testRunner/runner.ts
index 7c9c284e86..1a968567b4 100644
--- a/src/testRunner/runner.ts
+++ b/src/testRunner/runner.ts
@@ -4,10 +4,10 @@ import { IO, setLightMode } from "../harness/harnessIO";
 import { RunnerBase, setShardId, setShards, TestRunnerKind } from "../harness/runnerbase";
 import { basename } from "../harness/vpathUtil";
 import * as FourSlash from "./_namespaces/FourSlash";
-import { Host } from "./_namespaces/Harness.Parallel";
 import { CompilerBaselineRunner, CompilerTestType } from "./compilerRunner";
 import { DefinitelyTypedRunner, DockerfileRunner, UserCodeRunner } from "./externalCompileRunner";
 import { FourSlashRunner, GeneratedFourslashRunner } from "./fourslashRunner";
+import * as Host from "./parallel/host";
 import { start } from "./parallel/worker";
 import { ProjectRunner } from "./projectsRunner";
 import { RWCRunner } from "./rwcRunner";
diff --git a/src/testRunner/tsconfig.json b/src/testRunner/tsconfig.json
index c0e652fdbd..d7b9d0ebc2 100644
--- a/src/testRunner/tsconfig.json
+++ b/src/testRunner/tsconfig.json
@@ -27,16 +27,6 @@
     ],
 
     "files": [
-        "compilerRef.ts",
-        "evaluatorRef.ts",
-        "fakesRef.ts",
-        "vpathRef.ts",
-        "vfsRef.ts",
-        "fourslashRef.ts",
-        "playbackRef.ts",
-        "utilsRef.ts",
-        "documentsRef.ts",
-
         "fourslashRunner.ts",
         "compilerRunner.ts",
         "projectsRunner.ts",
diff --git a/src/testRunner/unittests/services/textChanges.ts b/src/testRunner/unittests/services/textChanges.ts
index c6c9dd548e..e7ac83b918 100644
--- a/src/testRunner/unittests/services/textChanges.ts
+++ b/src/testRunner/unittests/services/textChanges.ts
@@ -12,15 +12,17 @@ import {
 import { getNewLineCharacter } from "../../../compiler/utilities";
 import { isDeclaration } from "../../../compiler/utilitiesPublic";
 import { Baseline } from "../../../harness/harnessIO";
-import { textChanges } from "../../../services/_namespaces/ts";
 import { FormatContext } from "../../../services/formatting/formatting";
 import { getFormatContext } from "../../../services/formatting/rulesMap";
-import { applyChanges, ChangeTracker, LeadingTriviaOption, TrailingTriviaOption } from "../../../services/textChanges";
+import {
+    applyChanges, ChangeTracker, deleteNode, LeadingTriviaOption, TrailingTriviaOption,
+} from "../../../services/textChanges";
 import { testFormatSettings } from "../../../services/types";
 import { notImplementedHost } from "./extract/helpers";
 
 // Some tests have trailing whitespace
 
+
 describe("unittests:: services:: textChanges", () => {
     function findChild(name: string, n: Node) {
         return find(n)!;
@@ -145,7 +147,6 @@ function bar() {
     function findVariableDeclarationContaining(name: string, sourceFile: SourceFile): VariableDeclaration {
         return cast(findChild(name, sourceFile), isVariableDeclaration);
     }
-    const { deleteNode } = textChanges;
     {
         const text = `
 var x = 1; // some comment - 1
diff --git a/src/testRunner/unittests/tsbuild/publicApi.ts b/src/testRunner/unittests/tsbuild/publicApi.ts
index 78431d4b2f..f5ded28a72 100644
--- a/src/testRunner/unittests/tsbuild/publicApi.ts
+++ b/src/testRunner/unittests/tsbuild/publicApi.ts
@@ -13,7 +13,7 @@ import { createDiagnosticReporter, getErrorSummaryText } from "../../../compiler
 import { patchHostForBuildInfoReadWrite, System } from "../../../harness/fakesHosts";
 import { formatPatch } from "../../../harness/vfsUtil";
 import { commandLineCallbacks, TscCompileSystem, verifyTscBaseline } from "../tsc/helpers";
-import { baselinePrograms } from "../tscWatch/helpers";
+import { baselineAllPrograms } from "../tscWatch/helpers";
 import { loadProjectFromFiles, toPathWithSystem } from "./helpers";
 
 describe("unittests:: tsbuild:: Public API with custom transformers when passed to build", () => {
@@ -78,7 +78,7 @@ export function f22() { } // trailing`,
         sys.exit(exitStatus);
         sys.write(`exitCode:: ExitStatus.${ExitStatus[sys.exitCode as ExitStatus]}\n`);
         const baseline: string[] = [];
-        baselinePrograms(baseline, getPrograms, emptyArray, /*baselineDependencies*/ false);
+        baselineAllPrograms(baseline, getPrograms, emptyArray, /*baselineDependencies*/ false);
         sys.write(baseline.join("\n"));
         fs.makeReadonly();
         sys.baseLine = () => {
diff --git a/src/testRunner/unittests/tsc/helpers.ts b/src/testRunner/unittests/tsc/helpers.ts
index 54c8dba349..557fbbb12b 100644
--- a/src/testRunner/unittests/tsc/helpers.ts
+++ b/src/testRunner/unittests/tsc/helpers.ts
@@ -12,9 +12,8 @@ import { patchHostForBuildInfoReadWrite, patchHostForBuildInfoWrite, System } fr
 import { Baseline } from "../../../harness/harnessIO";
 import { FileSystem, formatPatch } from "../../../harness/vfsUtil";
 import * as ts from "../../_namespaces/ts";
-import { tscWatch } from "../../_namespaces/ts";
 import { baselineBuildInfo, generateSourceMapBaselineFiles, TestTscEdit, toPathWithSystem } from "../tsbuild/helpers";
-import { WatchedSystem } from "../tscWatch/helpers";
+import { baselineAllPrograms, WatchedSystem } from "../tscWatch/helpers";
 
 export type TscCompileSystem = System & {
     writtenFiles: Set<Path>;
@@ -210,7 +209,7 @@ export function testTscCompile(input: TestTscCompile) {
         const { baselineSourceMap, baselineReadFileCalls, baselinePrograms, baselineDependencies } = input;
         if (baselinePrograms) {
             const baseline: string[] = [];
-            tscWatch.baselinePrograms(baseline, getPrograms!, emptyArray, baselineDependencies);
+            baselineAllPrograms(baseline, getPrograms!, emptyArray, baselineDependencies);
             sys.write(baseline.join("\n"));
         }
         if (baselineReadFileCalls) {
diff --git a/src/testRunner/unittests/tscWatch/helpers.ts b/src/testRunner/unittests/tscWatch/helpers.ts
index bc4d380f02..9f1362fd52 100644
--- a/src/testRunner/unittests/tscWatch/helpers.ts
+++ b/src/testRunner/unittests/tscWatch/helpers.ts
@@ -335,7 +335,7 @@ export interface WatchBaseline extends BaselineBase, TscWatchCheckOptions {
 export function watchBaseline({ baseline, getPrograms, oldPrograms, sys, oldSnap, baselineSourceMap, baselineDependencies }: WatchBaseline) {
     if (baselineSourceMap) generateSourceMapBaselineFiles(sys);
     sys.serializeOutput(baseline);
-    const programs = baselinePrograms(baseline, getPrograms, oldPrograms, baselineDependencies);
+    const programs = baselineAllPrograms(baseline, getPrograms, oldPrograms, baselineDependencies);
     sys.serializeWatches(baseline);
     baseline.push(`exitCode:: ExitStatus.${ExitStatus[sys.exitCode as ExitStatus]}`, "");
     sys.diff(baseline, oldSnap);
@@ -346,7 +346,7 @@ export function watchBaseline({ baseline, getPrograms, oldPrograms, sys, oldSnap
     return programs;
 }
 
-export function baselinePrograms(baseline: string[], getPrograms: () => readonly CommandLineProgram[], oldPrograms: readonly (CommandLineProgram | undefined)[], baselineDependencies: boolean | undefined) {
+export function baselineAllPrograms(baseline: string[], getPrograms: () => readonly CommandLineProgram[], oldPrograms: readonly (CommandLineProgram | undefined)[], baselineDependencies: boolean | undefined) {
     const programs = getPrograms();
     for (let i = 0; i < programs.length; i++) {
         baselineProgram(baseline, programs[i], oldPrograms[i], baselineDependencies);
diff --git a/src/testRunner/unittests/tsserver/cancellationToken.ts b/src/testRunner/unittests/tsserver/cancellationToken.ts
index 996c511510..3f746f8468 100644
--- a/src/testRunner/unittests/tsserver/cancellationToken.ts
+++ b/src/testRunner/unittests/tsserver/cancellationToken.ts
@@ -1,7 +1,7 @@
 import { AnyFunction, noop } from "../../../compiler/core";
 import { OperationCanceledException } from "../../../compiler/types";
 import { extractMessage } from "../../../harness/client";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { ServerCancellationToken } from "../../../server/session";
 import { projectSystem } from "../../_namespaces/ts";
 import { createServerHost, createSession, TestServerCancellationToken } from "./helpers";
diff --git a/src/testRunner/unittests/tsserver/compileOnSave.ts b/src/testRunner/unittests/tsserver/compileOnSave.ts
index 05863a3172..a373c8de14 100644
--- a/src/testRunner/unittests/tsserver/compileOnSave.ts
+++ b/src/testRunner/unittests/tsserver/compileOnSave.ts
@@ -2,7 +2,7 @@ import { arrayIsEqualTo, compareStringsCaseSensitive, emptyArray, map, stringCon
 import { Diagnostics } from "../../../compiler/diagnosticInformationMap.generated";
 import { CompilerOptions, diagnosticCategoryName, Extension } from "../../../compiler/types";
 import { changeExtension, formatStringFromArgs } from "../../../compiler/utilities";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { CommandNames, Session } from "../../../server/session";
 import { ServerHost } from "../../../server/types";
 import { projectSystem } from "../../_namespaces/ts";
diff --git a/src/testRunner/unittests/tsserver/helpers.ts b/src/testRunner/unittests/tsserver/helpers.ts
index 628b199e9a..9158b3d51e 100644
--- a/src/testRunner/unittests/tsserver/helpers.ts
+++ b/src/testRunner/unittests/tsserver/helpers.ts
@@ -19,12 +19,12 @@ import {
     createServerHost, libFile, safeList, TestServerHost,
 } from "../../../harness/virtualFileSystemWithWatch";
 import { InvalidateCachedTypings, SetTypings } from "../../../jsTyping/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import {
     FileStats, OpenFileInfo, OpenFileInfoTelemetryEvent, OpenFileInfoTelemetryEventData, ProjectInfoTelemetryEvent,
     ProjectInfoTelemetryEventData, ProjectService, ProjectServiceEvent, ProjectServiceOptions,
 } from "../../../server/editorServices";
 import { Project, ProjectKind } from "../../../server/project";
+import * as protocol from "../../../server/protocol";
 import {
     CommandNames, nullCancellationToken, ServerCancellationToken, Session, SessionOptions, toEvent,
 } from "../../../server/session";
diff --git a/src/testRunner/unittests/tsserver/inferredProjects.ts b/src/testRunner/unittests/tsserver/inferredProjects.ts
index dae82b9460..fe5c20e6ec 100644
--- a/src/testRunner/unittests/tsserver/inferredProjects.ts
+++ b/src/testRunner/unittests/tsserver/inferredProjects.ts
@@ -1,8 +1,8 @@
 import { Map } from "../../../compiler/corePublic";
 import { combinePaths } from "../../../compiler/path";
 import { ModuleResolutionKind, ScriptKind, ScriptTarget } from "../../../compiler/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import { InferredProject } from "../../../server/project";
+import * as protocol from "../../../server/protocol";
 import { projectRoot } from "../tscWatch/helpers";
 import {
     checkArray, checkNumberOfConfiguredProjects, checkNumberOfInferredProjects, checkNumberOfProjects,
diff --git a/src/testRunner/unittests/tsserver/projectErrors.ts b/src/testRunner/unittests/tsserver/projectErrors.ts
index 8d07f64aae..f9ed0d0b4a 100644
--- a/src/testRunner/unittests/tsserver/projectErrors.ts
+++ b/src/testRunner/unittests/tsserver/projectErrors.ts
@@ -3,8 +3,8 @@ import { Diagnostics } from "../../../compiler/diagnosticInformationMap.generate
 import { getBaseFileName } from "../../../compiler/path";
 import { flattenDiagnosticMessageText } from "../../../compiler/program";
 import { Diagnostic, ModuleKind } from "../../../compiler/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import { ProjectFilesWithTSDiagnostics } from "../../../server/project";
+import * as protocol from "../../../server/protocol";
 import { CommandNames } from "../../../server/session";
 import { projectSystem } from "../../_namespaces/ts";
 import { projectRoot } from "../tscWatch/helpers";
diff --git a/src/testRunner/unittests/tsserver/projects.ts b/src/testRunner/unittests/tsserver/projects.ts
index c0728a7189..8d995e73e7 100644
--- a/src/testRunner/unittests/tsserver/projects.ts
+++ b/src/testRunner/unittests/tsserver/projects.ts
@@ -5,7 +5,7 @@ import { Debug } from "../../../compiler/debug";
 import { combinePaths, getDirectoryPath, normalizePath } from "../../../compiler/path";
 import { Path, ScriptKind, ScriptTarget } from "../../../compiler/types";
 import { createTextSpan } from "../../../compiler/utilitiesPublic";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { CommandNames } from "../../../server/session";
 import { ITypingsInstaller } from "../../../server/typingsCache";
 import {
diff --git a/src/testRunner/unittests/tsserver/refactors.ts b/src/testRunner/unittests/tsserver/refactors.ts
index 12d8b4f95d..1ab816eeeb 100644
--- a/src/testRunner/unittests/tsserver/refactors.ts
+++ b/src/testRunner/unittests/tsserver/refactors.ts
@@ -1,4 +1,4 @@
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { projectSystem } from "../../_namespaces/ts";
 import { createServerHost, createSession, executeSessionRequest, File, openFilesForSession } from "./helpers";
 
diff --git a/src/testRunner/unittests/tsserver/reload.ts b/src/testRunner/unittests/tsserver/reload.ts
index 64a468cda7..e1d988ff9b 100644
--- a/src/testRunner/unittests/tsserver/reload.ts
+++ b/src/testRunner/unittests/tsserver/reload.ts
@@ -1,4 +1,4 @@
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { getSnapshotText } from "../../../services/utilities";
 import { checkNumberOfProjects, createServerHost, createSession, libFile } from "./helpers";
 
diff --git a/src/testRunner/unittests/tsserver/resolutionCache.ts b/src/testRunner/unittests/tsserver/resolutionCache.ts
index 6161da3c7a..dcd8c9fc96 100644
--- a/src/testRunner/unittests/tsserver/resolutionCache.ts
+++ b/src/testRunner/unittests/tsserver/resolutionCache.ts
@@ -4,7 +4,7 @@ import { Debug } from "../../../compiler/debug";
 import { combinePaths, forEachAncestorDirectory, getDirectoryPath, normalizePath } from "../../../compiler/path";
 import { ModuleResolutionHost, ScriptKind } from "../../../compiler/types";
 import { removeFileExtension } from "../../../compiler/utilities";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { CommandNames } from "../../../server/session";
 import { projectSystem } from "../../_namespaces/ts";
 import { projectRoot } from "../tscWatch/helpers";
diff --git a/src/testRunner/unittests/tsserver/session.ts b/src/testRunner/unittests/tsserver/session.ts
index e0b47d1746..391826207c 100644
--- a/src/testRunner/unittests/tsserver/session.ts
+++ b/src/testRunner/unittests/tsserver/session.ts
@@ -9,8 +9,8 @@ import {
 } from "../../../compiler/types";
 import { mockHash } from "../../../harness/harnessIO";
 import { byteLength } from "../../../harness/harnessUtils";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import { ProjectService } from "../../../server/editorServices";
+import * as protocol from "../../../server/protocol";
 import {
     CommandNames, getLocationInNewDocument, HandlerResponse, nullCancellationToken, Session, SessionOptions,
 } from "../../../server/session";
diff --git a/src/testRunner/unittests/tsserver/syntacticServer.ts b/src/testRunner/unittests/tsserver/syntacticServer.ts
index f09e3b5f37..085e58b6f6 100644
--- a/src/testRunner/unittests/tsserver/syntacticServer.ts
+++ b/src/testRunner/unittests/tsserver/syntacticServer.ts
@@ -1,5 +1,5 @@
 import { emptyArray } from "../../../compiler/core";
-import { protocol } from "../../../server/_namespaces/ts.server";
+import * as protocol from "../../../server/protocol";
 import { projectSystem } from "../../_namespaces/ts";
 import { projectRoot } from "../tscWatch/helpers";
 import {
diff --git a/src/testRunner/unittests/tsserver/telemetry.ts b/src/testRunner/unittests/tsserver/telemetry.ts
index 2adb39d201..6438df4d1f 100644
--- a/src/testRunner/unittests/tsserver/telemetry.ts
+++ b/src/testRunner/unittests/tsserver/telemetry.ts
@@ -1,9 +1,9 @@
 import { isString } from "../../../compiler/core";
 import { CompilerOptions } from "../../../compiler/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import {
     maxProgramSizeForNonTsFiles, ProjectInfoTelemetryEvent, ProjectLanguageServiceStateEvent,
 } from "../../../server/editorServices";
+import * as protocol from "../../../server/protocol";
 import { checkNumberOfProjects, File, fileStats, TestServerEventManager, toExternalFiles } from "./helpers";
 
 describe("unittests:: tsserver:: project telemetry", () => {
diff --git a/src/testRunner/unittests/tsserver/typingsInstaller.ts b/src/testRunner/unittests/tsserver/typingsInstaller.ts
index c8fa197b31..0cc0a280c4 100644
--- a/src/testRunner/unittests/tsserver/typingsInstaller.ts
+++ b/src/testRunner/unittests/tsserver/typingsInstaller.ts
@@ -11,9 +11,9 @@ import {
 } from "../../../jsTyping/jsTyping";
 import { EventBeginInstallTypes, EventEndInstallTypes } from "../../../jsTyping/shared";
 import { BeginInstallTypes, EndInstallTypes, InvalidateCachedTypings, SetTypings } from "../../../jsTyping/types";
-import { protocol } from "../../../server/_namespaces/ts.server";
 import { updateProjectIfDirty } from "../../../server/editorServices";
 import { Project } from "../../../server/project";
+import * as protocol from "../../../server/protocol";
 import { ServerHost } from "../../../server/types";
 import {
     getNpmCommandForInstallation, installNpmPackages, Log, RequestCompletedAction, typingsName,
diff --git a/src/testRunner/utilsRef.ts b/src/testRunner/utilsRef.ts
deleted file mode 100644
index 02df007be1..0000000000
--- a/src/testRunner/utilsRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to Utils so it can be referenced by unittests
-export { };
diff --git a/src/testRunner/vfsRef.ts b/src/testRunner/vfsRef.ts
deleted file mode 100644
index 7a9130a0d9..0000000000
--- a/src/testRunner/vfsRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to vfs so it can be referenced by unittests
-export { };
diff --git a/src/testRunner/vpathRef.ts b/src/testRunner/vpathRef.ts
deleted file mode 100644
index 13cb846ee5..0000000000
--- a/src/testRunner/vpathRef.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-// empty ref to vpath so it can be referenced by unittests
-export { };
diff --git a/src/tsserver/nodeServer.ts b/src/tsserver/nodeServer.ts
index a0ee7a3a09..0d249c11a8 100644
--- a/src/tsserver/nodeServer.ts
+++ b/src/tsserver/nodeServer.ts
@@ -18,9 +18,9 @@ import {
     BeginInstallTypes, EndInstallTypes, InitializationFailedResponse, InstallPackageRequest, InvalidateCachedTypings,
     PackageInstalledResponse, SetTypings, TypesRegistryResponse, TypingInstallerRequestUnion,
 } from "../jsTyping/types";
-import { protocol } from "../server/_namespaces/ts.server";
 import { ProjectService } from "../server/editorServices";
 import { Project } from "../server/project";
+import * as protocol from "../server/protocol";
 import {
     Event, formatMessage, nullCancellationToken, ServerCancellationToken, Session, toEvent,
 } from "../server/session";
diff --git a/src/tsserver/webServer.ts b/src/tsserver/webServer.ts
index 4aa2a072f1..d5cd5aeea6 100644
--- a/src/tsserver/webServer.ts
+++ b/src/tsserver/webServer.ts
@@ -1,6 +1,6 @@
-import { performance } from "../compiler/_namespaces/ts";
 import { noop, returnFalse, returnUndefined } from "../compiler/core";
 import { Debug } from "../compiler/debug";
+import * as performance from "../compiler/performance";
 import { setSys, sys } from "../compiler/sys";
 import { validateLocaleAndSetLanguage } from "../compiler/utilitiesPublic";
 import { findArgument } from "../jsTyping/shared";
diff --git a/src/webServer/webServer.ts b/src/webServer/webServer.ts
index a248c8253c..5a6b7d6f2c 100644
--- a/src/webServer/webServer.ts
+++ b/src/webServer/webServer.ts
@@ -4,7 +4,7 @@ import { directorySeparator, ensureTrailingDirectorySeparator, getDirectoryPath
 import { perfLogger } from "../compiler/perfLogger";
 import { returnNoopFileWatcher } from "../compiler/watch";
 import { nowString } from "../jsTyping/shared";
-import { protocol } from "../server/_namespaces/ts.server";
+import * as protocol from "../server/protocol";
 import { ServerCancellationToken, Session, SessionOptions } from "../server/session";
 import { ServerHost } from "../server/types";
 import { nullTypingsInstaller } from "../server/typingsCache";
-- 
2.36.1

