From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Thu, 13 Oct 2022 11:43:05 -0700
Subject: [PATCH] Remove all uses of __dirname

---
 src/compiler/sys.ts                          | 2 +-
 src/services/services.ts                     | 8 ++------
 src/tsserver/nodeServer.ts                   | 8 +++++---
 src/typingsInstaller/nodeTypingsInstaller.ts | 7 ++++---
 4 files changed, 12 insertions(+), 13 deletions(-)

diff --git a/src/compiler/sys.ts b/src/compiler/sys.ts
index 1003a5b941..84c75c9c39 100644
--- a/src/compiler/sys.ts
+++ b/src/compiler/sys.ts
@@ -1645,7 +1645,7 @@ export let sys: System = (() => {
         function cleanupPaths(profile: import("inspector").Profiler.Profile) {
             let externalFileCounter = 0;
             const remappedPaths = new Map<string, string>();
-            const normalizedDir = normalizeSlashes(__dirname);
+            const normalizedDir = normalizeSlashes(_path.dirname(executingFilePath));
             // Windows rooted dir names need an extra `/` prepended to be valid file:/// urls
             const fileUrlRoot = `file://${getRootLength(normalizedDir) === 1 ? "" : "/"}${normalizedDir}`;
             for (const node of profile.nodes) {
diff --git a/src/services/services.ts b/src/services/services.ts
index b92a98a05a..c2dc0e983e 100644
--- a/src/services/services.ts
+++ b/src/services/services.ts
@@ -2922,18 +2922,14 @@ function isArgumentOfElementAccessExpression(node: Node) {
         (node.parent as ElementAccessExpression).argumentExpression === node;
 }
 
-/// getDefaultLibraryFilePath
-declare const __dirname: string;
-
 /**
  * Get the path of the default library files (lib.d.ts) as distributed with the typescript
  * node package.
  * The functionality is not supported if the ts module is consumed outside of a node module.
  */
 export function getDefaultLibFilePath(options: CompilerOptions): string {
-    // Check __dirname is defined and that we are on a node.js system.
-    if (typeof __dirname !== "undefined") {
-        return combinePaths(__dirname, getDefaultLibFileName(options));
+    if (ts.sys) {
+        return combinePaths(getDirectoryPath(normalizePath(ts.sys.getExecutingFilePath())), getDefaultLibFileName(options));
     }
 
     throw new Error("getDefaultLibFilePath is only supported when consumed as a node module. ");
diff --git a/src/tsserver/nodeServer.ts b/src/tsserver/nodeServer.ts
index fcd871ce43..4292b8cc02 100644
--- a/src/tsserver/nodeServer.ts
+++ b/src/tsserver/nodeServer.ts
@@ -13,7 +13,7 @@ import {
 import {
     ApplyCodeActionCommandResult, assertType, CharacterCodes, combinePaths, createQueue, Debug, directorySeparator,
     DirectoryWatcherCallback, ESMap, FileWatcher, getDirectoryPath, getEntries, getNodeMajorVersion, getRootLength,
-    JsTyping, LanguageServiceMode, Map, MapLike, noop, noopFileWatcher, normalizeSlashes, resolveJSModule,
+    JsTyping, LanguageServiceMode, Map, MapLike, noop, noopFileWatcher, normalizePath, normalizeSlashes, resolveJSModule,
     SortedReadonlyArray, startTracing, stripQuotes, sys, toFileNameLowerCase, tracing, TypeAcquisition,
     validateLocaleAndSetLanguage, versionMajorMinor, WatchOptions,
 } from "./_namespaces/ts";
@@ -193,6 +193,8 @@ export function initializeNodeSystem(): StartInput {
         }
     }
 
+    const libDirectory = getDirectoryPath(normalizePath(sys.getExecutingFilePath()));
+
     const nodeVersion = getNodeMajorVersion();
     // use watchGuard process on Windows when node version is 4 or later
     const useWatchGuard = process.platform === "win32" && nodeVersion! >= 4;
@@ -227,7 +229,7 @@ export function initializeNodeSystem(): StartInput {
                     logger.info(`${cacheKey} for path ${path} not found in cache...`);
                 }
                 try {
-                    const args = [combinePaths(__dirname, "watchGuard.js"), path];
+                    const args = [combinePaths(libDirectory, "watchGuard.js"), path];
                     if (logger.hasLevel(LogLevel.verbose)) {
                         logger.info(`Starting ${process.execPath} with args:${stringifyIndented(args)}`);
                     }
@@ -326,7 +328,7 @@ export function initializeNodeSystem(): StartInput {
         const unsubstitutedLogFileName = cmdLineLogFileName
             ? stripQuotes(cmdLineLogFileName)
             : envLogOptions.logToFile
-                ? envLogOptions.file || (__dirname + "/.log" + process.pid.toString())
+                ? envLogOptions.file || (libDirectory + "/.log" + process.pid.toString())
                 : undefined;
 
         const substitutedLogFileName = unsubstitutedLogFileName
diff --git a/src/typingsInstaller/nodeTypingsInstaller.ts b/src/typingsInstaller/nodeTypingsInstaller.ts
index f043e44a18..c1dd5d67b4 100644
--- a/src/typingsInstaller/nodeTypingsInstaller.ts
+++ b/src/typingsInstaller/nodeTypingsInstaller.ts
@@ -11,7 +11,7 @@ import {
 } from "./_namespaces/ts.server";
 import {
     combinePaths, createGetCanonicalFileName, Debug, ESMap, forEachAncestorDirectory, getDirectoryPath, getEntries, Map,
-    MapLike, normalizeSlashes, stringContains, sys, toPath, version,
+    MapLike, normalizePath, normalizeSlashes, stringContains, sys, toPath, version,
 } from "./_namespaces/ts";
 
 class FileLog implements Log {
@@ -89,11 +89,12 @@ export class NodeTypingsInstaller extends TypingsInstaller {
     private delayedInitializationError: InitializationFailedResponse | undefined;
 
     constructor(globalTypingsCacheLocation: string, typingSafeListLocation: string, typesMapLocation: string, npmLocation: string | undefined, validateDefaultNpmLocation: boolean, throttleLimit: number, log: Log) {
+        const libDirectory = getDirectoryPath(normalizePath(sys.getExecutingFilePath()));
         super(
             sys,
             globalTypingsCacheLocation,
-            typingSafeListLocation ? toPath(typingSafeListLocation, "", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath("typingSafeList.json", __dirname, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),
-            typesMapLocation ? toPath(typesMapLocation, "", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath("typesMap.json", __dirname, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),
+            typingSafeListLocation ? toPath(typingSafeListLocation, "", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath("typingSafeList.json", libDirectory, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),
+            typesMapLocation ? toPath(typesMapLocation, "", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath("typesMap.json", libDirectory, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),
             throttleLimit,
             log);
         this.npmPath = npmLocation !== undefined ? npmLocation : getDefaultNPMLocation(process.argv[0], validateDefaultNpmLocation, this.installTypingHost);
-- 
2.38.0

