From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Fri, 2 Sep 2022 15:53:02 -0700
Subject: [PATCH] Get entrypoints working

---
 Gulpfile.js                                  | 14 ++++++-------
 src/tsc/_namespaces/ts.ts                    |  1 -
 src/tsconfig.json                            |  5 ++++-
 src/tsserver/nodeServer.ts                   |  3 ++-
 src/tsserverlibrary/_namespaces/ts.server.ts |  1 -
 src/tsserverlibrary/tsserverlibrary.ts       |  6 +++++-
 src/typescript/_namespaces/ts.ts             |  6 ++++++
 src/typescript/tsconfig.json                 | 16 +++++++++++++++
 src/typescript/typescript.ts                 | 21 ++++++++++++++++++++
 src/typescriptServices/typescriptServices.ts |  2 ++
 10 files changed, 63 insertions(+), 12 deletions(-)
 create mode 100644 src/typescript/_namespaces/ts.ts
 create mode 100644 src/typescript/tsconfig.json
 create mode 100644 src/typescript/typescript.ts

diff --git a/Gulpfile.js b/Gulpfile.js
index 674ada1dfa..52dec7101a 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -166,12 +166,12 @@ const buildServices = (() => {
         .pipe(rename("typescript.d.ts"))
         .pipe(dest("built/local"));
 
-    // create typescript_standalone.d.ts
-    const createTypescriptStandaloneDts = () => src("built/local/typescriptServices.d.ts")
-        .pipe(newer("built/local/typescript_standalone.d.ts"))
-        .pipe(transform(content => content.replace(/declare (namespace|module) ts/g, 'declare module "typescript"')))
-        .pipe(rename("typescript_standalone.d.ts"))
-        .pipe(dest("built/local"));
+    // // create typescript_standalone.d.ts
+    // const createTypescriptStandaloneDts = () => src("built/local/typescriptServices.d.ts")
+    //     .pipe(newer("built/local/typescript_standalone.d.ts"))
+    //     .pipe(transform(content => content.replace(/declare (namespace|module) ts/g, 'declare module "typescript"')))
+    //     .pipe(rename("typescript_standalone.d.ts"))
+    //     .pipe(dest("built/local"));
 
     return series(
         buildTypescriptServicesOut,
@@ -179,7 +179,7 @@ const buildServices = (() => {
         createTypescriptServicesDts,
         createTypescriptJs,
         createTypescriptDts,
-        createTypescriptStandaloneDts,
+        // createTypescriptStandaloneDts,
     );
 })();
 task("services", series(preBuild, buildServices));
diff --git a/src/tsc/_namespaces/ts.ts b/src/tsc/_namespaces/ts.ts
index 8579e4a93b..8e361ae718 100644
--- a/src/tsc/_namespaces/ts.ts
+++ b/src/tsc/_namespaces/ts.ts
@@ -2,4 +2,3 @@
 
 export * from "../../compiler/_namespaces/ts";
 export * from "../../executeCommandLine/_namespaces/ts";
-export * from "../tsc";
diff --git a/src/tsconfig.json b/src/tsconfig.json
index a8ae1655e8..f53ccfb4d8 100644
--- a/src/tsconfig.json
+++ b/src/tsconfig.json
@@ -4,11 +4,14 @@
     "references": [
         { "path": "./tsc" },
         { "path": "./tsserver" },
+        { "path": "./tsserverlibrary" },
+        { "path": "./typescript" },
+        { "path": "./typescriptServices" },
         { "path": "./typingsInstaller" },
         { "path": "./watchGuard" },
         { "path": "./debug" },
         { "path": "./cancellationToken" },
         { "path": "./dynamicImportCompat" },
-        { "path": "./testRunner" }
+        { "path": "./testRunner" },
     ]
 }
diff --git a/src/tsserver/nodeServer.ts b/src/tsserver/nodeServer.ts
index 2f642f1293..7a93b0f594 100644
--- a/src/tsserver/nodeServer.ts
+++ b/src/tsserver/nodeServer.ts
@@ -539,7 +539,8 @@ function startNodeSession(options: StartSessionOptions, logger: Logger, cancella
                 }
             }
 
-            this.installer = childProcess.fork(combinePaths(__dirname, "typingsInstaller.js"), args, { execArgv });
+            // TODO(jakebailey): fix this for module transform
+            this.installer = childProcess.fork(combinePaths(__dirname, "..", "typingsInstaller", "nodeTypingsInstaller.js"), args, { execArgv });
             this.installer.on("message", m => this.handleMessage(m));
 
             // We have to schedule this event to the next tick
diff --git a/src/tsserverlibrary/_namespaces/ts.server.ts b/src/tsserverlibrary/_namespaces/ts.server.ts
index fb916b71f4..21b0d0335f 100644
--- a/src/tsserverlibrary/_namespaces/ts.server.ts
+++ b/src/tsserverlibrary/_namespaces/ts.server.ts
@@ -2,4 +2,3 @@
 
 export * from "../../jsTyping/_namespaces/ts.server";
 export * from "../../server/_namespaces/ts.server";
-export * from "../tsserverlibrary";
diff --git a/src/tsserverlibrary/tsserverlibrary.ts b/src/tsserverlibrary/tsserverlibrary.ts
index 8aa07479d7..bd73794b37 100644
--- a/src/tsserverlibrary/tsserverlibrary.ts
+++ b/src/tsserverlibrary/tsserverlibrary.ts
@@ -1 +1,5 @@
-export { };
+import * as ts from "./_namespaces/ts";
+
+// TODO(jakebailey): replace const enum with enum in d.ts
+
+export = ts;
diff --git a/src/typescript/_namespaces/ts.ts b/src/typescript/_namespaces/ts.ts
new file mode 100644
index 0000000000..e55b264380
--- /dev/null
+++ b/src/typescript/_namespaces/ts.ts
@@ -0,0 +1,6 @@
+/* Generated file to emulate the ts namespace. */
+
+export * from "../../compiler/_namespaces/ts";
+export * from "../../jsTyping/_namespaces/ts";
+export * from "../../services/_namespaces/ts";
+export * from "../../deprecatedCompat/_namespaces/ts";
diff --git a/src/typescript/tsconfig.json b/src/typescript/tsconfig.json
new file mode 100644
index 0000000000..13da0a77b5
--- /dev/null
+++ b/src/typescript/tsconfig.json
@@ -0,0 +1,16 @@
+{
+    "extends": "../tsconfig-library-base",
+    "compilerOptions": {
+        "outDir": "../../built/local"
+    },
+    "files": [
+        "typescript.ts",
+        "_namespaces/ts.ts"
+    ],
+    "references": [
+        { "path": "../compiler" },
+        { "path": "../jsTyping" },
+        { "path": "../services" },
+        { "path": "../deprecatedCompat" }
+    ]
+}
diff --git a/src/typescript/typescript.ts b/src/typescript/typescript.ts
new file mode 100644
index 0000000000..c9862f6a73
--- /dev/null
+++ b/src/typescript/typescript.ts
@@ -0,0 +1,21 @@
+import * as ts from "./_namespaces/ts";
+import { Debug, LogLevel } from "./_namespaces/ts";
+
+// TODO(jakebailey): replace const enum with enum in d.ts
+
+// enable deprecation logging
+declare const console: any;
+if (typeof console !== "undefined") {
+    Debug.loggingHost = {
+        log(level, s) {
+            switch (level) {
+                case LogLevel.Error: return console.error(s);
+                case LogLevel.Warning: return console.warn(s);
+                case LogLevel.Info: return console.log(s);
+                case LogLevel.Verbose: return console.log(s);
+            }
+        }
+    };
+}
+
+export = ts;
diff --git a/src/typescriptServices/typescriptServices.ts b/src/typescriptServices/typescriptServices.ts
index 4eefe91f9e..1dacdf046e 100644
--- a/src/typescriptServices/typescriptServices.ts
+++ b/src/typescriptServices/typescriptServices.ts
@@ -1,5 +1,7 @@
 import { Debug, LogLevel } from "./_namespaces/ts";
 
+// TODO(jakebailey): replace const enum with enum in d.ts
+
 // enable deprecation logging
 declare const console: any;
 if (typeof console !== "undefined") {
-- 
2.37.1

