From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Tue, 13 Sep 2022 16:21:03 -0700
Subject: [PATCH] Add build via esbuild

This configures the existing build tasks to use esbuild by defualt. If
using the plain files is desired, passing `--bundle=false` will build
using plain files and still produce a runnable system.
---
 Gulpfile.mjs                                  | 422 +++++++------
 package-lock.json                             | 574 ++++++++++++++++++
 package.json                                  |   1 +
 scripts/build/localization.mjs                |   1 +
 scripts/build/options.mjs                     |   5 +-
 scripts/build/prepend.mjs                     |  61 --
 scripts/build/projects.mjs                    |  56 +-
 scripts/build/tests.mjs                       |  22 +-
 scripts/produceLKG.mjs                        |  32 +-
 src/cancellationToken/tsconfig.json           |   4 +-
 src/compiler/debug.ts                         |   2 +-
 src/compiler/sys.ts                           |  23 +-
 src/debug/_namespaces/Debug.ts                |   3 -
 src/debug/{dbg.ts => compilerDebug.ts}        |  10 -
 src/debug/tsconfig.json                       |   7 +-
 .../_namespaces/ts.server.ts                  |   3 -
 src/dynamicImportCompat/_namespaces/ts.ts     |   4 -
 .../dynamicImportCompat.ts                    |   1 -
 src/dynamicImportCompat/tsconfig.json         |  15 -
 src/harness/fourslashImpl.ts                  |   6 +-
 src/server/scriptVersionCache.ts              |   8 +-
 src/services/_namespaces/ts.ts                |   1 +
 src/services/exportAsModule.ts                |   9 -
 src/services/services.ts                      |  12 +-
 src/services/tsconfig.json                    |   1 -
 src/testRunner/_namespaces/Harness.ts         |   6 +
 src/testRunner/runner.ts                      |   9 +-
 src/tsconfig-base.json                        |   1 +
 src/tsconfig.json                             |   1 -
 src/tsserver/nodeServer.ts                    |  12 +-
 src/typingsInstaller/nodeTypingsInstaller.ts  |   7 +-
 src/watchGuard/tsconfig.json                  |   4 +-
 src/webServer/webServer.ts                    |  27 +-
 33 files changed, 939 insertions(+), 411 deletions(-)
 create mode 100644 scripts/build/localization.mjs
 delete mode 100644 scripts/build/prepend.mjs
 delete mode 100644 src/debug/_namespaces/Debug.ts
 rename src/debug/{dbg.ts => compilerDebug.ts} (95%)
 delete mode 100644 src/dynamicImportCompat/_namespaces/ts.server.ts
 delete mode 100644 src/dynamicImportCompat/_namespaces/ts.ts
 delete mode 100644 src/dynamicImportCompat/dynamicImportCompat.ts
 delete mode 100644 src/dynamicImportCompat/tsconfig.json
 delete mode 100644 src/services/exportAsModule.ts

diff --git a/Gulpfile.mjs b/Gulpfile.mjs
index ebe73a094a..0f02be239f 100644
--- a/Gulpfile.mjs
+++ b/Gulpfile.mjs
@@ -3,25 +3,53 @@ import path from "path";
 import fs from "fs";
 import log from "fancy-log";
 import newer from "gulp-newer";
-import sourcemaps from "gulp-sourcemaps";
 import del from "del";
 import rename from "gulp-rename";
 import concat from "gulp-concat";
 import merge2 from "merge2";
 import gulp from "gulp";
-import { append, transform } from "gulp-insert";
-import { prependFile } from "./scripts/build/prepend.mjs";
+import { transform } from "gulp-insert";
 import { exec, readJson, needsUpdate, getDiffTool, getDirSize, rm } from "./scripts/build/utils.mjs";
 import { runConsoleTests, refBaseline, localBaseline, refRwcBaseline, localRwcBaseline } from "./scripts/build/tests.mjs";
-import { buildProject, cleanProject, watchProject } from "./scripts/build/projects.mjs";
+import { buildProject as realBuildProject, cleanProject, watchProject } from "./scripts/build/projects.mjs";
+import { localizationDirectories } from "./scripts/build/localization.mjs";
 import cmdLineOptions from "./scripts/build/options.mjs";
+import esbuild from "esbuild";
 
 const { src, dest, task, parallel, series, watch } = gulp;
 
 const copyright = "CopyrightNotice.txt";
 const cleanTasks = [];
 
-const testRunner = "./built/local/testRunner/runner.js";
+
+// TODO(jakebailey): This is really gross. Waiting on https://github.com/microsoft/TypeScript/issues/25613,
+// or at least control over noEmit / emitDeclarationOnly in build mode.
+let currentlyBuilding = 0;
+let oldTsconfigBase;
+
+/** @type {typeof realBuildProject} */
+const buildProjectWithEmit = async (...args) => {
+    const tsconfigBasePath = "./src/tsconfig-base.json";
+
+    if (currentlyBuilding === 0) {
+        oldTsconfigBase = fs.readFileSync(tsconfigBasePath, "utf-8");
+        fs.writeFileSync(tsconfigBasePath, oldTsconfigBase.replace(`"emitDeclarationOnly": true`, `"emitDeclarationOnly": false`));
+    }
+
+    currentlyBuilding++;
+
+    await realBuildProject(...args);
+
+    currentlyBuilding--;
+
+    if (currentlyBuilding === 0) {
+        fs.writeFileSync(tsconfigBasePath, oldTsconfigBase);
+    }
+};
+
+
+const buildProject = cmdLineOptions.bundle ? realBuildProject : buildProjectWithEmit;
+
 
 const buildScripts = () => buildProject("scripts");
 task("scripts", buildScripts);
@@ -82,8 +110,7 @@ const generatedLCGFile = "built/local/enu/diagnosticMessages.generated.json.lcg"
  *    2. 'src\compiler\diagnosticMessages.generated.json' => 'built\local\ENU\diagnosticMessages.generated.json.lcg'
  *       generate the lcg file (source of messages to localize) from the diagnosticMessages.generated.json
  */
-const localizationTargets = ["cs", "de", "es", "fr", "it", "ja", "ko", "pl", "pt-br", "ru", "tr", "zh-cn", "zh-tw"]
-    .map(f => f.toLowerCase())
+const localizationTargets = localizationDirectories
     .map(f => `built/local/${f}/diagnosticMessages.generated.json`)
     .concat(generatedLCGFile);
 
@@ -98,26 +125,137 @@ const buildSrc = () => buildProject("src");
 
 task("build-src", series(preSrc, buildSrc));
 
-const cleanSrc = () => cleanProject("src");
-task("clean-src", series(preSrc, cleanSrc));
+/** @type {string | undefined} */
+let copyrightHeader;
+function getCopyrightHeader() {
+    if (copyrightHeader === undefined) {
+        copyrightHeader = fs.readFileSync(copyright, "utf-8");
+    }
+    return copyrightHeader;
+}
+
+/**
+ * @param {string} entrypoint
+ * @param {string} outfile
+ * @param {boolean} exportIsTsObject True if this file exports the TS object and should have relevant code injected.
+ */
+function esbuildTask(entrypoint, outfile, exportIsTsObject = false) {
+    // Note: we do not use --minify, as that would hide function names from user backtraces
+    // (we don't ship our sourcemaps), and would break consumers like monaco which modify
+    // typescript.js for their own needs. Also, using --sourcesContent=false doesn't help,
+    // as even though it's a smaller source map that could be shipped to users for better
+    // stack traces via names, the maps are bigger than the actual source files themselves.
+    /** @type {esbuild.BuildOptions} */
+    const options = {
+        entryPoints: [entrypoint],
+        banner: { js: getCopyrightHeader() },
+        bundle: true,
+        outfile,
+        platform: "node",
+        target: "es2018", // Covers Node 10.
+        format: "cjs",
+        sourcemap: "linked",
+        external: ["./node_modules/*"],
+        conditions: ["require"],
+        supported: {
+            // "const-and-let": false, // https://github.com/evanw/esbuild/issues/297
+            "object-rest-spread": false, // Performance enhancement, see: https://github.com/evanw/esbuild/releases/tag/v0.14.46
+        },
+        // legalComments: "none", // If we add copyright headers to the source files, uncomment.
+        plugins: [
+            {
+                name: "fix-require",
+                setup: (build) => {
+                    build.onEnd(async () => {
+                        // esbuild converts calls to "require" to "__require"; this function
+                        // calls the real require if it exists, or throws if it does not (rather than
+                        // throwing an error like "require not defined"). But, since we want typescript
+                        // to be consumable by other bundlers, we need to convert these calls back to
+                        // require so our imports are visible again.
+                        //
+                        // Note that this step breaks source maps, but only for lines that reference
+                        // "__require", which is an okay tradeoff for the performance of not running
+                        // the output through transpileModule/babel/etc.
+                        //
+                        // See: https://github.com/evanw/esbuild/issues/1905
+                        let contents = await fs.promises.readFile(outfile, "utf-8");
+                        contents = contents.replace(/__require\(/g, "require(");
+                        await fs.promises.writeFile(outfile, contents);
+                    });
+                },
+            }
+        ]
+    };
+
+    if (exportIsTsObject) {
+        options.format = "iife"; // We use an IIFE so we can inject the code below.
+        options.globalName = "ts"; // Name the variable ts, matching our old big bundle and so we can use the code below.
+        options.footer = {
+            // These snippets cannot appear in the actual source files, otherwise they will be rewritten
+            // to things like exports or requires.
+            js: `
+if (typeof module !== "undefined" && module.exports) {
+    // If we are in a CJS context, export the ts namespace.
+    module.exports = ts;
+}
+if (ts.server) {
+    // If we are in a server bundle, inject the dynamicImport function.
+    ts.server.dynamicImport = id => import(id);
+}`
+        };
+    }
+
+    return {
+        build: () => esbuild.build(options),
+        clean: () => del([outfile, `${outfile}.map`]),
+        watch: () => esbuild.build({ ...options, watch: true }),
+    };
+}
+
+/**
+ * Writes a CJS module that reexports another CJS file via
+ * `module.exports = require("...")`.
+ *
+ * @param {string} infile Relative path from the repo root to the file to be required.
+ * @param {string} outfile Relative path from the repo root to the output file.
+ */
+function writeCJSReexport(infile, outfile) {
+    const inRelativeToOut = infile = path.relative(path.dirname(outfile), infile);
+    fs.writeFileSync(outfile, `module.exports = require("./${inRelativeToOut}")`);
+}
 
-const buildDebugTools = () => buildProject("src/debug");
-const cleanDebugTools = () => cleanProject("src/debug");
+const esbuildDebugTools = esbuildTask("./src/debug/compilerDebug.ts", "./built/local/compilerDebug.js");
+
+const buildDebugTools = () => cmdLineOptions.bundle ? esbuildDebugTools.build() : buildProject("src/debug");
+const cleanDebugTools = () => cmdLineOptions.bundle ? esbuildDebugTools.build() : cleanProject("src/debug");
 cleanTasks.push(cleanDebugTools);
 
 // Pre-build steps when targeting the LKG compiler
 const lkgPreBuild = parallel(generateLibs, series(generateDiagnostics, buildDebugTools));
 
-const buildTsc = () => buildProject("src/tsc");
+
+const esbuildTsc = esbuildTask("./src/tsc/tsc.ts", "./built/local/tsc.js", /* exportIsTsObject */ true);
+const writeTscCJSShim = () => writeCJSReexport("./built/local/tsc/tsc.js", "./built/local/tsc.js");
+
+
+const buildTsc = () => {
+    if (cmdLineOptions.bundle) return esbuildTsc.build();
+    writeTscCJSShim();
+    return buildProject("src/tsc");
+};
 task("tsc", series(lkgPreBuild, buildTsc));
 task("tsc").description = "Builds the command-line compiler";
 
-const cleanTsc = () => cleanProject("src/tsc");
+const cleanTsc = () => cmdLineOptions.bundle ? esbuildTsc.clean() : cleanProject("src/tsc");
 cleanTasks.push(cleanTsc);
 task("clean-tsc", cleanTsc);
 task("clean-tsc").description = "Cleans outputs for the command-line compiler";
 
-const watchTsc = () => watchProject("src/tsc");
+const watchTsc = () => {
+    if (cmdLineOptions.bundle) return esbuildTsc.watch();
+    writeTscCJSShim();
+    return watchProject("src/tsc");
+};
 task("watch-tsc", series(lkgPreBuild, parallel(watchLib, watchDiagnostics, watchTsc)));
 task("watch-tsc").description = "Watch for changes and rebuild the command-line compiler only.";
 
@@ -127,101 +265,50 @@ const localPreBuild = parallel(generateLibs, series(generateDiagnostics, buildDe
 // Pre-build steps to use based on supplied options.
 const preBuild = cmdLineOptions.lkg ? lkgPreBuild : localPreBuild;
 
-const buildServices = (() => {
-    // build typescriptServices.out.js
-    const buildTypescriptServicesOut = () => buildProject("src/typescriptServices/tsconfig.json", cmdLineOptions);
-
-    // create typescriptServices.js
-    const createTypescriptServicesJs = () => src("built/local/typescriptServices.out.js")
-        .pipe(newer("built/local/typescriptServices.js"))
-        .pipe(sourcemaps.init({ loadMaps: true }))
-        .pipe(prependFile(copyright))
-        .pipe(rename("typescriptServices.js"))
-        .pipe(sourcemaps.write(".", { includeContent: false, destPath: "built/local" }))
-        .pipe(dest("built/local"));
-
-    // create typescriptServices.d.ts
-    const createTypescriptServicesDts = () => src("built/local/typescriptServices.out.d.ts")
-        .pipe(newer("built/local/typescriptServices.d.ts"))
-        .pipe(prependFile(copyright))
-        .pipe(transform(content => content.replace(/^(\s*)(export )?const enum (\S+) {(\s*)$/gm, "$1$2enum $3 {$4")))
-        .pipe(rename("typescriptServices.d.ts"))
-        .pipe(dest("built/local"));
-
-    // create typescript.js
-    const createTypescriptJs = () => src("built/local/typescriptServices.js")
-        .pipe(newer("built/local/typescript.js"))
-        .pipe(sourcemaps.init({ loadMaps: true }))
-        .pipe(rename("typescript.js"))
-        .pipe(sourcemaps.write(".", { includeContent: false, destPath: "built/local" }))
-        .pipe(dest("built/local"));
-
-    // create typescript.d.ts
-    const createTypescriptDts = () => src("built/local/typescriptServices.d.ts")
-        .pipe(newer("built/local/typescript.d.ts"))
-        .pipe(append("\nexport = ts;"))
-        .pipe(rename("typescript.d.ts"))
-        .pipe(dest("built/local"));
-
-    // // create typescript_standalone.d.ts
-    // const createTypescriptStandaloneDts = () => src("built/local/typescriptServices.d.ts")
-    //     .pipe(newer("built/local/typescript_standalone.d.ts"))
-    //     .pipe(transform(content => content.replace(/declare (namespace|module) ts/g, 'declare module "typescript"')))
-    //     .pipe(rename("typescript_standalone.d.ts"))
-    //     .pipe(dest("built/local"));
-
-    return series(
-        buildTypescriptServicesOut,
-        createTypescriptServicesJs,
-        createTypescriptServicesDts,
-        createTypescriptJs,
-        createTypescriptDts,
-        // createTypescriptStandaloneDts,
-    );
-})();
+// TODO(jakebailey): rename this; no longer "services".
+
+const esbuildServices = esbuildTask("./src/typescript/typescript.ts", "./built/local/typescript.js", /* exportIsTsObject */ true);
+const writeServicesCJSShim = () => writeCJSReexport("./built/local/typescript/typescript.js", "./built/local/typescript.js");
+const buildServicesProject = () => buildProject("src/typescript");
+
+const buildServices = () => {
+    if (cmdLineOptions.bundle) return esbuildServices.build();
+    writeServicesCJSShim();
+    return buildServicesProject();
+};
+
 task("services", series(preBuild, buildServices));
 task("services").description = "Builds the language service";
 task("services").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const cleanServices = async () => {
-    if (fs.existsSync("built/local/typescriptServices.tsconfig.json")) {
-        await cleanProject("built/local/typescriptServices.tsconfig.json");
-    }
-    await del([
-        "built/local/typescriptServices.out.js",
-        "built/local/typescriptServices.out.d.ts",
-        "built/local/typescriptServices.out.tsbuildinfo",
-        "built/local/typescriptServices.js",
-        "built/local/typescript.js",
-        "built/local/typescript.d.ts",
-        "built/local/typescript_standalone.d.ts"
-    ]);
-};
+const cleanServices = () => cmdLineOptions.bundle ? esbuildServices.clean() : cleanProject("src/typescript");
+
 cleanTasks.push(cleanServices);
 task("clean-services", cleanServices);
 task("clean-services").description = "Cleans outputs for the language service";
 
-const watchServices = () => watch([
-    "src/compiler/tsconfig.json",
-    "src/compiler/**/*.ts",
-    "src/jsTyping/tsconfig.json",
-    "src/jsTyping/**/*.ts",
-    "src/services/tsconfig.json",
-    "src/services/**/*.ts",
-], series(preBuild, buildServices));
+const watchServices = () => {
+    if (cmdLineOptions.bundle) return esbuildServices.watch();
+    writeServicesCJSShim();
+    return watchProject("src/typescript");
+};
 task("watch-services", series(preBuild, parallel(watchLib, watchDiagnostics, watchServices)));
 task("watch-services").description = "Watches for changes and rebuild language service only";
 task("watch-services").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const buildDynamicImportCompat = () => buildProject("src/dynamicImportCompat", cmdLineOptions);
-task("dynamicImportCompat", buildDynamicImportCompat);
 
-const buildServerMain = () => buildProject("src/tsserver", cmdLineOptions);
-const buildServer = series(buildDynamicImportCompat, buildServerMain);
+const esbuildServer = esbuildTask("./src/tsserver/server.ts", "./built/local/tsserver.js", /* exportIsTsObject */ true);
+const writeServerCJSShim = () => writeCJSReexport("./built/local/tsserver/server.js", "./built/local/tsserver.js");
+
+const buildServer = () => {
+    if (cmdLineOptions.bundle) return esbuildServer.build();
+    writeServerCJSShim();
+    return buildProject("src/tsserver");
+};
 buildServer.displayName = "buildServer";
 task("tsserver", series(preBuild, buildServer));
 task("tsserver").description = "Builds the language server";
@@ -229,17 +316,18 @@ task("tsserver").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const cleanDynamicImportCompat = () => cleanProject("src/dynamicImportCompat");
-const cleanServerMain = () => cleanProject("src/tsserver");
-const cleanServer = series(cleanDynamicImportCompat, cleanServerMain);
+const cleanServer = () => cmdLineOptions.bundle ? esbuildServer.clean() : cleanProject("src/tsserver");
 cleanServer.displayName = "cleanServer";
 cleanTasks.push(cleanServer);
 task("clean-tsserver", cleanServer);
 task("clean-tsserver").description = "Cleans outputs for the language server";
 
-const watchDynamicImportCompat = () => watchProject("src/dynamicImportCompat", cmdLineOptions);
-const watchServer = () => watchProject("src/tsserver", cmdLineOptions);
-task("watch-tsserver", series(preBuild, parallel(watchLib, watchDiagnostics, watchDynamicImportCompat, watchServer)));
+const watchServer = () => {
+    if (cmdLineOptions.bundle) return esbuildServer.watch();
+    writeServerCJSShim();
+    return watchProject("src/tsserver");
+};
+task("watch-tsserver", series(preBuild, parallel(watchLib, watchDiagnostics, watchServer)));
 task("watch-tsserver").description = "Watch for changes and rebuild the language server only";
 task("watch-tsserver").flags = {
     "   --built": "Compile using the built version of the compiler."
@@ -260,89 +348,61 @@ task("watch-min").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const buildLssl = (() => {
-    // build tsserverlibrary.out.js
-    const buildServerLibraryOut = () => buildProject("src/tsserverlibrary/tsconfig.json", cmdLineOptions);
-
-    // create tsserverlibrary.js
-    const createServerLibraryJs = () => src("built/local/tsserverlibrary.out.js")
-        .pipe(newer("built/local/tsserverlibrary.js"))
-        .pipe(sourcemaps.init({ loadMaps: true }))
-        .pipe(prependFile(copyright))
-        .pipe(rename("tsserverlibrary.js"))
-        .pipe(sourcemaps.write(".", { includeContent: false, destPath: "built/local" }))
-        .pipe(dest("built/local"));
-
-    // create tsserverlibrary.d.ts
-    const createServerLibraryDts = () => src("built/local/tsserverlibrary.out.d.ts")
-        .pipe(newer("built/local/tsserverlibrary.d.ts"))
-        .pipe(prependFile(copyright))
-        .pipe(transform(content => content.replace(/^(\s*)(export )?const enum (\S+) {(\s*)$/gm, "$1$2enum $3 {$4")))
-        .pipe(append("\nexport = ts;\nexport as namespace ts;"))
-        .pipe(rename("tsserverlibrary.d.ts"))
-        .pipe(dest("built/local"));
-
-    return series(
-        buildServerLibraryOut,
-        createServerLibraryJs,
-        createServerLibraryDts,
-    );
-})();
+const esbuildLssl = esbuildTask("./src/tsserverlibrary/tsserverlibrary.ts", "./built/local/tsserverlibrary.js", /* exportIsTsObject */ true);
+const writeLsslCJSShim = () => writeCJSReexport("./built/local/tsserverlibrary/tsserverlibrary.js", "./built/local/tsserverlibrary.js");
+
+const buildLssl = () => {
+    if (cmdLineOptions.bundle) return esbuildLssl.build();
+    writeLsslCJSShim();
+    return buildProject("src/tsserverlibrary");
+};
 task("lssl", series(preBuild, buildLssl));
 task("lssl").description = "Builds language service server library";
 task("lssl").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const cleanLssl = async () => {
-    if (fs.existsSync("built/local/tsserverlibrary.tsconfig.json")) {
-        await cleanProject("built/local/tsserverlibrary.tsconfig.json");
-    }
-    await del([
-        "built/local/tsserverlibrary.out.js",
-        "built/local/tsserverlibrary.out.d.ts",
-        "built/local/tsserverlibrary.out.tsbuildinfo",
-        "built/local/tsserverlibrary.js",
-        "built/local/tsserverlibrary.d.ts",
-    ]);
-};
+const cleanLssl = () => cmdLineOptions.bundle ? esbuildLssl.clean() : cleanProject("src/tsserverlibrary");
 cleanTasks.push(cleanLssl);
 task("clean-lssl", cleanLssl);
 task("clean-lssl").description = "Clean outputs for the language service server library";
 
-const watchLssl = () => watch([
-    "src/compiler/tsconfig.json",
-    "src/compiler/**/*.ts",
-    "src/jsTyping/tsconfig.json",
-    "src/jsTyping/**/*.ts",
-    "src/services/tsconfig.json",
-    "src/services/**/*.ts",
-    "src/server/tsconfig.json",
-    "src/server/**/*.ts",
-    "src/webServer/tsconfig.json",
-    "src/webServer/**/*.ts",
-    "src/tsserver/tsconfig.json",
-    "src/tsserver/**/*.ts",
-], buildLssl);
+const watchLssl = () => {
+    if (cmdLineOptions.bundle) return esbuildLssl.watch();
+    writeLsslCJSShim();
+    return watchProject("src/tsserverlibrary");
+};
 task("watch-lssl", series(preBuild, parallel(watchLib, watchDiagnostics, watchLssl)));
 task("watch-lssl").description = "Watch for changes and rebuild tsserverlibrary only";
 task("watch-lssl").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const buildTests = () => buildProject("src/testRunner");
+const testRunner = "./built/local/run.js";
+const esbuildTests = esbuildTask("./src/testRunner/_namespaces/Harness.ts", testRunner);
+const writeTestsCJSShim = () => writeCJSReexport("./built/local/testRunner/runner.js", testRunner);
+
+const buildTests = () => {
+    if (cmdLineOptions.bundle) return esbuildTests.build();
+    writeTestsCJSShim();
+    return buildProject("src/testRunner");
+};
 task("tests", series(preBuild, parallel(buildLssl, buildTests)));
 task("tests").description = "Builds the test infrastructure";
 task("tests").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const cleanTests = () => cleanProject("src/testRunner");
+const cleanTests = () => cmdLineOptions.bundle ? esbuildTests.clean() : cleanProject("src/testRunner");
 cleanTasks.push(cleanTests);
 task("clean-tests", cleanTests);
 task("clean-tests").description = "Cleans the outputs for the test infrastructure";
 
-const watchTests = () => watchProject("src/testRunner", cmdLineOptions);
+const watchTests = () => {
+    if (cmdLineOptions.bundle) return esbuildTests.watch();
+    writeTestsCJSShim();
+    return watchProject("src/testRunner");
+};
 
 const runEslintRulesTests = () => runConsoleTests("scripts/eslint/tests", "mocha-fivemat-progress-reporter", /*runInParallel*/ false, /*watchMode*/ false);
 task("run-eslint-rules-tests", runEslintRulesTests);
@@ -373,16 +433,29 @@ lint.displayName = "lint";
 task("lint", lint);
 task("lint").description = "Runs eslint on the compiler and scripts sources.";
 
-const buildCancellationToken = () => buildProject("src/cancellationToken");
-const cleanCancellationToken = () => cleanProject("src/cancellationToken");
+
+const esbuildCancellationToken = esbuildTask("./src/cancellationToken/cancellationToken.ts", "./built/local/cancellationToken.js");
+
+// No need for writeCJSReexport, this outputs to the right place.
+const buildCancellationToken = () => cmdLineOptions.bundle ? esbuildCancellationToken.build() : buildProject("src/cancellationToken");
+const cleanCancellationToken = () => cmdLineOptions.bundle ? esbuildCancellationToken.clean() : cleanProject("src/cancellationToken");
 cleanTasks.push(cleanCancellationToken);
 
-const buildTypingsInstaller = () => buildProject("src/typingsInstaller");
-const cleanTypingsInstaller = () => cleanProject("src/typingsInstaller");
+const esbuildTypingsInstaller = esbuildTask("./src/typingsInstaller/nodeTypingsInstaller.ts", "./built/local/typingsInstaller.js");
+
+const buildTypingsInstaller = () => {
+    if (cmdLineOptions.bundle) return esbuildTypingsInstaller.build();
+    writeCJSReexport("./built/typingsInstaller/nodeTypingsInstaller.js", "./built/local/typingsInstaller.js");
+    return buildProject("src/typingsInstaller");
+};
+const cleanTypingsInstaller = () => cmdLineOptions.bundle ? esbuildTypingsInstaller.clean() : cleanProject("src/typingsInstaller");
 cleanTasks.push(cleanTypingsInstaller);
 
-const buildWatchGuard = () => buildProject("src/watchGuard");
-const cleanWatchGuard = () => cleanProject("src/watchGuard");
+const esbuildWatchGuard = esbuildTask("./src/watchGuard/watchGuard.ts", "./built/local/watchGuard.js");
+
+// No need for writeCJSReexport, this outputs to the right place.
+const buildWatchGuard = () => cmdLineOptions.bundle ? esbuildWatchGuard.build() : buildProject("src/watchGuard");
+const cleanWatchGuard = () => cmdLineOptions.bundle ? esbuildWatchGuard.clean() : cleanProject("src/watchGuard");
 cleanTasks.push(cleanWatchGuard);
 
 const generateTypesMap = () => src("src/server/typesMap.json")
@@ -425,7 +498,7 @@ const preTest = parallel(buildTsc, buildTests, buildServices, buildLssl);
 preTest.displayName = "preTest";
 
 const runTests = () => runConsoleTests(testRunner, "mocha-fivemat-progress-reporter", /*runInParallel*/ false, /*watchMode*/ false);
-task("runtests", series(/*preBuild, preTest,*/ task("build-src"), runTests)); // TODO(jakebailey): fix this for modules
+task("runtests", series(preBuild, preTest, runTests));
 task("runtests").description = "Runs the tests using the built run.js file.";
 task("runtests").flags = {
     "-t --tests=<regex>": "Pattern for tests to run.",
@@ -444,7 +517,7 @@ task("runtests").flags = {
 };
 
 const runTestsParallel = () => runConsoleTests(testRunner, "min", /*runInParallel*/ cmdLineOptions.workers > 1, /*watchMode*/ false);
-task("runtests-parallel", series(/*preBuild, preTest,*/ task("build-src"), runTestsParallel)); // TODO(jakebailey): fix this for modules
+task("runtests-parallel", series(preBuild, preTest, runTestsParallel));
 task("runtests-parallel").description = "Runs all the tests in parallel using the built run.js file.";
 task("runtests-parallel").flags = {
     "   --light": "Run tests in light mode (fewer verifications, but tests run faster).",
@@ -498,25 +571,23 @@ const importDefinitelyTypedTests = () => exec(process.execPath, ["scripts/import
 task("importDefinitelyTypedTests", importDefinitelyTypedTests);
 task("importDefinitelyTypedTests").description = "Runs the importDefinitelyTypedTests script to copy DT's tests to the TS-internal RWC tests";
 
-const buildReleaseTsc = () => buildProject("src/tsc/tsconfig.release.json");
-const cleanReleaseTsc = () => cleanProject("src/tsc/tsconfig.release.json");
-cleanTasks.push(cleanReleaseTsc);
-
 const cleanBuilt = () => del("built");
 
 const produceLKG = async () => {
+    if (!cmdLineOptions.bundle) {
+        throw new Error("LKG cannot be created when --bundle=false");
+    }
+
     const expectedFiles = [
-        "built/local/tsc.release.js",
-        "built/local/typescriptServices.js",
-        "built/local/typescriptServices.d.ts",
+        "built/local/cancellationToken.js",
+        "built/local/tsc.js",
         "built/local/tsserver.js",
-        "built/local/dynamicImportCompat.js",
-        "built/local/typescript.js",
-        "built/local/typescript.d.ts",
         "built/local/tsserverlibrary.js",
         "built/local/tsserverlibrary.d.ts",
+        "built/local/typescript.js",
+        "built/local/typescript.d.ts",
         "built/local/typingsInstaller.js",
-        "built/local/cancellationToken.js"
+        "built/local/watchGuard.js",
     ].concat(libs.map(lib => lib.target));
     const missingFiles = expectedFiles
         .concat(localizationTargets)
@@ -532,7 +603,8 @@ const produceLKG = async () => {
     }
 };
 
-task("LKG", series(lkgPreBuild, parallel(localize, buildTsc, buildServer, buildServices, buildLssl, buildOtherOutputs, buildReleaseTsc), produceLKG));
+// TODO(jakebailey): dependencies on dts
+task("LKG", series(lkgPreBuild, parallel(localize, buildTsc, buildServer, buildServices, buildLssl, buildOtherOutputs), produceLKG));
 task("LKG").description = "Makes a new LKG out of the built js files";
 task("LKG").flags = {
     "   --built": "Compile using the built version of the compiler.",
diff --git a/package-lock.json b/package-lock.json
index f73d17d0f1..708bfbf149 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -41,6 +41,7 @@
                 "chalk": "^4.1.2",
                 "del": "^6.1.1",
                 "diff": "^5.1.0",
+                "esbuild": "^0.15.11",
                 "eslint": "^8.22.0",
                 "eslint-formatter-autolinkable-stylish": "^1.2.0",
                 "eslint-plugin-import": "^2.26.0",
@@ -87,6 +88,38 @@
                 "node": "^14 || ^16 || ^17 || ^18"
             }
         },
+        "node_modules/@esbuild/android-arm": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.15.11.tgz",
+            "integrity": "sha512-PzMcQLazLBkwDEkrNPi9AbjFt6+3I7HKbiYF2XtWQ7wItrHvEOeO3T8Am434zAozWtVP7lrTue1bEfc2nYWeCA==",
+            "cpu": [
+                "arm"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "android"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/@esbuild/linux-loong64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.15.11.tgz",
+            "integrity": "sha512-geWp637tUhNmhL3Xgy4Bj703yXB9dqiLJe05lCUfjSFDrQf9C/8pArusyPUbUbPwlC/EAUjBw32sxuIl/11dZw==",
+            "cpu": [
+                "loong64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
         "node_modules/@eslint/eslintrc": {
             "version": "1.3.3",
             "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.3.3.tgz",
@@ -2258,6 +2291,363 @@
                 "es6-symbol": "^3.1.1"
             }
         },
+        "node_modules/esbuild": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.15.11.tgz",
+            "integrity": "sha512-OgHGuhlfZ//mToxjte1D5iiiQgWfJ2GByVMwEC/IuoXsBGkuyK1+KrjYu0laSpnN/L1UmLUCv0s25vObdc1bVg==",
+            "dev": true,
+            "hasInstallScript": true,
+            "bin": {
+                "esbuild": "bin/esbuild"
+            },
+            "engines": {
+                "node": ">=12"
+            },
+            "optionalDependencies": {
+                "@esbuild/android-arm": "0.15.11",
+                "@esbuild/linux-loong64": "0.15.11",
+                "esbuild-android-64": "0.15.11",
+                "esbuild-android-arm64": "0.15.11",
+                "esbuild-darwin-64": "0.15.11",
+                "esbuild-darwin-arm64": "0.15.11",
+                "esbuild-freebsd-64": "0.15.11",
+                "esbuild-freebsd-arm64": "0.15.11",
+                "esbuild-linux-32": "0.15.11",
+                "esbuild-linux-64": "0.15.11",
+                "esbuild-linux-arm": "0.15.11",
+                "esbuild-linux-arm64": "0.15.11",
+                "esbuild-linux-mips64le": "0.15.11",
+                "esbuild-linux-ppc64le": "0.15.11",
+                "esbuild-linux-riscv64": "0.15.11",
+                "esbuild-linux-s390x": "0.15.11",
+                "esbuild-netbsd-64": "0.15.11",
+                "esbuild-openbsd-64": "0.15.11",
+                "esbuild-sunos-64": "0.15.11",
+                "esbuild-windows-32": "0.15.11",
+                "esbuild-windows-64": "0.15.11",
+                "esbuild-windows-arm64": "0.15.11"
+            }
+        },
+        "node_modules/esbuild-android-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.15.11.tgz",
+            "integrity": "sha512-rrwoXEiuI1kaw4k475NJpexs8GfJqQUKcD08VR8sKHmuW9RUuTR2VxcupVvHdiGh9ihxL9m3lpqB1kju92Ialw==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "android"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-android-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.15.11.tgz",
+            "integrity": "sha512-/hDubOg7BHOhUUsT8KUIU7GfZm5bihqssvqK5PfO4apag7YuObZRZSzViyEKcFn2tPeHx7RKbSBXvAopSHDZJQ==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "android"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-darwin-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.15.11.tgz",
+            "integrity": "sha512-1DqHD0ms3AhiwkKnjRUzmiW7JnaJJr5FKrPiR7xuyMwnjDqvNWDdMq4rKSD9OC0piFNK6n0LghsglNMe2MwJtA==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "darwin"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-darwin-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.15.11.tgz",
+            "integrity": "sha512-OMzhxSbS0lwwrW40HHjRCeVIJTURdXFA8c3GU30MlHKuPCcvWNUIKVucVBtNpJySXmbkQMDJdJNrXzNDyvoqvQ==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "darwin"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-freebsd-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.15.11.tgz",
+            "integrity": "sha512-8dKP26r0/Qyez8nTCwpq60QbuYKOeBygdgOAWGCRalunyeqWRoSZj9TQjPDnTTI9joxd3QYw3UhVZTKxO9QdRg==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "freebsd"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-freebsd-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.15.11.tgz",
+            "integrity": "sha512-aSGiODiukLGGnSg/O9+cGO2QxEacrdCtCawehkWYTt5VX1ni2b9KoxpHCT9h9Y6wGqNHmXFnB47RRJ8BIqZgmQ==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "freebsd"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-32": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.15.11.tgz",
+            "integrity": "sha512-lsrAfdyJBGx+6aHIQmgqUonEzKYeBnyfJPkT6N2dOf1RoXYYV1BkWB6G02tjsrz1d5wZzaTc3cF+TKmuTo/ZwA==",
+            "cpu": [
+                "ia32"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.15.11.tgz",
+            "integrity": "sha512-Y2Rh+PcyVhQqXKBTacPCltINN3uIw2xC+dsvLANJ1SpK5NJUtxv8+rqWpjmBgaNWKQT1/uGpMmA9olALy9PLVA==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-arm": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.15.11.tgz",
+            "integrity": "sha512-TJllTVk5aSyqPFvvcHTvf6Wu1ZKhWpJ/qNmZO8LL/XeB+LXCclm7HQHNEIz6MT7IX8PmlC1BZYrOiw2sXSB95A==",
+            "cpu": [
+                "arm"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.15.11.tgz",
+            "integrity": "sha512-uhcXiTwTmD4OpxJu3xC5TzAAw6Wzf9O1XGWL448EE9bqGjgV1j+oK3lIHAfsHnuIn8K4nDW8yjX0Sv5S++oRuw==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-mips64le": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.15.11.tgz",
+            "integrity": "sha512-WD61y/R1M4BLe4gxXRypoQ0Ci+Vjf714QYzcPNkiYv5I8K8WDz2ZR8Bm6cqKxd6rD+e/rZgPDbhQ9PCf7TMHmA==",
+            "cpu": [
+                "mips64el"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-ppc64le": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.15.11.tgz",
+            "integrity": "sha512-JVleZS9oPVLTlBhPTWgOwxFWU/wMUdlBwTbGA4GF8c38sLbS13cupj+C8bLq929jU7EMWry4SaL+tKGIaTlqKg==",
+            "cpu": [
+                "ppc64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-riscv64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.15.11.tgz",
+            "integrity": "sha512-9aLIalZ2HFHIOZpmVU11sEAS9F8TnHw49daEjcgMpBXHFF57VuT9f9/9LKJhw781Gda0P9jDkuCWJ0tFbErvJw==",
+            "cpu": [
+                "riscv64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-s390x": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.15.11.tgz",
+            "integrity": "sha512-sZHtiXXOKsLI3XGBGoYO4qKBzJlb8xNsWmvFiwFMHFzA4AXgDP1KDp7Dawe9C2pavTRBDvl+Ok4n/DHQ59oaTg==",
+            "cpu": [
+                "s390x"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-netbsd-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.15.11.tgz",
+            "integrity": "sha512-hUC9yN06K9sg7ju4Vgu9ChAPdsEgtcrcLfyNT5IKwKyfpLvKUwCMZSdF+gRD3WpyZelgTQfJ+pDx5XFbXTlB0A==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "netbsd"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-openbsd-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.15.11.tgz",
+            "integrity": "sha512-0bBo9SQR4t66Wd91LGMAqmWorzO0TTzVjYiifwoFtel8luFeXuPThQnEm5ztN4g0fnvcp7AnUPPzS/Depf17wQ==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "openbsd"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-sunos-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.15.11.tgz",
+            "integrity": "sha512-EuBdTGlsMTjEl1sQnBX2jfygy7iR6CKfvOzi+gEOfhDqbHXsmY1dcpbVtcwHAg9/2yUZSfMJHMAgf1z8M4yyyw==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "sunos"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-windows-32": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.15.11.tgz",
+            "integrity": "sha512-O0/Wo1Wk6dc0rZSxkvGpmTNIycEznHmkObTFz2VHBhjPsO4ZpCgfGxNkCpz4AdAIeMczpTXt/8d5vdJNKEGC+Q==",
+            "cpu": [
+                "ia32"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "win32"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-windows-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.15.11.tgz",
+            "integrity": "sha512-x977Q4HhNjnHx00b4XLAnTtj5vfbdEvkxaQwC1Zh5AN8g5EX+izgZ6e5QgqJgpzyRNJqh4hkgIJF1pyy1be0mQ==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "win32"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-windows-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.15.11.tgz",
+            "integrity": "sha512-VwUHFACuBahrvntdcMKZteUZ9HaYrBRODoKe4tIWxguQRvvYoYb7iu5LrcRS/FQx8KPZNaa72zuqwVtHeXsITw==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "win32"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
         "node_modules/escalade": {
             "version": "3.1.1",
             "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
@@ -8671,6 +9061,20 @@
                 "jsdoc-type-pratt-parser": "~3.1.0"
             }
         },
+        "@esbuild/android-arm": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.15.11.tgz",
+            "integrity": "sha512-PzMcQLazLBkwDEkrNPi9AbjFt6+3I7HKbiYF2XtWQ7wItrHvEOeO3T8Am434zAozWtVP7lrTue1bEfc2nYWeCA==",
+            "dev": true,
+            "optional": true
+        },
+        "@esbuild/linux-loong64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.15.11.tgz",
+            "integrity": "sha512-geWp637tUhNmhL3Xgy4Bj703yXB9dqiLJe05lCUfjSFDrQf9C/8pArusyPUbUbPwlC/EAUjBw32sxuIl/11dZw==",
+            "dev": true,
+            "optional": true
+        },
         "@eslint/eslintrc": {
             "version": "1.3.3",
             "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.3.3.tgz",
@@ -10381,6 +10785,176 @@
                 "es6-symbol": "^3.1.1"
             }
         },
+        "esbuild": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.15.11.tgz",
+            "integrity": "sha512-OgHGuhlfZ//mToxjte1D5iiiQgWfJ2GByVMwEC/IuoXsBGkuyK1+KrjYu0laSpnN/L1UmLUCv0s25vObdc1bVg==",
+            "dev": true,
+            "requires": {
+                "@esbuild/android-arm": "0.15.11",
+                "@esbuild/linux-loong64": "0.15.11",
+                "esbuild-android-64": "0.15.11",
+                "esbuild-android-arm64": "0.15.11",
+                "esbuild-darwin-64": "0.15.11",
+                "esbuild-darwin-arm64": "0.15.11",
+                "esbuild-freebsd-64": "0.15.11",
+                "esbuild-freebsd-arm64": "0.15.11",
+                "esbuild-linux-32": "0.15.11",
+                "esbuild-linux-64": "0.15.11",
+                "esbuild-linux-arm": "0.15.11",
+                "esbuild-linux-arm64": "0.15.11",
+                "esbuild-linux-mips64le": "0.15.11",
+                "esbuild-linux-ppc64le": "0.15.11",
+                "esbuild-linux-riscv64": "0.15.11",
+                "esbuild-linux-s390x": "0.15.11",
+                "esbuild-netbsd-64": "0.15.11",
+                "esbuild-openbsd-64": "0.15.11",
+                "esbuild-sunos-64": "0.15.11",
+                "esbuild-windows-32": "0.15.11",
+                "esbuild-windows-64": "0.15.11",
+                "esbuild-windows-arm64": "0.15.11"
+            }
+        },
+        "esbuild-android-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.15.11.tgz",
+            "integrity": "sha512-rrwoXEiuI1kaw4k475NJpexs8GfJqQUKcD08VR8sKHmuW9RUuTR2VxcupVvHdiGh9ihxL9m3lpqB1kju92Ialw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-android-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.15.11.tgz",
+            "integrity": "sha512-/hDubOg7BHOhUUsT8KUIU7GfZm5bihqssvqK5PfO4apag7YuObZRZSzViyEKcFn2tPeHx7RKbSBXvAopSHDZJQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-darwin-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.15.11.tgz",
+            "integrity": "sha512-1DqHD0ms3AhiwkKnjRUzmiW7JnaJJr5FKrPiR7xuyMwnjDqvNWDdMq4rKSD9OC0piFNK6n0LghsglNMe2MwJtA==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-darwin-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.15.11.tgz",
+            "integrity": "sha512-OMzhxSbS0lwwrW40HHjRCeVIJTURdXFA8c3GU30MlHKuPCcvWNUIKVucVBtNpJySXmbkQMDJdJNrXzNDyvoqvQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-freebsd-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.15.11.tgz",
+            "integrity": "sha512-8dKP26r0/Qyez8nTCwpq60QbuYKOeBygdgOAWGCRalunyeqWRoSZj9TQjPDnTTI9joxd3QYw3UhVZTKxO9QdRg==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-freebsd-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.15.11.tgz",
+            "integrity": "sha512-aSGiODiukLGGnSg/O9+cGO2QxEacrdCtCawehkWYTt5VX1ni2b9KoxpHCT9h9Y6wGqNHmXFnB47RRJ8BIqZgmQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-32": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.15.11.tgz",
+            "integrity": "sha512-lsrAfdyJBGx+6aHIQmgqUonEzKYeBnyfJPkT6N2dOf1RoXYYV1BkWB6G02tjsrz1d5wZzaTc3cF+TKmuTo/ZwA==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.15.11.tgz",
+            "integrity": "sha512-Y2Rh+PcyVhQqXKBTacPCltINN3uIw2xC+dsvLANJ1SpK5NJUtxv8+rqWpjmBgaNWKQT1/uGpMmA9olALy9PLVA==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-arm": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.15.11.tgz",
+            "integrity": "sha512-TJllTVk5aSyqPFvvcHTvf6Wu1ZKhWpJ/qNmZO8LL/XeB+LXCclm7HQHNEIz6MT7IX8PmlC1BZYrOiw2sXSB95A==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.15.11.tgz",
+            "integrity": "sha512-uhcXiTwTmD4OpxJu3xC5TzAAw6Wzf9O1XGWL448EE9bqGjgV1j+oK3lIHAfsHnuIn8K4nDW8yjX0Sv5S++oRuw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-mips64le": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.15.11.tgz",
+            "integrity": "sha512-WD61y/R1M4BLe4gxXRypoQ0Ci+Vjf714QYzcPNkiYv5I8K8WDz2ZR8Bm6cqKxd6rD+e/rZgPDbhQ9PCf7TMHmA==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-ppc64le": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.15.11.tgz",
+            "integrity": "sha512-JVleZS9oPVLTlBhPTWgOwxFWU/wMUdlBwTbGA4GF8c38sLbS13cupj+C8bLq929jU7EMWry4SaL+tKGIaTlqKg==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-riscv64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.15.11.tgz",
+            "integrity": "sha512-9aLIalZ2HFHIOZpmVU11sEAS9F8TnHw49daEjcgMpBXHFF57VuT9f9/9LKJhw781Gda0P9jDkuCWJ0tFbErvJw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-s390x": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.15.11.tgz",
+            "integrity": "sha512-sZHtiXXOKsLI3XGBGoYO4qKBzJlb8xNsWmvFiwFMHFzA4AXgDP1KDp7Dawe9C2pavTRBDvl+Ok4n/DHQ59oaTg==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-netbsd-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.15.11.tgz",
+            "integrity": "sha512-hUC9yN06K9sg7ju4Vgu9ChAPdsEgtcrcLfyNT5IKwKyfpLvKUwCMZSdF+gRD3WpyZelgTQfJ+pDx5XFbXTlB0A==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-openbsd-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.15.11.tgz",
+            "integrity": "sha512-0bBo9SQR4t66Wd91LGMAqmWorzO0TTzVjYiifwoFtel8luFeXuPThQnEm5ztN4g0fnvcp7AnUPPzS/Depf17wQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-sunos-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.15.11.tgz",
+            "integrity": "sha512-EuBdTGlsMTjEl1sQnBX2jfygy7iR6CKfvOzi+gEOfhDqbHXsmY1dcpbVtcwHAg9/2yUZSfMJHMAgf1z8M4yyyw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-windows-32": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.15.11.tgz",
+            "integrity": "sha512-O0/Wo1Wk6dc0rZSxkvGpmTNIycEznHmkObTFz2VHBhjPsO4ZpCgfGxNkCpz4AdAIeMczpTXt/8d5vdJNKEGC+Q==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-windows-64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.15.11.tgz",
+            "integrity": "sha512-x977Q4HhNjnHx00b4XLAnTtj5vfbdEvkxaQwC1Zh5AN8g5EX+izgZ6e5QgqJgpzyRNJqh4hkgIJF1pyy1be0mQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-windows-arm64": {
+            "version": "0.15.11",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.15.11.tgz",
+            "integrity": "sha512-VwUHFACuBahrvntdcMKZteUZ9HaYrBRODoKe4tIWxguQRvvYoYb7iu5LrcRS/FQx8KPZNaa72zuqwVtHeXsITw==",
+            "dev": true,
+            "optional": true
+        },
         "escalade": {
             "version": "3.1.1",
             "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
diff --git a/package.json b/package.json
index 384d29f05c..ee3a7b7216 100644
--- a/package.json
+++ b/package.json
@@ -67,6 +67,7 @@
         "chalk": "^4.1.2",
         "del": "^6.1.1",
         "diff": "^5.1.0",
+        "esbuild": "^0.15.11",
         "eslint": "^8.22.0",
         "eslint-formatter-autolinkable-stylish": "^1.2.0",
         "eslint-plugin-import": "^2.26.0",
diff --git a/scripts/build/localization.mjs b/scripts/build/localization.mjs
new file mode 100644
index 0000000000..142bd14c1a
--- /dev/null
+++ b/scripts/build/localization.mjs
@@ -0,0 +1 @@
+export const localizationDirectories = ["cs", "de", "es", "fr", "it", "ja", "ko", "pl", "pt-br", "ru", "tr", "zh-cn", "zh-tw"].map(f => f.toLowerCase());
diff --git a/scripts/build/options.mjs b/scripts/build/options.mjs
index 78240aa9ae..314d9f6802 100644
--- a/scripts/build/options.mjs
+++ b/scripts/build/options.mjs
@@ -4,7 +4,7 @@ import os from "os";
 const ci = ["1", "true"].includes(process.env.CI ?? "");
 
 const parsed = minimist(process.argv.slice(2), {
-    boolean: ["dirty", "light", "colors", "lkg", "soft", "fix", "failed", "keepFailed", "force", "built", "ci"],
+    boolean: ["dirty", "light", "colors", "lkg", "soft", "fix", "failed", "keepFailed", "force", "built", "ci", "bundle"],
     string: ["browser", "tests", "break", "host", "reporter", "stackTraceLimit", "timeout", "shards", "shardId"],
     alias: {
         /* eslint-disable quote-props */
@@ -39,6 +39,7 @@ const parsed = minimist(process.argv.slice(2), {
         dirty: false,
         built: false,
         ci,
+        bundle: true
     }
 });
 
@@ -77,5 +78,7 @@ export default options;
  * @property {boolean} ci
  * @property {string} shards
  * @property {string} shardId
+ * @property {string} break
+ * @property {boolean} bundle
  */
 void 0;
diff --git a/scripts/build/prepend.mjs b/scripts/build/prepend.mjs
deleted file mode 100644
index 115cd3b3d5..0000000000
--- a/scripts/build/prepend.mjs
+++ /dev/null
@@ -1,61 +0,0 @@
-import stream from "stream";
-import ts from "../../lib/typescript.js";
-import fs from "fs";
-import { base64VLQFormatEncode } from "./sourcemaps.mjs";
-
-/**
- * @param {string | ((file: import("vinyl")) => string)} data
- */
-export function prepend(data) {
-    return new stream.Transform({
-        objectMode: true,
-        /**
-         * @param {string | Buffer | import("vinyl")} input
-         * @param {(error: Error | null, data?: any) => void} cb
-         */
-        transform(input, _, cb) {
-            if (typeof input === "string" || Buffer.isBuffer(input)) return cb(new Error("Only Vinyl files are supported."));
-            if (!input.isBuffer()) return cb(new Error("Streams not supported."));
-            try {
-                const output = input.clone();
-                const prependContent = typeof data === "function" ? data(input) : data;
-                output.contents = Buffer.concat([Buffer.from(prependContent, "utf8"), input.contents]);
-                if (input.sourceMap) {
-                    if (typeof input.sourceMap === "string") input.sourceMap = /**@type {import("./sourcemaps.mjs").RawSourceMap}*/(JSON.parse(input.sourceMap));
-                    const lineStarts = /**@type {*}*/(ts).computeLineStarts(prependContent);
-                    let prependMappings = "";
-                    for (let i = 1; i < lineStarts.length; i++) {
-                        prependMappings += ";";
-                    }
-                    const offset = prependContent.length - lineStarts[lineStarts.length - 1];
-                    if (offset > 0) {
-                        prependMappings += base64VLQFormatEncode(offset) + ",";
-                    }
-                    output.sourceMap = {
-                        version: input.sourceMap.version,
-                        file: input.sourceMap.file,
-                        sources: input.sourceMap.sources,
-                        sourceRoot: input.sourceMap.sourceRoot,
-                        mappings: prependMappings + input.sourceMap.mappings,
-                        names: input.names,
-                        sourcesContent: input.sourcesContent
-                    };
-                }
-                // eslint-disable-next-line local/boolean-trivia, no-null/no-null
-                return cb(null, output);
-            }
-            catch (e) {
-                return cb(/** @type {Error} */(e));
-            }
-        }
-    });
-}
-
-/**
- * @param {string | ((file: import("vinyl")) => string)} file
- */
-export function prependFile(file) {
-    const data = typeof file === "string" ? fs.readFileSync(file, "utf8") :
-        (/** @type {import("vinyl")} */ vinyl) => fs.readFileSync(file(vinyl), "utf8");
-    return prepend(data);
-}
diff --git a/scripts/build/projects.mjs b/scripts/build/projects.mjs
index 1061f5521b..b33d58a6d0 100644
--- a/scripts/build/projects.mjs
+++ b/scripts/build/projects.mjs
@@ -1,69 +1,57 @@
 import { exec, Debouncer } from "./utils.mjs";
 import { resolve } from "path";
 import { findUpRoot } from "./findUpDir.mjs";
-import assert from "assert";
+import cmdLineOptions from "./options.mjs";
 
 class ProjectQueue {
     /**
-     * @param {(projects: string[], lkg: boolean, force: boolean) => Promise<any>} action
+     * @param {(projects: string[]) => Promise<any>} action
      */
     constructor(action) {
-        /** @type {{ lkg: boolean, force: boolean, projects?: string[], debouncer: Debouncer }[]} */
-        this._debouncers = [];
-        this._action = action;
+        /** @type {string[] | undefined} */
+        this._projects = undefined;
+        this._debouncer = new Debouncer(100, async () => {
+            const projects = this._projects;
+            if (projects) {
+                this._projects = undefined;
+                await action(projects);
+            }
+        });
     }
 
     /**
      * @param {string} project
-     * @param {{ lkg?: boolean; force?: boolean; }} options
      */
-    enqueue(project, { lkg = true, force = false } = {}) {
-        let entry = this._debouncers.find(entry => entry.lkg === lkg && entry.force === force);
-        if (!entry) {
-            const debouncer = new Debouncer(100, async () => {
-                assert(entry);
-                const projects = entry.projects;
-                if (projects) {
-                    entry.projects = undefined;
-                    await this._action(projects, lkg, force);
-                }
-            });
-            this._debouncers.push(entry = { lkg, force, debouncer });
-        }
-        if (!entry.projects) entry.projects = [];
-        entry.projects.push(project);
-        return entry.debouncer.enqueue();
+    enqueue(project) {
+        if (!this._projects) this._projects = [];
+        this._projects.push(project);
+        return this._debouncer.enqueue();
     }
 }
 
-const execTsc = (/** @type {boolean} */ lkg, /** @type {string[]} */ ...args) =>
+const execTsc = (/** @type {string[]} */ ...args) =>
     exec(process.execPath,
-         [resolve(findUpRoot(), lkg ? "./lib/tsc" : "./built/local/tsc"),
+         [resolve(findUpRoot(), cmdLineOptions.lkg ? "./lib/tsc" : "./built/local/tsc"),
           "-b", ...args],
          { hidePrompt: true });
 
-const projectBuilder = new ProjectQueue((projects, lkg, force) => execTsc(lkg, ...(force ? ["--force"] : []), ...projects));
+const projectBuilder = new ProjectQueue((projects) => execTsc(...projects));
 
 /**
  * @param {string} project
- * @param {object} options
- * @param {boolean} [options.lkg=true]
- * @param {boolean} [options.force=false]
  */
-export const buildProject = (project, { lkg, force } = {}) => projectBuilder.enqueue(project, { lkg, force });
+export const buildProject = (project) => projectBuilder.enqueue(project);
 
-const projectCleaner = new ProjectQueue((projects, lkg) => execTsc(lkg, "--clean", ...projects));
+const projectCleaner = new ProjectQueue((projects) => execTsc("--clean", ...projects));
 
 /**
  * @param {string} project
  */
  export const cleanProject = (project) => projectCleaner.enqueue(project);
 
-const projectWatcher = new ProjectQueue((projects) => execTsc(/*lkg*/ true, "--watch", ...projects));
+const projectWatcher = new ProjectQueue((projects) => execTsc("--watch", ...projects));
 
 /**
  * @param {string} project
- * @param {object} options
- * @param {boolean} [options.lkg=true]
  */
-export const watchProject = (project, { lkg } = {}) => projectWatcher.enqueue(project, { lkg });
+export const watchProject = (project) => projectWatcher.enqueue(project);
diff --git a/scripts/build/tests.mjs b/scripts/build/tests.mjs
index dce50403c0..4da9cab147 100644
--- a/scripts/build/tests.mjs
+++ b/scripts/build/tests.mjs
@@ -122,17 +122,17 @@ export async function runConsoleTests(runJs, defaultReporter, runInParallel, _wa
             errorStatus = exitCode;
             error = new Error(`Process exited with status code ${errorStatus}.`);
         }
-        else if (cmdLineOptions.ci && runJs.startsWith("built")) {
-            // finally, do a sanity check and build the compiler with the built version of itself
-            log.info("Starting sanity check build...");
-            // Cleanup everything except lint rules (we'll need those later and would rather not waste time rebuilding them)
-            await exec("gulp", ["clean-tsc", "clean-services", "clean-tsserver", "clean-lssl", "clean-tests"]);
-            const { exitCode } = await exec("gulp", ["local", "--lkg=false"]);
-            if (exitCode !== 0) {
-                errorStatus = exitCode;
-                error = new Error(`Sanity check build process exited with status code ${errorStatus}.`);
-            }
-        }
+        // else if (cmdLineOptions.ci && runJs.startsWith("built")) {
+        //     // finally, do a sanity check and build the compiler with the built version of itself
+        //     log.info("Starting sanity check build...");
+        //     // Cleanup everything except lint rules (we'll need those later and would rather not waste time rebuilding them)
+        //     await exec("gulp", ["clean-tsc", "clean-services", "clean-tsserver", "clean-lssl", "clean-tests"]);
+        //     const { exitCode } = await exec("gulp", ["local", "--lkg=false"]);
+        //     if (exitCode !== 0) {
+        //         errorStatus = exitCode;
+        //         error = new Error(`Sanity check build process exited with status code ${errorStatus}.`);
+        //     }
+        // }
     }
     catch (e) {
         errorStatus = undefined;
diff --git a/scripts/produceLKG.mjs b/scripts/produceLKG.mjs
index 0d1ea0f8bc..1683b7a5c1 100644
--- a/scripts/produceLKG.mjs
+++ b/scripts/produceLKG.mjs
@@ -3,6 +3,7 @@ import path from "path";
 import glob from "glob";
 import url from "url";
 import del from "del";
+import { localizationDirectories } from "./build/localization.mjs";
 
 const __filename = url.fileURLToPath(new URL(import.meta.url));
 const __dirname = path.dirname(__filename);
@@ -29,15 +30,9 @@ async function copyLibFiles() {
 }
 
 async function copyLocalizedDiagnostics() {
-    const dir = await fs.readdir(source);
-    const ignoredFolders = ["enu"];
-
-    for (const d of dir) {
+    for (const d of localizationDirectories) {
         const fileName = path.join(source, d);
-        if (
-            fs.statSync(fileName).isDirectory() &&
-            ignoredFolders.indexOf(d) < 0
-        ) {
+        if (fs.statSync(fileName).isDirectory()) {
             await fs.copy(fileName, path.join(dest, d));
         }
     }
@@ -48,21 +43,18 @@ async function copyTypesMap() {
 }
 
 async function copyScriptOutputs() {
-    await copyWithCopyright("cancellationToken.js");
-    await copyWithCopyright("tsc.release.js", "tsc.js");
-    await copyWithCopyright("tsserver.js");
-    await copyWithCopyright("dynamicImportCompat.js");
-    await copyFromBuiltLocal("tsserverlibrary.js"); // copyright added by build
-    await copyFromBuiltLocal("typescript.js"); // copyright added by build
-    await copyFromBuiltLocal("typescriptServices.js"); // copyright added by build
-    await copyWithCopyright("typingsInstaller.js");
-    await copyWithCopyright("watchGuard.js");
+    await copyFromBuiltLocal("cancellationToken.js");
+    await copyFromBuiltLocal("tsc.js");
+    await copyFromBuiltLocal("tsserver.js");
+    await copyFromBuiltLocal("tsserverlibrary.js");
+    await copyFromBuiltLocal("typescript.js");
+    await copyFromBuiltLocal("typingsInstaller.js");
+    await copyFromBuiltLocal("watchGuard.js");
 }
 
 async function copyDeclarationOutputs() {
-    await copyFromBuiltLocal("tsserverlibrary.d.ts"); // copyright added by build
-    await copyFromBuiltLocal("typescript.d.ts"); // copyright added by build
-    await copyFromBuiltLocal("typescriptServices.d.ts"); // copyright added by build
+    await copyWithCopyright("tsserverlibrary.d.ts");
+    await copyWithCopyright("typescript.d.ts");
 }
 
 async function writeGitAttributes() {
diff --git a/src/cancellationToken/tsconfig.json b/src/cancellationToken/tsconfig.json
index 76eca8f56c..f12034bee9 100644
--- a/src/cancellationToken/tsconfig.json
+++ b/src/cancellationToken/tsconfig.json
@@ -1,7 +1,9 @@
 {
     "extends": "../tsconfig-base",
     "compilerOptions": {
-        "outDir": "../../built/local/cancellationToken",
+        "outDir": "../../built/local",
+        "tsBuildInfoFile": "../../built/local/cancellationToken.tsbuildinfo",
+        "rootDir": ".",
         "module": "commonjs",
         "types": [
             "node"
diff --git a/src/compiler/debug.ts b/src/compiler/debug.ts
index 591cd8945d..c766bf6875 100644
--- a/src/compiler/debug.ts
+++ b/src/compiler/debug.ts
@@ -721,7 +721,7 @@ export namespace Debug {
         try {
             if (sys && sys.require) {
                 const basePath = getDirectoryPath(resolvePath(sys.getExecutingFilePath()));
-                const result = sys.require(basePath, "./compiler-debug") as RequireResult<ExtendedDebugModule>;
+                const result = sys.require(basePath, "./compilerDebug") as RequireResult<ExtendedDebugModule>;
                 if (!result.error) {
                     result.module.init(ts);
                     extendedDebugModule = result.module;
diff --git a/src/compiler/sys.ts b/src/compiler/sys.ts
index ffacb3f1fd..e4cbb90009 100644
--- a/src/compiler/sys.ts
+++ b/src/compiler/sys.ts
@@ -1463,6 +1463,13 @@ export let sys: System = (() => {
         const useCaseSensitiveFileNames = isFileSystemCaseSensitive();
         const fsRealpath = !!_fs.realpathSync.native ? process.platform === "win32" ? fsRealPathHandlingLongPath : _fs.realpathSync.native : _fs.realpathSync;
 
+        // If our filename is "sys.js", then we are executing unbundled on the raw tsc output.
+        // In that case, simulate a faked path in the directory where a bundle would normally
+        // appear (e.g. the directory containing lib.*.d.ts files).
+        //
+        // Note that if we ever emit as files like cjs/mjs, this check will be wrong.
+        const executingFilePath = __filename.endsWith("sys.js") ? _path.join(_path.dirname(__dirname), "__fake__.js") : __filename;
+
         const fsSupportsRecursiveFsWatch = isNode4OrLater && (process.platform === "win32" || process.platform === "darwin");
         const getCurrentDirectory = memoize(() => process.cwd());
         const { watchFile, watchDirectory } = createSystemWatchFunctions({
@@ -1521,14 +1528,7 @@ export let sys: System = (() => {
                 }
             },
             getExecutingFilePath() {
-                // This function previously returned a path like `built/local/tsc.js`.
-                // Now, with a module output, this file is now `built/local/compiler/sys.js`.
-                // We want to return a file that looks like the old one, so that callers
-                // can locate other assets like the lib.d.ts files.
-                //
-                // TODO(jakebailey): replace this function with one that returns the path
-                // to the lib folder (or package path)?.
-                return _path.join(_path.dirname(__dirname), "fake.js");
+                return executingFilePath;
             },
             getCurrentDirectory,
             getDirectories,
@@ -1567,7 +1567,10 @@ export let sys: System = (() => {
             debugMode: !!process.env.NODE_INSPECTOR_IPC || !!process.env.VSCODE_INSPECTOR_OPTIONS || some(process.execArgv as string[], arg => /^--(inspect|debug)(-brk)?(=\d+)?$/i.test(arg)),
             tryEnableSourceMapsForHost() {
                 try {
-                    require("source-map-support").install();
+                    // Trick esbuild into not eagerly resolving a path to a JS file.
+                    // See: https://github.com/evanw/esbuild/issues/1958
+                    const moduleName = "source-map-support" as const;
+                    (require(moduleName) as typeof import("source-map-support")).install();
                 }
                 catch {
                     // Could not enable source maps.
@@ -1642,7 +1645,7 @@ export let sys: System = (() => {
         function cleanupPaths(profile: import("inspector").Profiler.Profile) {
             let externalFileCounter = 0;
             const remappedPaths = new Map<string, string>();
-            const normalizedDir = normalizeSlashes(__dirname);
+            const normalizedDir = normalizeSlashes(_path.dirname(executingFilePath));
             // Windows rooted dir names need an extra `/` prepended to be valid file:/// urls
             const fileUrlRoot = `file://${getRootLength(normalizedDir) === 1 ? "" : "/"}${normalizedDir}`;
             for (const node of profile.nodes) {
diff --git a/src/debug/_namespaces/Debug.ts b/src/debug/_namespaces/Debug.ts
deleted file mode 100644
index 449c31bdae..0000000000
--- a/src/debug/_namespaces/Debug.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-/* Generated file to emulate the Debug namespace. */
-
-export * from "../dbg";
diff --git a/src/debug/dbg.ts b/src/debug/compilerDebug.ts
similarity index 95%
rename from src/debug/dbg.ts
rename to src/debug/compilerDebug.ts
index 3b531914d5..5eca399b05 100644
--- a/src/debug/dbg.ts
+++ b/src/debug/compilerDebug.ts
@@ -1,7 +1,3 @@
-import * as Debug from "./_namespaces/Debug";
-
-/// <reference lib="es2019" />
-
 interface Node {
     kind: number;
 }
@@ -510,9 +506,3 @@ export function formatControlFlowGraph(flowNode: FlowNode) {
         return s;
     }
 }
-
-// Export as a module. NOTE: Can't use module exports as this is built using --outFile
-declare const module: { exports: {} };
-if (typeof module !== "undefined" && module.exports) {
-    module.exports = Debug;
-}
diff --git a/src/debug/tsconfig.json b/src/debug/tsconfig.json
index 4f9a47f5af..d4eb364738 100644
--- a/src/debug/tsconfig.json
+++ b/src/debug/tsconfig.json
@@ -1,12 +1,13 @@
 {
     "extends": "../tsconfig-base",
     "compilerOptions": {
+        "outDir": "../../built/local",
+        "tsBuildInfoFile": "../../built/local/debug.tsbuildinfo",
+        "rootDir": ".",
         "target": "es2019",
         "lib": ["es2019"],
-        "outDir": "../../built/local/debug"
     },
     "files": [
-        "dbg.ts",
-        "_namespaces/Debug.ts"
+        "compilerDebug.ts",
     ]
 }
diff --git a/src/dynamicImportCompat/_namespaces/ts.server.ts b/src/dynamicImportCompat/_namespaces/ts.server.ts
deleted file mode 100644
index 729da9c24e..0000000000
--- a/src/dynamicImportCompat/_namespaces/ts.server.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-/* Generated file to emulate the ts.server namespace. */
-
-export * from "../dynamicImportCompat";
diff --git a/src/dynamicImportCompat/_namespaces/ts.ts b/src/dynamicImportCompat/_namespaces/ts.ts
deleted file mode 100644
index 91d7693414..0000000000
--- a/src/dynamicImportCompat/_namespaces/ts.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-/* Generated file to emulate the ts namespace. */
-
-import * as server from "./ts.server";
-export { server };
diff --git a/src/dynamicImportCompat/dynamicImportCompat.ts b/src/dynamicImportCompat/dynamicImportCompat.ts
deleted file mode 100644
index 5981d8c7e9..0000000000
--- a/src/dynamicImportCompat/dynamicImportCompat.ts
+++ /dev/null
@@ -1 +0,0 @@
-export const dynamicImport = (id: string) => import(id);
\ No newline at end of file
diff --git a/src/dynamicImportCompat/tsconfig.json b/src/dynamicImportCompat/tsconfig.json
deleted file mode 100644
index 3abacb2133..0000000000
--- a/src/dynamicImportCompat/tsconfig.json
+++ /dev/null
@@ -1,15 +0,0 @@
-{
-    "extends": "../tsconfig-base",
-    "compilerOptions": {
-        "outDir": "../../built/local/dynamicImportCompat",
-        "rootDir": ".",
-        "target": "esnext",
-        "module": "esnext",
-        "lib": ["esnext"]
-    },
-    "files": [
-        "dynamicImportCompat.ts",
-        "_namespaces/ts.server.ts",
-        "_namespaces/ts.ts"
-    ]
-}
diff --git a/src/harness/fourslashImpl.ts b/src/harness/fourslashImpl.ts
index ff8de94c2e..ff4946a41f 100644
--- a/src/harness/fourslashImpl.ts
+++ b/src/harness/fourslashImpl.ts
@@ -4069,7 +4069,7 @@ export function runFourSlashTestContent(basePath: string, testType: FourSlashTes
 function runCode(code: string, state: TestState, fileName: string): void {
     // Compile and execute the test
     const generatedFile = ts.changeExtension(fileName, ".js");
-    const wrappedCode = `(function(test, goTo, plugins, verify, edit, debug, format, cancellation, classification, completion, verifyOperationIsCancelled) {${code}\n//# sourceURL=${ts.getBaseFileName(generatedFile)}\n})`;
+    const wrappedCode = `(function(ts, test, goTo, config, verify, edit, debug, format, cancellation, classification, completion, verifyOperationIsCancelled, ignoreInterpolations) {${code}\n//# sourceURL=${ts.getBaseFileName(generatedFile)}\n})`;
 
     type SourceMapSupportModule = typeof import("source-map-support") & {
         // TODO(rbuckton): This is missing from the DT definitions and needs to be added.
@@ -4103,8 +4103,8 @@ function runCode(code: string, state: TestState, fileName: string): void {
         const format = new FourSlashInterface.Format(state);
         const cancellation = new FourSlashInterface.Cancellation(state);
         // eslint-disable-next-line no-eval
-        const f = eval(wrappedCode);
-        f(test, goTo, config, verify, edit, debug, format, cancellation, FourSlashInterface.classification, FourSlashInterface.Completion, verifyOperationIsCancelled);
+        const f = (0, eval)(wrappedCode);
+        f(ts, test, goTo, config, verify, edit, debug, format, cancellation, FourSlashInterface.classification, FourSlashInterface.Completion, verifyOperationIsCancelled, ignoreInterpolations);
     }
     catch (err) {
         // ensure 'source-map-support' is triggered while we still have the handler attached by accessing `error.stack`.
diff --git a/src/server/scriptVersionCache.ts b/src/server/scriptVersionCache.ts
index 6c99b15ecb..13a2fbe6a0 100644
--- a/src/server/scriptVersionCache.ts
+++ b/src/server/scriptVersionCache.ts
@@ -255,16 +255,16 @@ class TextChange {
 
 /** @internal */
 export class ScriptVersionCache {
+    private static readonly changeNumberThreshold = 8;
+    private static readonly changeLengthThreshold = 256;
+    private static readonly maxVersions = 8;
+
     private changes: TextChange[] = [];
     private readonly versions: LineIndexSnapshot[] = new Array<LineIndexSnapshot>(ScriptVersionCache.maxVersions);
     private minVersion = 0; // no versions earlier than min version will maintain change history
 
     private currentVersion = 0;
 
-    private static readonly changeNumberThreshold = 8;
-    private static readonly changeLengthThreshold = 256;
-    private static readonly maxVersions = 8;
-
     private versionToIndex(version: number) {
         if (version < this.minVersion || version > this.currentVersion) {
             return undefined;
diff --git a/src/services/_namespaces/ts.ts b/src/services/_namespaces/ts.ts
index eae114fd2e..55fca06914 100644
--- a/src/services/_namespaces/ts.ts
+++ b/src/services/_namespaces/ts.ts
@@ -17,6 +17,7 @@ export * from "../transpile";
 export * from "../services";
 export * from "../transform";
 export * from "../shims";
+export * from "../globalThisShim";
 import * as BreakpointResolver from "./ts.BreakpointResolver";
 export { BreakpointResolver };
 import * as CallHierarchy from "./ts.CallHierarchy";
diff --git a/src/services/exportAsModule.ts b/src/services/exportAsModule.ts
deleted file mode 100644
index 757f9f7cd3..0000000000
--- a/src/services/exportAsModule.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import * as ts from "./_namespaces/ts";
-
-// Here we expose the TypeScript services as an external module
-// so that it may be consumed easily like a node module.
-// @ts-ignore
-/** @internal */ declare const module: { exports: {} };
-if (typeof module !== "undefined" && module.exports) {
-    module.exports = ts;
-}
diff --git a/src/services/services.ts b/src/services/services.ts
index 09600bc485..c2dc0e983e 100644
--- a/src/services/services.ts
+++ b/src/services/services.ts
@@ -484,9 +484,9 @@ class IdentifierObject extends TokenOrIdentifierObject implements Identifier {
 }
 IdentifierObject.prototype.kind = SyntaxKind.Identifier;
 class PrivateIdentifierObject extends TokenOrIdentifierObject implements PrivateIdentifier {
-    public kind!: SyntaxKind.PrivateIdentifier;
+    public kind: SyntaxKind.PrivateIdentifier = SyntaxKind.PrivateIdentifier;
     public escapedText!: __String;
-    public symbol!: Symbol;
+    // public symbol!: Symbol;
     _primaryExpressionBrand: any;
     _memberExpressionBrand: any;
     _leftHandSideExpressionBrand: any;
@@ -2922,18 +2922,14 @@ function isArgumentOfElementAccessExpression(node: Node) {
         (node.parent as ElementAccessExpression).argumentExpression === node;
 }
 
-/// getDefaultLibraryFilePath
-declare const __dirname: string;
-
 /**
  * Get the path of the default library files (lib.d.ts) as distributed with the typescript
  * node package.
  * The functionality is not supported if the ts module is consumed outside of a node module.
  */
 export function getDefaultLibFilePath(options: CompilerOptions): string {
-    // Check __dirname is defined and that we are on a node.js system.
-    if (typeof __dirname !== "undefined") {
-        return combinePaths(__dirname, getDefaultLibFileName(options));
+    if (ts.sys) {
+        return combinePaths(getDirectoryPath(normalizePath(ts.sys.getExecutingFilePath())), getDefaultLibFileName(options));
     }
 
     throw new Error("getDefaultLibFilePath is only supported when consumed as a node module. ");
diff --git a/src/services/tsconfig.json b/src/services/tsconfig.json
index f5341a81a7..b5ac304b33 100644
--- a/src/services/tsconfig.json
+++ b/src/services/tsconfig.json
@@ -136,7 +136,6 @@
         "transform.ts",
         "shims.ts",
         "globalThisShim.ts",
-        "exportAsModule.ts",
         "_namespaces/ts.BreakpointResolver.ts",
         "_namespaces/ts.ts",
         "_namespaces/ts.CallHierarchy.ts",
diff --git a/src/testRunner/_namespaces/Harness.ts b/src/testRunner/_namespaces/Harness.ts
index caf03e950a..602d83e412 100644
--- a/src/testRunner/_namespaces/Harness.ts
+++ b/src/testRunner/_namespaces/Harness.ts
@@ -11,3 +11,9 @@ export * from "../compilerRunner";
 export * from "../externalCompileRunner";
 export * from "../test262Runner";
 export * from "../runner";
+
+// If running as emitted CJS, don't start executing the tests here; instead start in runner.ts.
+// If running bundled, we want this to be here so that esbuild places the tests after runner.ts.
+if (!__filename.endsWith("Harness.js")) {
+    require("./tests");
+}
diff --git a/src/testRunner/runner.ts b/src/testRunner/runner.ts
index afce965527..28bfd96983 100644
--- a/src/testRunner/runner.ts
+++ b/src/testRunner/runner.ts
@@ -293,4 +293,11 @@ function startTestEnvironment() {
 startTestEnvironment();
 
 // This brings in all of the unittests.
-import "./_namespaces/tests";
+// NOTE: if emitting CJS, uncomment this, and comment out the one in Harness.ts.
+// import "./_namespaces/tests";
+
+// If running as emitted CJS, we want to start the tests here after startTestEnvironment.
+// If running bundled, we will do this in Harness.ts.
+if (__filename.endsWith("runner.js")) {
+    require("./_namespaces/tests");
+}
diff --git a/src/tsconfig-base.json b/src/tsconfig-base.json
index d3ece6a19d..c07487870f 100644
--- a/src/tsconfig-base.json
+++ b/src/tsconfig-base.json
@@ -10,6 +10,7 @@
         "sourceMap": true,
         "composite": true,
         "noEmitOnError": true,
+        "emitDeclarationOnly": true,
 
         "strictNullChecks": true,
         "noImplicitAny": true,
diff --git a/src/tsconfig.json b/src/tsconfig.json
index bb93273166..213e1eda3c 100644
--- a/src/tsconfig.json
+++ b/src/tsconfig.json
@@ -6,7 +6,6 @@
         { "path": "./compiler" },
         { "path": "./debug" },
         { "path": "./deprecatedCompat" },
-        { "path": "./dynamicImportCompat" },
         { "path": "./executeCommandLine" },
         { "path": "./harness" },
         { "path": "./jsTyping" },
diff --git a/src/tsserver/nodeServer.ts b/src/tsserver/nodeServer.ts
index de9b8a0ad6..4292b8cc02 100644
--- a/src/tsserver/nodeServer.ts
+++ b/src/tsserver/nodeServer.ts
@@ -13,7 +13,7 @@ import {
 import {
     ApplyCodeActionCommandResult, assertType, CharacterCodes, combinePaths, createQueue, Debug, directorySeparator,
     DirectoryWatcherCallback, ESMap, FileWatcher, getDirectoryPath, getEntries, getNodeMajorVersion, getRootLength,
-    JsTyping, LanguageServiceMode, Map, MapLike, noop, noopFileWatcher, normalizeSlashes, resolveJSModule,
+    JsTyping, LanguageServiceMode, Map, MapLike, noop, noopFileWatcher, normalizePath, normalizeSlashes, resolveJSModule,
     SortedReadonlyArray, startTracing, stripQuotes, sys, toFileNameLowerCase, tracing, TypeAcquisition,
     validateLocaleAndSetLanguage, versionMajorMinor, WatchOptions,
 } from "./_namespaces/ts";
@@ -193,6 +193,8 @@ export function initializeNodeSystem(): StartInput {
         }
     }
 
+    const libDirectory = getDirectoryPath(normalizePath(sys.getExecutingFilePath()));
+
     const nodeVersion = getNodeMajorVersion();
     // use watchGuard process on Windows when node version is 4 or later
     const useWatchGuard = process.platform === "win32" && nodeVersion! >= 4;
@@ -227,7 +229,7 @@ export function initializeNodeSystem(): StartInput {
                     logger.info(`${cacheKey} for path ${path} not found in cache...`);
                 }
                 try {
-                    const args = [combinePaths(__dirname, "watchGuard.js"), path];
+                    const args = [combinePaths(libDirectory, "watchGuard.js"), path];
                     if (logger.hasLevel(LogLevel.verbose)) {
                         logger.info(`Starting ${process.execPath} with args:${stringifyIndented(args)}`);
                     }
@@ -326,7 +328,7 @@ export function initializeNodeSystem(): StartInput {
         const unsubstitutedLogFileName = cmdLineLogFileName
             ? stripQuotes(cmdLineLogFileName)
             : envLogOptions.logToFile
-                ? envLogOptions.file || (__dirname + "/.log" + process.pid.toString())
+                ? envLogOptions.file || (libDirectory + "/.log" + process.pid.toString())
                 : undefined;
 
         const substitutedLogFileName = unsubstitutedLogFileName
@@ -526,8 +528,8 @@ function startNodeSession(options: StartSessionOptions, logger: Logger, cancella
                 }
             }
 
-            // TODO(jakebailey): fix this for module transform
-            this.installer = childProcess.fork(combinePaths(__dirname, "..", "typingsInstaller", "nodeTypingsInstaller.js"), args, { execArgv });
+            const typingsInstaller = combinePaths(getDirectoryPath(sys.getExecutingFilePath()), "typingsInstaller.js");
+            this.installer = childProcess.fork(typingsInstaller, args, { execArgv });
             this.installer.on("message", m => this.handleMessage(m));
 
             // We have to schedule this event to the next tick
diff --git a/src/typingsInstaller/nodeTypingsInstaller.ts b/src/typingsInstaller/nodeTypingsInstaller.ts
index f043e44a18..c1dd5d67b4 100644
--- a/src/typingsInstaller/nodeTypingsInstaller.ts
+++ b/src/typingsInstaller/nodeTypingsInstaller.ts
@@ -11,7 +11,7 @@ import {
 } from "./_namespaces/ts.server";
 import {
     combinePaths, createGetCanonicalFileName, Debug, ESMap, forEachAncestorDirectory, getDirectoryPath, getEntries, Map,
-    MapLike, normalizeSlashes, stringContains, sys, toPath, version,
+    MapLike, normalizePath, normalizeSlashes, stringContains, sys, toPath, version,
 } from "./_namespaces/ts";
 
 class FileLog implements Log {
@@ -89,11 +89,12 @@ export class NodeTypingsInstaller extends TypingsInstaller {
     private delayedInitializationError: InitializationFailedResponse | undefined;
 
     constructor(globalTypingsCacheLocation: string, typingSafeListLocation: string, typesMapLocation: string, npmLocation: string | undefined, validateDefaultNpmLocation: boolean, throttleLimit: number, log: Log) {
+        const libDirectory = getDirectoryPath(normalizePath(sys.getExecutingFilePath()));
         super(
             sys,
             globalTypingsCacheLocation,
-            typingSafeListLocation ? toPath(typingSafeListLocation, "", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath("typingSafeList.json", __dirname, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),
-            typesMapLocation ? toPath(typesMapLocation, "", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath("typesMap.json", __dirname, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),
+            typingSafeListLocation ? toPath(typingSafeListLocation, "", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath("typingSafeList.json", libDirectory, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),
+            typesMapLocation ? toPath(typesMapLocation, "", createGetCanonicalFileName(sys.useCaseSensitiveFileNames)) : toPath("typesMap.json", libDirectory, createGetCanonicalFileName(sys.useCaseSensitiveFileNames)),
             throttleLimit,
             log);
         this.npmPath = npmLocation !== undefined ? npmLocation : getDefaultNPMLocation(process.argv[0], validateDefaultNpmLocation, this.installTypingHost);
diff --git a/src/watchGuard/tsconfig.json b/src/watchGuard/tsconfig.json
index eb1607930c..2276c1ad14 100644
--- a/src/watchGuard/tsconfig.json
+++ b/src/watchGuard/tsconfig.json
@@ -1,7 +1,9 @@
 {
     "extends": "../tsconfig-base",
     "compilerOptions": {
-        "outDir": "../../built/local/watchGuard",
+        "outDir": "../../built/local",
+        "tsBuildInfoFile": "../../built/local/watchGuard.tsbuildinfo",
+        "rootDir": ".",
         "types": [
             "node"
         ],
diff --git a/src/webServer/webServer.ts b/src/webServer/webServer.ts
index 11980d1a0e..ba41fc8af5 100644
--- a/src/webServer/webServer.ts
+++ b/src/webServer/webServer.ts
@@ -1,8 +1,6 @@
 /// <reference lib="dom" />
 /// <reference lib="webworker.importscripts" />
 
-import * as server from "./_namespaces/ts.server";
-
 import {
     indent, Logger, LogLevel, ModuleImportResult, Msg, nowString, nullTypingsInstaller, protocol,
     ServerCancellationToken, ServerHost, Session, SessionOptions,
@@ -127,16 +125,11 @@ export class MainProcessLogger extends BaseLogger {
     }
 }
 
-// Attempt to load `dynamicImport`
-if (typeof importScripts === "function") {
-    try {
-        // NOTE: importScripts is synchronous
-        importScripts("dynamicImportCompat.js");
-    }
-    catch {
-        // ignored
-    }
-}
+/** @internal */
+// eslint-disable-next-line prefer-const
+export let dynamicImport = async (_id: string): Promise<any> => {
+    throw new Error("Dynamic import not implemented");
+};
 
 /** @internal */
 export function createWebSystem(host: WebHost, args: string[], getExecutingFilePath: () => string): ServerHost {
@@ -145,16 +138,6 @@ export function createWebSystem(host: WebHost, args: string[], getExecutingFileP
     // Later we could map ^memfs:/ to do something special if we want to enable more functionality like module resolution or something like that
     const getWebPath = (path: string) => startsWith(path, directorySeparator) ? path.replace(directorySeparator, getExecutingDirectoryPath()) : undefined;
 
-    const dynamicImport = async (id: string): Promise<any> => {
-        const serverDynamicImport: ((id: string) => Promise<any>) | undefined = (server as any).dynamicImport;
-        // Use syntactic dynamic import first, if available
-        if (serverDynamicImport) {
-            return serverDynamicImport(id);
-        }
-
-        throw new Error("Dynamic import not implemented");
-    };
-
     return {
         args,
         newLine: "\r\n", // This can be configured by clients
-- 
2.38.0

