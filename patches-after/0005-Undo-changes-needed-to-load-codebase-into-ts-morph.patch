From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Mon, 3 Oct 2022 16:32:12 -0700
Subject: [PATCH] Undo changes needed to load codebase into ts-morph

---
 src/compiler/factory/nodeFactory.ts | 8 ++++----
 src/tsserver/webServer.ts           | 8 ++------
 src/webServer/webServer.ts          | 7 ++++---
 3 files changed, 10 insertions(+), 13 deletions(-)

diff --git a/src/compiler/factory/nodeFactory.ts b/src/compiler/factory/nodeFactory.ts
index b4b7c4e1cc..a643904151 100644
--- a/src/compiler/factory/nodeFactory.ts
+++ b/src/compiler/factory/nodeFactory.ts
@@ -48,7 +48,7 @@ import {
     JsxAttributeValue, JsxChild, JsxClosingElement, JsxClosingFragment, JsxElement, JsxExpression, JsxFragment,
     JsxOpeningElement, JsxOpeningFragment, JsxSelfClosingElement, JsxSpreadAttribute, JsxTagNameExpression, JsxText,
     KeywordSyntaxKind, KeywordToken, KeywordTypeNode, KeywordTypeSyntaxKind, LabeledStatement, LanguageVariant,
-    lastOrUndefined, LeftHandSideExpression, LiteralToken, LiteralTypeNode, map, Map, MappedTypeNode, MemberName,
+    lastOrUndefined, LeftHandSideExpression, LiteralToken, LiteralTypeNode, map, Map, MappedTypeNode,
     memoize, memoizeOne, MergeDeclarationMarker, MetaProperty, MethodDeclaration, MethodSignature, MinusToken,
     MissingDeclaration, Modifier, ModifierFlags, ModifierLike, modifiersToFlags, ModifierSyntaxKind, ModifierToken,
     ModuleBlock, ModuleBody, ModuleDeclaration, ModuleKind, ModuleName, ModuleReference, Mutable, MutableNodeArray,
@@ -249,11 +249,11 @@ export function createNodeFactory(flags: NodeFactoryFlags, baseFactory: BaseNode
         createObjectLiteralExpression,
         updateObjectLiteralExpression,
         createPropertyAccessExpression: flags & NodeFactoryFlags.NoIndentationOnFreshPropertyAccess ?
-            (expression: Expression, name: string | MemberName) => setEmitFlags(createPropertyAccessExpression(expression, name), EmitFlags.NoIndentation) :
+            (expression, name) => setEmitFlags(createPropertyAccessExpression(expression, name), EmitFlags.NoIndentation) :
             createPropertyAccessExpression,
         updatePropertyAccessExpression,
         createPropertyAccessChain: flags & NodeFactoryFlags.NoIndentationOnFreshPropertyAccess ?
-        (expression: Expression, questionDotToken: QuestionDotToken | undefined, name: string | MemberName) => setEmitFlags(createPropertyAccessChain(expression, questionDotToken, name), EmitFlags.NoIndentation) :
+            (expression, questionDotToken, name: string) => setEmitFlags(createPropertyAccessChain(expression, questionDotToken, name), EmitFlags.NoIndentation) :
             createPropertyAccessChain,
         updatePropertyAccessChain,
         createElementAccessExpression,
@@ -622,7 +622,7 @@ export function createNodeFactory(flags: NodeFactoryFlags, baseFactory: BaseNode
         liftToBlock,
         mergeLexicalEnvironment,
         updateModifiers,
-    } as any;
+    };
 
     forEach(nodeFactoryPatchers, fn => fn(factory));
 
diff --git a/src/tsserver/webServer.ts b/src/tsserver/webServer.ts
index ed941f59b7..712baecea0 100644
--- a/src/tsserver/webServer.ts
+++ b/src/tsserver/webServer.ts
@@ -1,3 +1,5 @@
+/// <reference lib="webworker" />
+
 import * as ts from "./_namespaces/ts";
 import * as server from "./_namespaces/ts.server";
 import {
@@ -8,12 +10,6 @@ import {
     Debug, LanguageServiceMode, LogLevel, noop, returnFalse, returnUndefined, setSys, sys, validateLocaleAndSetLanguage,
 } from "./_namespaces/ts";
 
-declare const addEventListener: any;
-declare const postMessage: any;
-declare const close: any;
-declare const location: any;
-declare const XMLHttpRequest: any;
-declare const self: any;
 
 const nullLogger: Logger = {
     close: noop,
diff --git a/src/webServer/webServer.ts b/src/webServer/webServer.ts
index e7ed996016..c50019081d 100644
--- a/src/webServer/webServer.ts
+++ b/src/webServer/webServer.ts
@@ -1,4 +1,8 @@
+/// <reference lib="dom" />
+/// <reference lib="webworker.importscripts" />
+
 import * as server from "./_namespaces/ts.server";
+
 import {
     indent, Logger, LogLevel, ModuleImportResult, Msg, nowString, nullTypingsInstaller, protocol,
     ServerCancellationToken, ServerHost, Session, SessionOptions,
@@ -8,9 +12,6 @@ import {
     notImplemented, perfLogger, returnFalse, returnNoopFileWatcher, startsWith,
 } from "./_namespaces/ts";
 
-declare const fetch: any;
-declare const importScripts: any;
-
 /** @internal */
 export interface HostWithWriteMessage {
     writeMessage(s: any): void;
-- 
2.38.1

