From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Thu, 15 Sep 2022 22:42:31 -0700
Subject: [PATCH] Eliminate exportAsModule.ts

---
 Gulpfile.js                            |  3 ++-
 src/services/_namespaces/ts.ts         |  1 -
 src/services/exportAsModule.ts         | 21 ---------------------
 src/services/tsconfig.json             |  1 -
 src/tsserverlibrary/tsserverlibrary.ts |  9 ++++++++-
 src/typescript/typescript.ts           | 19 ++++++++++++-------
 6 files changed, 22 insertions(+), 32 deletions(-)
 delete mode 100644 src/services/exportAsModule.ts

diff --git a/Gulpfile.js b/Gulpfile.js
index da3663bba9..08a054313d 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -180,9 +180,10 @@ function esbuildTask(entrypoint, outfile) {
             "object-rest-spread": false, // See: https://github.com/evanw/esbuild/releases/tag/v0.14.46
         },
         // legalComments: "none", // TODO(jakebailey): enable once we add copyright headers to our source files.
-        logLevel: "info",
+        // logLevel: "info",
     };
 
+    // TODO: these need to have better function names, for gulp.
     return {
         build: () => esbuild.build(options),
         clean: () => del([outfile, `${outfile}.map`]),
diff --git a/src/services/_namespaces/ts.ts b/src/services/_namespaces/ts.ts
index fe17bc06d1..55fca06914 100644
--- a/src/services/_namespaces/ts.ts
+++ b/src/services/_namespaces/ts.ts
@@ -18,7 +18,6 @@ export * from "../services";
 export * from "../transform";
 export * from "../shims";
 export * from "../globalThisShim";
-export * from "../exportAsModule";
 import * as BreakpointResolver from "./ts.BreakpointResolver";
 export { BreakpointResolver };
 import * as CallHierarchy from "./ts.CallHierarchy";
diff --git a/src/services/exportAsModule.ts b/src/services/exportAsModule.ts
deleted file mode 100644
index eb6e51fa9c..0000000000
--- a/src/services/exportAsModule.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-import * as ts from "./_namespaces/ts";
-
-// Here we expose the TypeScript services as an external module
-// so that it may be consumed easily like a node module.
-// @ts-ignore
-// /** @internal */ declare const module: { exports: {} };
-// if (typeof module !== "undefined" && module.exports) {
-//     module.exports = ts;
-// }
-
-// If we are bundled with esbuild via IIFE, this is a hacky way to jump out of
-// its module system and conditionally export to CJS in the bundle.
-//
-// We may want to do something different for this.
-
-// eslint-disable-next-line no-eval
-// eval("(ts) => { if (typeof module !== 'undefined' && module.exports) module.exports = ts }")(ts);
-
-// TODO(jakebailey): remove; this is just here and ignored for now.
-// eslint-disable-next-line @typescript-eslint/no-unused-expressions
-ts;
diff --git a/src/services/tsconfig.json b/src/services/tsconfig.json
index eec6262c0f..8c57f662a7 100644
--- a/src/services/tsconfig.json
+++ b/src/services/tsconfig.json
@@ -134,7 +134,6 @@
         "transform.ts",
         "shims.ts",
         "globalThisShim.ts",
-        "exportAsModule.ts",
         "_namespaces/ts.BreakpointResolver.ts",
         "_namespaces/ts.ts",
         "_namespaces/ts.CallHierarchy.ts",
diff --git a/src/tsserverlibrary/tsserverlibrary.ts b/src/tsserverlibrary/tsserverlibrary.ts
index caa2e6b1db..30f95d5667 100644
--- a/src/tsserverlibrary/tsserverlibrary.ts
+++ b/src/tsserverlibrary/tsserverlibrary.ts
@@ -1 +1,8 @@
-export * from "./_namespaces/ts";
+import ts = require("./_namespaces/ts");
+
+// esbuild compatible way of conditionally exporting; for non-node compatibility.
+
+/** @internal */ declare const module: { exports: {} };
+if (typeof module !== "undefined" && module.exports) {
+    module.exports = ts;
+}
diff --git a/src/typescript/typescript.ts b/src/typescript/typescript.ts
index 8a5136a1eb..e91ffe49ec 100644
--- a/src/typescript/typescript.ts
+++ b/src/typescript/typescript.ts
@@ -1,18 +1,23 @@
-import { Debug, LogLevel } from "./_namespaces/ts";
+import ts = require("./_namespaces/ts");
 
 // enable deprecation logging
 declare const console: any;
 if (typeof console !== "undefined") {
-    Debug.loggingHost = {
+    ts.Debug.loggingHost = {
         log(level, s) {
             switch (level) {
-                case LogLevel.Error: return console.error(s);
-                case LogLevel.Warning: return console.warn(s);
-                case LogLevel.Info: return console.log(s);
-                case LogLevel.Verbose: return console.log(s);
+                case ts.LogLevel.Error: return console.error(s);
+                case ts.LogLevel.Warning: return console.warn(s);
+                case ts.LogLevel.Info: return console.log(s);
+                case ts.LogLevel.Verbose: return console.log(s);
             }
         }
     };
 }
 
-export * from "./_namespaces/ts";
+// esbuild compatible way of conditionally exporting; for non-node compatibility.
+
+/** @internal */ declare const module: { exports: {} };
+if (typeof module !== "undefined" && module.exports) {
+    module.exports = ts;
+}
-- 
2.37.3

