From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Tue, 13 Sep 2022 16:21:03 -0700
Subject: [PATCH] Add build via esbuild

This configures the existing build tasks to use esbuild by defualt. If
using the plain files is desired, passing `--bundle=false` will build
using plain files and still produce a runnable system.
---
 Gulpfile.js                                   | 362 ++++++-----
 package-lock.json                             | 574 ++++++++++++++++++
 package.json                                  |   1 +
 scripts/build/options.js                      |  11 +-
 scripts/build/prepend.js                      |  64 --
 scripts/build/projects.js                     |  54 +-
 scripts/build/tests.js                        |  22 +-
 scripts/build/utils.js                        |  85 ---
 scripts/produceLKG.ts                         |   1 -
 src/cancellationToken/tsconfig.json           |   4 +-
 src/compiler/debug.ts                         |   2 +-
 src/compiler/sys.ts                           |  21 +-
 src/debug/_namespaces/Debug.ts                |   3 -
 src/debug/{dbg.ts => compilerDebug.ts}        |  10 -
 src/debug/tsconfig.json                       |   7 +-
 .../_namespaces/ts.server.ts                  |   3 -
 src/dynamicImportCompat/_namespaces/ts.ts     |   4 -
 .../dynamicImportCompat.ts                    |   1 -
 src/dynamicImportCompat/tsconfig.json         |  15 -
 src/harness/fourslashImpl.ts                  |   6 +-
 src/server/scriptVersionCache.ts              |   8 +-
 src/services/_namespaces/ts.ts                |   1 +
 src/services/exportAsModule.ts                |   9 -
 src/services/services.ts                      |   4 +-
 src/services/tsconfig.json                    |   1 -
 src/testRunner/_namespaces/Harness.ts         |   6 +
 src/testRunner/runner.ts                      |   9 +-
 src/tsconfig-base.json                        |   1 +
 src/tsconfig.json                             |   1 -
 src/tsserver/nodeServer.ts                    |   5 +-
 src/watchGuard/tsconfig.json                  |   4 +-
 src/watchGuard/watchGuard.ts                  |   2 +-
 src/webServer/webServer.ts                    |  26 +-
 33 files changed, 868 insertions(+), 459 deletions(-)
 delete mode 100644 scripts/build/prepend.js
 delete mode 100644 src/debug/_namespaces/Debug.ts
 rename src/debug/{dbg.ts => compilerDebug.ts} (95%)
 delete mode 100644 src/dynamicImportCompat/_namespaces/ts.server.ts
 delete mode 100644 src/dynamicImportCompat/_namespaces/ts.ts
 delete mode 100644 src/dynamicImportCompat/dynamicImportCompat.ts
 delete mode 100644 src/dynamicImportCompat/tsconfig.json
 delete mode 100644 src/services/exportAsModule.ts

diff --git a/Gulpfile.js b/Gulpfile.js
index 4f5178e7d0..080691c505 100644
--- a/Gulpfile.js
+++ b/Gulpfile.js
@@ -3,23 +3,49 @@ const path = require("path");
 const fs = require("fs");
 const log = require("fancy-log");
 const newer = require("gulp-newer");
-const sourcemaps = require("gulp-sourcemaps");
 const del = require("del");
 const rename = require("gulp-rename");
 const concat = require("gulp-concat");
 const merge2 = require("merge2");
 const { src, dest, task, parallel, series, watch } = require("gulp");
-const { append, transform } = require("gulp-insert");
-const { prependFile } = require("./scripts/build/prepend");
+const { transform } = require("gulp-insert");
 const { exec, readJson, needsUpdate, getDiffTool, getDirSize, rm } = require("./scripts/build/utils");
 const { runConsoleTests, refBaseline, localBaseline, refRwcBaseline, localRwcBaseline } = require("./scripts/build/tests");
-const { buildProject, cleanProject, watchProject } = require("./scripts/build/projects");
+const { buildProject: realBuildProject, cleanProject, watchProject } = require("./scripts/build/projects");
 const cmdLineOptions = require("./scripts/build/options");
+const esbuild = require("esbuild");
 
 const copyright = "CopyrightNotice.txt";
 const cleanTasks = [];
 
-const testRunner = "./built/local/testRunner/runner.js";
+
+// TODO(jakebailey): This is really gross. Waiting on: https://github.com/microsoft/TypeScript/issues/25613
+let currentlyBuilding = 0;
+let oldTsconfigBase;
+
+/** @type {typeof realBuildProject} */
+const buildProjectWithEmit = async (...args) => {
+    const tsconfigBasePath = "./src/tsconfig-base.json";
+
+    if (currentlyBuilding === 0) {
+        oldTsconfigBase = fs.readFileSync(tsconfigBasePath, "utf-8");
+        fs.writeFileSync(tsconfigBasePath, oldTsconfigBase.replace(`"emitDeclarationOnly": true`, `"emitDeclarationOnly": false`));
+    }
+
+    currentlyBuilding++;
+
+    await realBuildProject(...args);
+
+    currentlyBuilding--;
+
+    if (currentlyBuilding === 0) {
+        fs.writeFileSync(tsconfigBasePath, oldTsconfigBase);
+    }
+};
+
+
+const buildProject = cmdLineOptions.bundle ? realBuildProject : buildProjectWithEmit;
+
 
 const buildScripts = () => buildProject("scripts");
 task("scripts", buildScripts);
@@ -94,27 +120,115 @@ const localize = async () => {
     }
 };
 
-const buildAll = () => buildProject("src");
+const preSrc = parallel(generateLibs, series(buildScripts, generateDiagnostics, localize));
+const buildSrc = () => buildProject("src");
+
+// TODO(jakebailey): when should we run this? it's nice to have tests run quickly, but we also want to know if the code is broken.
+// But, if we are bundling, we are running only d.ts emit, so maybe this is fast?
+task("build-src", series(preSrc, buildSrc));
+
+/** @type {string | undefined} */
+let copyrightHeader;
+function getCopyrightHeader() {
+    if (copyrightHeader === undefined) {
+        copyrightHeader = fs.readFileSync(copyright, "utf-8");
+    }
+    return copyrightHeader;
+}
+
+/**
+ * @param {string} entrypoint
+ * @param {string} outfile
+ * @param {boolean} exportIsTsObject True if this file exports the TS object and should have relevant code injected.
+ */
+function esbuildTask(entrypoint, outfile, exportIsTsObject = false) {
+    /** @type {esbuild.BuildOptions} */
+    const options = {
+        entryPoints: [entrypoint],
+        banner: { js: getCopyrightHeader() },
+        bundle: true,
+        outfile,
+        platform: "node",
+        // TODO: also specify minimal browser targets
+        target: "node10", // Node 10 is the oldest benchmarker.
+        format: "cjs",
+        sourcemap: true,
+        external: ["./node_modules/*"], // TODO(jakebailey): does the test runner import relatively from scripts?
+        conditions: ["require"],
+        supported: {
+            // "const-and-let": false, // Unfortunately, no: https://github.com/evanw/esbuild/issues/297
+            "object-rest-spread": false, // See: https://github.com/evanw/esbuild/releases/tag/v0.14.46
+        },
+        // legalComments: "none", // TODO(jakebailey): enable once we add copyright headers to our source files.
+        // logLevel: "info",
+    };
+
+    if (exportIsTsObject) {
+        options.format = "iife"; // We use an IIFE so we can inject the code below.
+        options.globalName = "ts"; // Name the variable ts, matching our old big bundle and so we can use the code below.
+        options.footer = {
+            // These snippets cannot appear in the actual source files, otherwise they will be rewritten
+            // to things like exports or requires.
+            js: `
+                if (typeof module !== "undefined" && module.exports) {
+                    // If we are in a CJS context, export the ts namespace.
+                    module.exports = ts;
+                }
+                if (ts.server) {
+                    // If we are in a server bundle, inject the dynamicImport function.
+                    ts.server.dynamicImport = id => import(id);
+                }
+            `
+        };
+    }
 
-task("moduleBuild", parallel(generateLibs, series(buildScripts, localize, buildAll)));
+    return {
+        build: () => esbuild.build(options),
+        clean: () => del([outfile, `${outfile}.map`]),
+        watch: () => esbuild.build({ ...options, watch: true }),
+    };
+}
 
-const buildDebugTools = () => buildProject("src/debug");
-const cleanDebugTools = () => cleanProject("src/debug");
+/**
+ * Writes a CJS module that reexports another CJS file via
+ * `module.exports = require("...")`.
+ *
+ * @param {string} infile Relative path from the repo root to the file to be required.
+ * @param {string} outfile Relative path from the repo root to the output file.
+ */
+function writeCJSReexport(infile, outfile) {
+    const inRelativeToOut = infile = path.relative(path.dirname(outfile), infile);
+    fs.writeFileSync(outfile, `module.exports = require("./${inRelativeToOut}")`);
+}
+
+const esbuildDebugTools = esbuildTask("./src/debug/compilerDebug.ts", "./built/local/compilerDebug.js");
+
+const buildDebugTools = () => cmdLineOptions.bundle ? esbuildDebugTools.build() : buildProject("src/debug");
+const cleanDebugTools = () => cmdLineOptions.bundle ? esbuildDebugTools.build() : cleanProject("src/debug");
 cleanTasks.push(cleanDebugTools);
 
 // Pre-build steps when targeting the LKG compiler
 const lkgPreBuild = parallel(generateLibs, series(buildScripts, generateDiagnostics, buildDebugTools));
 
-const buildTsc = () => buildProject("src/tsc");
+
+const esbuildTsc = esbuildTask("./src/tsc/tsc.ts", "./built/local/tsc.js", /* exportIsTsObject */ true);
+
+
+const buildTsc = () => {
+    if (cmdLineOptions.bundle) return esbuildTsc.build();
+    writeCJSReexport("./built/local/tsc/tsc.js", "./built/local/tsc.js");
+    return buildProject("src/tsc");
+};
 task("tsc", series(lkgPreBuild, buildTsc));
 task("tsc").description = "Builds the command-line compiler";
 
-const cleanTsc = () => cleanProject("src/tsc");
+const cleanTsc = () => cmdLineOptions.bundle ? esbuildTsc.clean() : cleanProject("src/tsc");
 cleanTasks.push(cleanTsc);
 task("clean-tsc", cleanTsc);
 task("clean-tsc").description = "Cleans outputs for the command-line compiler";
 
-const watchTsc = () => watchProject("src/tsc");
+// TODO(jakebailey): watch mode doesn't mix with --bundle=false.
+const watchTsc = () => cmdLineOptions.bundle ? esbuildTsc.watch() : watchProject("src/tsc");
 task("watch-tsc", series(lkgPreBuild, parallel(watchLib, watchDiagnostics, watchTsc)));
 task("watch-tsc").description = "Watch for changes and rebuild the command-line compiler only.";
 
@@ -124,107 +238,43 @@ const localPreBuild = parallel(generateLibs, series(buildScripts, generateDiagno
 // Pre-build steps to use based on supplied options.
 const preBuild = cmdLineOptions.lkg ? lkgPreBuild : localPreBuild;
 
-const buildServices = (() => {
-    // TODO(jakebailey): fix this for modules
-    return cb => {
-        console.log("!!!TODO!!! buildServices");
-        cb();
-    };
+const esbuildServices = esbuildTask("./src/typescript/typescript.ts", "./built/local/typescript.js", /* exportIsTsObject */ true);
+
+// TODO(jakebailey): rename this; no longer "services".
+const buildServices = () => {
+    if (cmdLineOptions.bundle) return esbuildServices.build();
+    writeCJSReexport("./built/local/typescript/typescript.js", "./built/local/typescript.js");
+    return buildProject("src/typescript");
+};
 
-    // build typescriptServices.out.js
-    const buildTypescriptServicesOut = () => buildProject("src/typescriptServices/tsconfig.json", cmdLineOptions);
-
-    // create typescriptServices.js
-    const createTypescriptServicesJs = () => src("built/local/typescriptServices.out.js")
-        .pipe(newer("built/local/typescriptServices.js"))
-        .pipe(sourcemaps.init({ loadMaps: true }))
-        .pipe(prependFile(copyright))
-        .pipe(rename("typescriptServices.js"))
-        .pipe(sourcemaps.write(".", { includeContent: false, destPath: "built/local" }))
-        .pipe(dest("built/local"));
-
-    // create typescriptServices.d.ts
-    const createTypescriptServicesDts = () => src("built/local/typescriptServices.out.d.ts")
-        .pipe(newer("built/local/typescriptServices.d.ts"))
-        .pipe(prependFile(copyright))
-        .pipe(transform(content => content.replace(/^(\s*)(export )?const enum (\S+) {(\s*)$/gm, "$1$2enum $3 {$4")))
-        .pipe(rename("typescriptServices.d.ts"))
-        .pipe(dest("built/local"));
-
-    // create typescript.js
-    const createTypescriptJs = () => src("built/local/typescriptServices.js")
-        .pipe(newer("built/local/typescript.js"))
-        .pipe(sourcemaps.init({ loadMaps: true }))
-        .pipe(rename("typescript.js"))
-        .pipe(sourcemaps.write(".", { includeContent: false, destPath: "built/local" }))
-        .pipe(dest("built/local"));
-
-    // create typescript.d.ts
-    const createTypescriptDts = () => src("built/local/typescriptServices.d.ts")
-        .pipe(newer("built/local/typescript.d.ts"))
-        .pipe(append("\nexport = ts;"))
-        .pipe(rename("typescript.d.ts"))
-        .pipe(dest("built/local"));
-
-    // // create typescript_standalone.d.ts
-    // const createTypescriptStandaloneDts = () => src("built/local/typescriptServices.d.ts")
-    //     .pipe(newer("built/local/typescript_standalone.d.ts"))
-    //     .pipe(transform(content => content.replace(/declare (namespace|module) ts/g, 'declare module "typescript"')))
-    //     .pipe(rename("typescript_standalone.d.ts"))
-    //     .pipe(dest("built/local"));
-
-    return series(
-        buildTypescriptServicesOut,
-        createTypescriptServicesJs,
-        createTypescriptServicesDts,
-        createTypescriptJs,
-        createTypescriptDts,
-        // createTypescriptStandaloneDts,
-    );
-})();
 task("services", series(preBuild, buildServices));
 task("services").description = "Builds the language service";
 task("services").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const cleanServices = async () => {
-    if (fs.existsSync("built/local/typescriptServices.tsconfig.json")) {
-        await cleanProject("built/local/typescriptServices.tsconfig.json");
-    }
-    await del([
-        "built/local/typescriptServices.out.js",
-        "built/local/typescriptServices.out.d.ts",
-        "built/local/typescriptServices.out.tsbuildinfo",
-        "built/local/typescriptServices.js",
-        "built/local/typescript.js",
-        "built/local/typescript.d.ts",
-        "built/local/typescript_standalone.d.ts"
-    ]);
-};
+const cleanServices = () => cmdLineOptions.bundle ? esbuildServices.clean() : cleanProject("src/typescript");
+
 cleanTasks.push(cleanServices);
 task("clean-services", cleanServices);
 task("clean-services").description = "Cleans outputs for the language service";
 
-const watchServices = () => watch([
-    "src/compiler/tsconfig.json",
-    "src/compiler/**/*.ts",
-    "src/jsTyping/tsconfig.json",
-    "src/jsTyping/**/*.ts",
-    "src/services/tsconfig.json",
-    "src/services/**/*.ts",
-], series(preBuild, buildServices));
+// TODO(jakebailey): watch mode doesn't mix with --bundle=false.
+const watchServices = () => cmdLineOptions.bundle ? esbuildServices.watch() : watchProject("src/typescript");
 task("watch-services", series(preBuild, parallel(watchLib, watchDiagnostics, watchServices)));
 task("watch-services").description = "Watches for changes and rebuild language service only";
 task("watch-services").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const buildDynamicImportCompat = () => buildProject("src/dynamicImportCompat", cmdLineOptions);
-task("dynamicImportCompat", buildDynamicImportCompat);
 
-const buildServerMain = () => buildProject("src/tsserver", cmdLineOptions);
-const buildServer = series(buildDynamicImportCompat, buildServerMain);
+const esbuildServer = esbuildTask("./src/tsserver/server.ts", "./built/local/tsserver.js", /* exportIsTsObject */ true);
+
+const buildServer = () => {
+    if (cmdLineOptions.bundle) return esbuildServer.build();
+    writeCJSReexport("./built/local/tsserver/server.js", "./built/local/tsserver.js");
+    return buildProject("src/tsserver");
+};
 buildServer.displayName = "buildServer";
 task("tsserver", series(preBuild, buildServer));
 task("tsserver").description = "Builds the language server";
@@ -232,17 +282,15 @@ task("tsserver").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const cleanDynamicImportCompat = () => cleanProject("src/dynamicImportCompat");
-const cleanServerMain = () => cleanProject("src/tsserver");
-const cleanServer = series(cleanDynamicImportCompat, cleanServerMain);
+const cleanServer = () => cmdLineOptions.bundle ? esbuildServer.clean() : cleanProject("src/tsserver");
 cleanServer.displayName = "cleanServer";
 cleanTasks.push(cleanServer);
 task("clean-tsserver", cleanServer);
 task("clean-tsserver").description = "Cleans outputs for the language server";
 
-const watchDynamicImportCompat = () => watchProject("src/dynamicImportCompat", cmdLineOptions);
-const watchServer = () => watchProject("src/tsserver", cmdLineOptions);
-task("watch-tsserver", series(preBuild, parallel(watchLib, watchDiagnostics, watchDynamicImportCompat, watchServer)));
+// TODO(jakebailey): watch mode doesn't mix with --bundle=false.
+const watchServer = () => cmdLineOptions.bundle ? esbuildServer.watch() : watchProject("src/tsserver");
+task("watch-tsserver", series(preBuild, parallel(watchLib, watchDiagnostics, watchServer)));
 task("watch-tsserver").description = "Watch for changes and rebuild the language server only";
 task("watch-tsserver").flags = {
     "   --built": "Compile using the built version of the compiler."
@@ -270,88 +318,52 @@ const buildLssl = (() => {
         cb();
     };
 
-    // build tsserverlibrary.out.js
-    const buildServerLibraryOut = () => buildProject("src/tsserverlibrary/tsconfig.json", cmdLineOptions);
-
-    // create tsserverlibrary.js
-    const createServerLibraryJs = () => src("built/local/tsserverlibrary.out.js")
-        .pipe(newer("built/local/tsserverlibrary.js"))
-        .pipe(sourcemaps.init({ loadMaps: true }))
-        .pipe(prependFile(copyright))
-        .pipe(rename("tsserverlibrary.js"))
-        .pipe(sourcemaps.write(".", { includeContent: false, destPath: "built/local" }))
-        .pipe(dest("built/local"));
-
-    // create tsserverlibrary.d.ts
-    const createServerLibraryDts = () => src("built/local/tsserverlibrary.out.d.ts")
-        .pipe(newer("built/local/tsserverlibrary.d.ts"))
-        .pipe(prependFile(copyright))
-        .pipe(transform(content => content.replace(/^(\s*)(export )?const enum (\S+) {(\s*)$/gm, "$1$2enum $3 {$4")))
-        .pipe(append("\nexport = ts;\nexport as namespace ts;"))
-        .pipe(rename("tsserverlibrary.d.ts"))
-        .pipe(dest("built/local"));
-
-    return series(
-        buildServerLibraryOut,
-        createServerLibraryJs,
-        createServerLibraryDts,
-    );
-})();
+const buildLssl = () => {
+    if (cmdLineOptions.bundle) return esbuildLssl.build();
+    writeCJSReexport("./built/local/tsserverlibrary/tsserverlibrary.js", "./built/local/tsserverlibrary.js");
+    return buildProject("src/tsserverlibrary");
+};
 task("lssl", series(preBuild, buildLssl));
 task("lssl").description = "Builds language service server library";
 task("lssl").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const cleanLssl = async () => {
-    if (fs.existsSync("built/local/tsserverlibrary.tsconfig.json")) {
-        await cleanProject("built/local/tsserverlibrary.tsconfig.json");
-    }
-    await del([
-        "built/local/tsserverlibrary.out.js",
-        "built/local/tsserverlibrary.out.d.ts",
-        "built/local/tsserverlibrary.out.tsbuildinfo",
-        "built/local/tsserverlibrary.js",
-        "built/local/tsserverlibrary.d.ts",
-    ]);
-};
+const cleanLssl = () => cmdLineOptions.bundle ? esbuildLssl.clean() : cleanProject("src/tsserverlibrary");
 cleanTasks.push(cleanLssl);
 task("clean-lssl", cleanLssl);
 task("clean-lssl").description = "Clean outputs for the language service server library";
 
-const watchLssl = () => watch([
-    "src/compiler/tsconfig.json",
-    "src/compiler/**/*.ts",
-    "src/jsTyping/tsconfig.json",
-    "src/jsTyping/**/*.ts",
-    "src/services/tsconfig.json",
-    "src/services/**/*.ts",
-    "src/server/tsconfig.json",
-    "src/server/**/*.ts",
-    "src/webServer/tsconfig.json",
-    "src/webServer/**/*.ts",
-    "src/tsserver/tsconfig.json",
-    "src/tsserver/**/*.ts",
-], buildLssl);
+// TODO(jakebailey): watch mode doesn't mix with --bundle=false.
+const watchLssl = () => cmdLineOptions.bundle ? esbuildLssl.watch() : watchProject("src/tsserverlibrary");
+
 task("watch-lssl", series(preBuild, parallel(watchLib, watchDiagnostics, watchLssl)));
 task("watch-lssl").description = "Watch for changes and rebuild tsserverlibrary only";
 task("watch-lssl").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const buildTests = () => buildProject("src/testRunner");
+const testRunner = "./built/local/run.js";
+const esbuildTests = esbuildTask("./src/testRunner/_namespaces/Harness.ts", testRunner);
+
+const buildTests = () => {
+    if (cmdLineOptions.bundle) return esbuildTests.build();
+    writeCJSReexport("./built/local/testRunner/runner.js", testRunner);
+    return buildProject("src/testRunner");
+};
 task("tests", series(preBuild, parallel(buildLssl, buildTests)));
 task("tests").description = "Builds the test infrastructure";
 task("tests").flags = {
     "   --built": "Compile using the built version of the compiler."
 };
 
-const cleanTests = () => cleanProject("src/testRunner");
+const cleanTests = () => cmdLineOptions.bundle ? esbuildTests.clean() : cleanProject("src/testRunner");
 cleanTasks.push(cleanTests);
 task("clean-tests", cleanTests);
 task("clean-tests").description = "Cleans the outputs for the test infrastructure";
 
-const watchTests = () => watchProject("src/testRunner", cmdLineOptions);
+// TODO(jakebailey): watch mode doesn't mix with --bundle=false.
+const watchTests = () => cmdLineOptions.bundle ? esbuildTests.watch() : watchProject("src/testRunner");
 
 const buildEslintRules = () => buildProject("scripts/eslint");
 task("build-eslint-rules", buildEslintRules);
@@ -391,16 +403,30 @@ lint.displayName = "lint";
 task("lint", lint);
 task("lint").description = "Runs eslint on the compiler and scripts sources.";
 
-const buildCancellationToken = () => buildProject("src/cancellationToken");
-const cleanCancellationToken = () => cleanProject("src/cancellationToken");
+
+const esbuildCancellationToken = esbuildTask("./src/cancellationToken/cancellationToken.ts", "./built/local/cancellationToken.js");
+
+// No need for writeCJSReexport, this outputs to the right place.
+const buildCancellationToken = () => cmdLineOptions.bundle ? esbuildCancellationToken.build() : buildProject("src/cancellationToken");
+const cleanCancellationToken = () => cmdLineOptions.bundle ? esbuildCancellationToken.clean() : cleanProject("src/cancellationToken");
 cleanTasks.push(cleanCancellationToken);
 
-const buildTypingsInstaller = () => buildProject("src/typingsInstaller");
-const cleanTypingsInstaller = () => cleanProject("src/typingsInstaller");
+const esbuildTypingsInstaller = esbuildTask("./src/typingsInstaller/nodeTypingsInstaller.ts", "./built/local/typingsInstaller.js");
+
+const buildTypingsInstaller = () => {
+    if (cmdLineOptions.bundle) return esbuildTypingsInstaller.build();
+    // TODO(jakebailey): In --bundle=false, can we emit to this directly?
+    writeCJSReexport("./built/typingsInstaller/nodeTypingsInstaller.js", "./built/local/typingsInstaller.js");
+    return buildProject("src/typingsInstaller");
+};
+const cleanTypingsInstaller = () => cmdLineOptions.bundle ? esbuildTypingsInstaller.clean() : cleanProject("src/typingsInstaller");
 cleanTasks.push(cleanTypingsInstaller);
 
-const buildWatchGuard = () => buildProject("src/watchGuard");
-const cleanWatchGuard = () => cleanProject("src/watchGuard");
+const esbuildWatchGuard = esbuildTask("./src/watchGuard/watchGuard.ts", "./built/local/watchGuard.js");
+
+// No need for writeCJSReexport, this outputs to the right place.
+const buildWatchGuard = () => cmdLineOptions.bundle ? esbuildWatchGuard.build() : buildProject("src/watchGuard");
+const cleanWatchGuard = () => cmdLineOptions.bundle ? esbuildWatchGuard.clean() : cleanProject("src/watchGuard");
 cleanTasks.push(cleanWatchGuard);
 
 const generateTypesMap = () => src("src/server/typesMap.json")
@@ -443,7 +469,7 @@ const preTest = parallel(buildTsc, buildTests, buildServices, buildLssl);
 preTest.displayName = "preTest";
 
 const runTests = () => runConsoleTests(testRunner, "mocha-fivemat-progress-reporter", /*runInParallel*/ false, /*watchMode*/ false);
-task("runtests", series(/*preBuild, preTest,*/ task("moduleBuild"), runTests)); // TODO(jakebailey): fix this for modules
+task("runtests", series(preBuild, preTest, runTests));
 task("runtests").description = "Runs the tests using the built run.js file.";
 task("runtests").flags = {
     "-t --tests=<regex>": "Pattern for tests to run.",
@@ -462,7 +488,7 @@ task("runtests").flags = {
 };
 
 const runTestsParallel = () => runConsoleTests(testRunner, "min", /*runInParallel*/ cmdLineOptions.workers > 1, /*watchMode*/ false);
-task("runtests-parallel", series(/*preBuild, preTest,*/ task("moduleBuild"), runTestsParallel)); // TODO(jakebailey): fix this for modules
+task("runtests-parallel", series(preBuild, preTest, runTestsParallel));
 task("runtests-parallel").description = "Runs all the tests in parallel using the built run.js file.";
 task("runtests-parallel").flags = {
     "   --light": "Run tests in light mode (fewer verifications, but tests run faster).",
@@ -520,6 +546,9 @@ const importDefinitelyTypedTests = () => exec(process.execPath, ["scripts/import
 task("importDefinitelyTypedTests", series(buildImportDefinitelyTypedTests, importDefinitelyTypedTests));
 task("importDefinitelyTypedTests").description = "Runs the importDefinitelyTypedTests script to copy DT's tests to the TS-internal RWC tests";
 
+// TODO(jakebailey): There isn't a release build anymore; figure out what to do here.
+// Probably just use tsc.js.
+
 const buildReleaseTsc = () => buildProject("src/tsc/tsconfig.release.json");
 const cleanReleaseTsc = () => cleanProject("src/tsc/tsconfig.release.json");
 cleanTasks.push(cleanReleaseTsc);
@@ -532,7 +561,6 @@ const produceLKG = async () => {
         "built/local/typescriptServices.js",
         "built/local/typescriptServices.d.ts",
         "built/local/tsserver.js",
-        "built/local/dynamicImportCompat.js",
         "built/local/typescript.js",
         "built/local/typescript.d.ts",
         "built/local/tsserverlibrary.js",
@@ -568,6 +596,8 @@ task("generate-spec").description = "Generates a Markdown version of the Languag
 task("clean", series(parallel(cleanTasks), cleanBuilt));
 task("clean").description = "Cleans build outputs";
 
+// TODO(jakebailey): Figure out what needs to change below.
+
 const configureNightly = () => exec(process.execPath, ["scripts/configurePrerelease.js", "dev", "package.json", "src/compiler/corePublic.ts"]);
 task("configure-nightly", series(buildScripts, configureNightly));
 task("configure-nightly").description = "Runs scripts/configurePrerelease.ts to prepare a build for nightly publishing";
diff --git a/package-lock.json b/package-lock.json
index a850f9077b..297c74f4f8 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -40,6 +40,7 @@
                 "chalk": "^4.1.2",
                 "del": "^6.1.1",
                 "diff": "^5.1.0",
+                "esbuild": "^0.15.9",
                 "eslint": "^8.22.0",
                 "eslint-formatter-autolinkable-stylish": "^1.2.0",
                 "eslint-plugin-import": "^2.26.0",
@@ -86,6 +87,38 @@
                 "node": "^14 || ^16 || ^17 || ^18"
             }
         },
+        "node_modules/@esbuild/android-arm": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.15.9.tgz",
+            "integrity": "sha512-VZPy/ETF3fBG5PiinIkA0W/tlsvlEgJccyN2DzWZEl0DlVKRbu91PvY2D6Lxgluj4w9QtYHjOWjAT44C+oQ+EQ==",
+            "cpu": [
+                "arm"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "android"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/@esbuild/linux-loong64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.15.9.tgz",
+            "integrity": "sha512-O+NfmkfRrb3uSsTa4jE3WApidSe3N5++fyOVGP1SmMZi4A3BZELkhUUvj5hwmMuNdlpzAZ8iAPz2vmcR7DCFQA==",
+            "cpu": [
+                "loong64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
         "node_modules/@eslint/eslintrc": {
             "version": "1.3.2",
             "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.3.2.tgz",
@@ -2268,6 +2301,363 @@
                 "es6-symbol": "^3.1.1"
             }
         },
+        "node_modules/esbuild": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.15.9.tgz",
+            "integrity": "sha512-OnYr1rkMVxtmMHIAKZLMcEUlJmqcbxBz9QoBU8G9v455na0fuzlT/GLu6l+SRghrk0Mm2fSSciMmzV43Q8e0Gg==",
+            "dev": true,
+            "hasInstallScript": true,
+            "bin": {
+                "esbuild": "bin/esbuild"
+            },
+            "engines": {
+                "node": ">=12"
+            },
+            "optionalDependencies": {
+                "@esbuild/android-arm": "0.15.9",
+                "@esbuild/linux-loong64": "0.15.9",
+                "esbuild-android-64": "0.15.9",
+                "esbuild-android-arm64": "0.15.9",
+                "esbuild-darwin-64": "0.15.9",
+                "esbuild-darwin-arm64": "0.15.9",
+                "esbuild-freebsd-64": "0.15.9",
+                "esbuild-freebsd-arm64": "0.15.9",
+                "esbuild-linux-32": "0.15.9",
+                "esbuild-linux-64": "0.15.9",
+                "esbuild-linux-arm": "0.15.9",
+                "esbuild-linux-arm64": "0.15.9",
+                "esbuild-linux-mips64le": "0.15.9",
+                "esbuild-linux-ppc64le": "0.15.9",
+                "esbuild-linux-riscv64": "0.15.9",
+                "esbuild-linux-s390x": "0.15.9",
+                "esbuild-netbsd-64": "0.15.9",
+                "esbuild-openbsd-64": "0.15.9",
+                "esbuild-sunos-64": "0.15.9",
+                "esbuild-windows-32": "0.15.9",
+                "esbuild-windows-64": "0.15.9",
+                "esbuild-windows-arm64": "0.15.9"
+            }
+        },
+        "node_modules/esbuild-android-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.15.9.tgz",
+            "integrity": "sha512-HQCX7FJn9T4kxZQkhPjNZC7tBWZqJvhlLHPU2SFzrQB/7nDXjmTIFpFTjt7Bd1uFpeXmuwf5h5fZm+x/hLnhbw==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "android"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-android-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.15.9.tgz",
+            "integrity": "sha512-E6zbLfqbFVCNEKircSHnPiSTsm3fCRxeIMPfrkS33tFjIAoXtwegQfVZqMGR0FlsvVxp2NEDOUz+WW48COCjSg==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "android"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-darwin-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.15.9.tgz",
+            "integrity": "sha512-gI7dClcDN/HHVacZhTmGjl0/TWZcGuKJ0I7/xDGJwRQQn7aafZGtvagOFNmuOq+OBFPhlPv1T6JElOXb0unkSQ==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "darwin"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-darwin-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.15.9.tgz",
+            "integrity": "sha512-VZIMlcRN29yg/sv7DsDwN+OeufCcoTNaTl3Vnav7dL/nvsApD7uvhVRbgyMzv0zU/PP0xRhhIpTyc7lxEzHGSw==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "darwin"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-freebsd-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.15.9.tgz",
+            "integrity": "sha512-uM4z5bTvuAXqPxrI204txhlsPIolQPWRMLenvGuCPZTnnGlCMF2QLs0Plcm26gcskhxewYo9LkkmYSS5Czrb5A==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "freebsd"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-freebsd-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.15.9.tgz",
+            "integrity": "sha512-HHDjT3O5gWzicGdgJ5yokZVN9K9KG05SnERwl9nBYZaCjcCgj/sX8Ps1jvoFSfNCO04JSsHSOWo4qvxFuj8FoA==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "freebsd"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-32": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.15.9.tgz",
+            "integrity": "sha512-AQIdE8FugGt1DkcekKi5ycI46QZpGJ/wqcMr7w6YUmOmp2ohQ8eO4sKUsOxNOvYL7hGEVwkndSyszR6HpVHLFg==",
+            "cpu": [
+                "ia32"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.15.9.tgz",
+            "integrity": "sha512-4RXjae7g6Qs7StZyiYyXTZXBlfODhb1aBVAjd+ANuPmMhWthQilWo7rFHwJwL7DQu1Fjej2sODAVwLbcIVsAYQ==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-arm": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.15.9.tgz",
+            "integrity": "sha512-3Zf2GVGUOI7XwChH3qrnTOSqfV1V4CAc/7zLVm4lO6JT6wbJrTgEYCCiNSzziSju+J9Jhf9YGWk/26quWPC6yQ==",
+            "cpu": [
+                "arm"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.15.9.tgz",
+            "integrity": "sha512-a+bTtxJmYmk9d+s2W4/R1SYKDDAldOKmWjWP0BnrWtDbvUBNOm++du0ysPju4mZVoEFgS1yLNW+VXnG/4FNwdQ==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-mips64le": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.15.9.tgz",
+            "integrity": "sha512-Zn9HSylDp89y+TRREMDoGrc3Z4Hs5u56ozZLQCiZAUx2+HdbbXbWdjmw3FdTJ/i7t5Cew6/Q+6kfO3KCcFGlyw==",
+            "cpu": [
+                "mips64el"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-ppc64le": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.15.9.tgz",
+            "integrity": "sha512-OEiOxNAMH9ENFYqRsWUj3CWyN3V8P3ZXyfNAtX5rlCEC/ERXrCEFCJji/1F6POzsXAzxvUJrTSTCy7G6BhA6Fw==",
+            "cpu": [
+                "ppc64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-riscv64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.15.9.tgz",
+            "integrity": "sha512-ukm4KsC3QRausEFjzTsOZ/qqazw0YvJsKmfoZZm9QW27OHjk2XKSQGGvx8gIEswft/Sadp03/VZvAaqv5AIwNA==",
+            "cpu": [
+                "riscv64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-linux-s390x": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.15.9.tgz",
+            "integrity": "sha512-uDOQEH55wQ6ahcIKzQr3VyjGc6Po/xblLGLoUk3fVL1qjlZAibtQr6XRfy5wPJLu/M2o0vQKLq4lyJ2r1tWKcw==",
+            "cpu": [
+                "s390x"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "linux"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-netbsd-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.15.9.tgz",
+            "integrity": "sha512-yWgxaYTQz+TqX80wXRq6xAtb7GSBAp6gqLKfOdANg9qEmAI1Bxn04IrQr0Mzm4AhxvGKoHzjHjMgXbCCSSDxcw==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "netbsd"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-openbsd-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.15.9.tgz",
+            "integrity": "sha512-JmS18acQl4iSAjrEha1MfEmUMN4FcnnrtTaJ7Qg0tDCOcgpPPQRLGsZqhes0vmx8VA6IqRyScqXvaL7+Q0Uf3A==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "openbsd"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-sunos-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.15.9.tgz",
+            "integrity": "sha512-UKynGSWpzkPmXW3D2UMOD9BZPIuRaSqphxSCwScfEE05Be3KAmvjsBhht1fLzKpiFVJb0BYMd4jEbWMyJ/z1hQ==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "sunos"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-windows-32": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.15.9.tgz",
+            "integrity": "sha512-aqXvu4/W9XyTVqO/hw3rNxKE1TcZiEYHPsXM9LwYmKSX9/hjvfIJzXwQBlPcJ/QOxedfoMVH0YnhhQ9Ffb0RGA==",
+            "cpu": [
+                "ia32"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "win32"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-windows-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.15.9.tgz",
+            "integrity": "sha512-zm7h91WUmlS4idMtjvCrEeNhlH7+TNOmqw5dJPJZrgFaxoFyqYG6CKDpdFCQXdyKpD5yvzaQBOMVTCBVKGZDEg==",
+            "cpu": [
+                "x64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "win32"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
+        "node_modules/esbuild-windows-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.15.9.tgz",
+            "integrity": "sha512-yQEVIv27oauAtvtuhJVfSNMztJJX47ismRS6Sv2QMVV9RM+6xjbMWuuwM2nxr5A2/gj/mu2z9YlQxiwoFRCfZA==",
+            "cpu": [
+                "arm64"
+            ],
+            "dev": true,
+            "optional": true,
+            "os": [
+                "win32"
+            ],
+            "engines": {
+                "node": ">=12"
+            }
+        },
         "node_modules/escalade": {
             "version": "3.1.1",
             "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
@@ -8654,6 +9044,20 @@
                 "jsdoc-type-pratt-parser": "~3.1.0"
             }
         },
+        "@esbuild/android-arm": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.15.9.tgz",
+            "integrity": "sha512-VZPy/ETF3fBG5PiinIkA0W/tlsvlEgJccyN2DzWZEl0DlVKRbu91PvY2D6Lxgluj4w9QtYHjOWjAT44C+oQ+EQ==",
+            "dev": true,
+            "optional": true
+        },
+        "@esbuild/linux-loong64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.15.9.tgz",
+            "integrity": "sha512-O+NfmkfRrb3uSsTa4jE3WApidSe3N5++fyOVGP1SmMZi4A3BZELkhUUvj5hwmMuNdlpzAZ8iAPz2vmcR7DCFQA==",
+            "dev": true,
+            "optional": true
+        },
         "@eslint/eslintrc": {
             "version": "1.3.2",
             "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-1.3.2.tgz",
@@ -10380,6 +10784,176 @@
                 "es6-symbol": "^3.1.1"
             }
         },
+        "esbuild": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.15.9.tgz",
+            "integrity": "sha512-OnYr1rkMVxtmMHIAKZLMcEUlJmqcbxBz9QoBU8G9v455na0fuzlT/GLu6l+SRghrk0Mm2fSSciMmzV43Q8e0Gg==",
+            "dev": true,
+            "requires": {
+                "@esbuild/android-arm": "0.15.9",
+                "@esbuild/linux-loong64": "0.15.9",
+                "esbuild-android-64": "0.15.9",
+                "esbuild-android-arm64": "0.15.9",
+                "esbuild-darwin-64": "0.15.9",
+                "esbuild-darwin-arm64": "0.15.9",
+                "esbuild-freebsd-64": "0.15.9",
+                "esbuild-freebsd-arm64": "0.15.9",
+                "esbuild-linux-32": "0.15.9",
+                "esbuild-linux-64": "0.15.9",
+                "esbuild-linux-arm": "0.15.9",
+                "esbuild-linux-arm64": "0.15.9",
+                "esbuild-linux-mips64le": "0.15.9",
+                "esbuild-linux-ppc64le": "0.15.9",
+                "esbuild-linux-riscv64": "0.15.9",
+                "esbuild-linux-s390x": "0.15.9",
+                "esbuild-netbsd-64": "0.15.9",
+                "esbuild-openbsd-64": "0.15.9",
+                "esbuild-sunos-64": "0.15.9",
+                "esbuild-windows-32": "0.15.9",
+                "esbuild-windows-64": "0.15.9",
+                "esbuild-windows-arm64": "0.15.9"
+            }
+        },
+        "esbuild-android-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-android-64/-/esbuild-android-64-0.15.9.tgz",
+            "integrity": "sha512-HQCX7FJn9T4kxZQkhPjNZC7tBWZqJvhlLHPU2SFzrQB/7nDXjmTIFpFTjt7Bd1uFpeXmuwf5h5fZm+x/hLnhbw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-android-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-android-arm64/-/esbuild-android-arm64-0.15.9.tgz",
+            "integrity": "sha512-E6zbLfqbFVCNEKircSHnPiSTsm3fCRxeIMPfrkS33tFjIAoXtwegQfVZqMGR0FlsvVxp2NEDOUz+WW48COCjSg==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-darwin-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-darwin-64/-/esbuild-darwin-64-0.15.9.tgz",
+            "integrity": "sha512-gI7dClcDN/HHVacZhTmGjl0/TWZcGuKJ0I7/xDGJwRQQn7aafZGtvagOFNmuOq+OBFPhlPv1T6JElOXb0unkSQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-darwin-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-darwin-arm64/-/esbuild-darwin-arm64-0.15.9.tgz",
+            "integrity": "sha512-VZIMlcRN29yg/sv7DsDwN+OeufCcoTNaTl3Vnav7dL/nvsApD7uvhVRbgyMzv0zU/PP0xRhhIpTyc7lxEzHGSw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-freebsd-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-freebsd-64/-/esbuild-freebsd-64-0.15.9.tgz",
+            "integrity": "sha512-uM4z5bTvuAXqPxrI204txhlsPIolQPWRMLenvGuCPZTnnGlCMF2QLs0Plcm26gcskhxewYo9LkkmYSS5Czrb5A==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-freebsd-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-freebsd-arm64/-/esbuild-freebsd-arm64-0.15.9.tgz",
+            "integrity": "sha512-HHDjT3O5gWzicGdgJ5yokZVN9K9KG05SnERwl9nBYZaCjcCgj/sX8Ps1jvoFSfNCO04JSsHSOWo4qvxFuj8FoA==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-32": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-32/-/esbuild-linux-32-0.15.9.tgz",
+            "integrity": "sha512-AQIdE8FugGt1DkcekKi5ycI46QZpGJ/wqcMr7w6YUmOmp2ohQ8eO4sKUsOxNOvYL7hGEVwkndSyszR6HpVHLFg==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-64/-/esbuild-linux-64-0.15.9.tgz",
+            "integrity": "sha512-4RXjae7g6Qs7StZyiYyXTZXBlfODhb1aBVAjd+ANuPmMhWthQilWo7rFHwJwL7DQu1Fjej2sODAVwLbcIVsAYQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-arm": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-arm/-/esbuild-linux-arm-0.15.9.tgz",
+            "integrity": "sha512-3Zf2GVGUOI7XwChH3qrnTOSqfV1V4CAc/7zLVm4lO6JT6wbJrTgEYCCiNSzziSju+J9Jhf9YGWk/26quWPC6yQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-arm64/-/esbuild-linux-arm64-0.15.9.tgz",
+            "integrity": "sha512-a+bTtxJmYmk9d+s2W4/R1SYKDDAldOKmWjWP0BnrWtDbvUBNOm++du0ysPju4mZVoEFgS1yLNW+VXnG/4FNwdQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-mips64le": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-mips64le/-/esbuild-linux-mips64le-0.15.9.tgz",
+            "integrity": "sha512-Zn9HSylDp89y+TRREMDoGrc3Z4Hs5u56ozZLQCiZAUx2+HdbbXbWdjmw3FdTJ/i7t5Cew6/Q+6kfO3KCcFGlyw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-ppc64le": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-ppc64le/-/esbuild-linux-ppc64le-0.15.9.tgz",
+            "integrity": "sha512-OEiOxNAMH9ENFYqRsWUj3CWyN3V8P3ZXyfNAtX5rlCEC/ERXrCEFCJji/1F6POzsXAzxvUJrTSTCy7G6BhA6Fw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-riscv64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-riscv64/-/esbuild-linux-riscv64-0.15.9.tgz",
+            "integrity": "sha512-ukm4KsC3QRausEFjzTsOZ/qqazw0YvJsKmfoZZm9QW27OHjk2XKSQGGvx8gIEswft/Sadp03/VZvAaqv5AIwNA==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-linux-s390x": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-linux-s390x/-/esbuild-linux-s390x-0.15.9.tgz",
+            "integrity": "sha512-uDOQEH55wQ6ahcIKzQr3VyjGc6Po/xblLGLoUk3fVL1qjlZAibtQr6XRfy5wPJLu/M2o0vQKLq4lyJ2r1tWKcw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-netbsd-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-netbsd-64/-/esbuild-netbsd-64-0.15.9.tgz",
+            "integrity": "sha512-yWgxaYTQz+TqX80wXRq6xAtb7GSBAp6gqLKfOdANg9qEmAI1Bxn04IrQr0Mzm4AhxvGKoHzjHjMgXbCCSSDxcw==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-openbsd-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-openbsd-64/-/esbuild-openbsd-64-0.15.9.tgz",
+            "integrity": "sha512-JmS18acQl4iSAjrEha1MfEmUMN4FcnnrtTaJ7Qg0tDCOcgpPPQRLGsZqhes0vmx8VA6IqRyScqXvaL7+Q0Uf3A==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-sunos-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-sunos-64/-/esbuild-sunos-64-0.15.9.tgz",
+            "integrity": "sha512-UKynGSWpzkPmXW3D2UMOD9BZPIuRaSqphxSCwScfEE05Be3KAmvjsBhht1fLzKpiFVJb0BYMd4jEbWMyJ/z1hQ==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-windows-32": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-32/-/esbuild-windows-32-0.15.9.tgz",
+            "integrity": "sha512-aqXvu4/W9XyTVqO/hw3rNxKE1TcZiEYHPsXM9LwYmKSX9/hjvfIJzXwQBlPcJ/QOxedfoMVH0YnhhQ9Ffb0RGA==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-windows-64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-64/-/esbuild-windows-64-0.15.9.tgz",
+            "integrity": "sha512-zm7h91WUmlS4idMtjvCrEeNhlH7+TNOmqw5dJPJZrgFaxoFyqYG6CKDpdFCQXdyKpD5yvzaQBOMVTCBVKGZDEg==",
+            "dev": true,
+            "optional": true
+        },
+        "esbuild-windows-arm64": {
+            "version": "0.15.9",
+            "resolved": "https://registry.npmjs.org/esbuild-windows-arm64/-/esbuild-windows-arm64-0.15.9.tgz",
+            "integrity": "sha512-yQEVIv27oauAtvtuhJVfSNMztJJX47ismRS6Sv2QMVV9RM+6xjbMWuuwM2nxr5A2/gj/mu2z9YlQxiwoFRCfZA==",
+            "dev": true,
+            "optional": true
+        },
         "escalade": {
             "version": "3.1.1",
             "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
diff --git a/package.json b/package.json
index 4fd407ca8d..8ff29ab4b8 100644
--- a/package.json
+++ b/package.json
@@ -66,6 +66,7 @@
         "chalk": "^4.1.2",
         "del": "^6.1.1",
         "diff": "^5.1.0",
+        "esbuild": "^0.15.9",
         "eslint": "^8.22.0",
         "eslint-formatter-autolinkable-stylish": "^1.2.0",
         "eslint-plugin-import": "^2.26.0",
diff --git a/scripts/build/options.js b/scripts/build/options.js
index fc237c5885..e37b1edd6a 100644
--- a/scripts/build/options.js
+++ b/scripts/build/options.js
@@ -6,7 +6,7 @@ const ci = ["1", "true"].includes(process.env.CI);
 
 /** @type {CommandLineOptions} */
 module.exports = minimist(process.argv.slice(2), {
-    boolean: ["dirty", "light", "colors", "lkg", "soft", "fix", "failed", "keepFailed", "force", "built", "ci"],
+    boolean: ["dirty", "light", "colors", "lkg", "soft", "fix", "failed", "keepFailed", "force", "built", "ci", "bundle"],
     string: ["browser", "tests", "break", "host", "reporter", "stackTraceLimit", "timeout", "shards", "shardId"],
     alias: {
         /* eslint-disable quote-props */
@@ -41,6 +41,7 @@ module.exports = minimist(process.argv.slice(2), {
         dirty: false,
         built: false,
         ci,
+        bundle: true
     }
 });
 
@@ -49,7 +50,7 @@ if (module.exports.built) {
 }
 
 /**
- * @typedef TypedOptions
+ * @typedef CommandLineOptions
  * @property {boolean} dirty
  * @property {boolean} light
  * @property {boolean} colors
@@ -69,7 +70,9 @@ if (module.exports.built) {
  * @property {boolean} failed
  * @property {boolean} keepFailed
  * @property {boolean} ci
- *
- * @typedef {import("minimist").ParsedArgs & TypedOptions} CommandLineOptions
+ * @property {boolean} bundle
+ * @property {string} shards
+ * @property {string} shardId
+ * @property {string} break
  */
 void 0;
diff --git a/scripts/build/prepend.js b/scripts/build/prepend.js
deleted file mode 100644
index d7571efdaa..0000000000
--- a/scripts/build/prepend.js
+++ /dev/null
@@ -1,64 +0,0 @@
-// @ts-check
-const stream = require("stream");
-const ts = require("../../lib/typescript");
-const fs = require("fs");
-const { base64VLQFormatEncode } = require("./sourcemaps");
-
-/**
- * @param {string | ((file: import("vinyl")) => string)} data
- */
-function prepend(data) {
-    return new stream.Transform({
-        objectMode: true,
-        /**
-         * @param {string | Buffer | import("vinyl")} input
-         * @param {(error: Error, data?: any) => void} cb
-         */
-        transform(input, _, cb) {
-            if (typeof input === "string" || Buffer.isBuffer(input)) return cb(new Error("Only Vinyl files are supported."));
-            if (!input.isBuffer()) return cb(new Error("Streams not supported."));
-            try {
-                const output = input.clone();
-                const prependContent = typeof data === "function" ? data(input) : data;
-                output.contents = Buffer.concat([Buffer.from(prependContent, "utf8"), input.contents]);
-                if (input.sourceMap) {
-                    if (typeof input.sourceMap === "string") input.sourceMap = /**@type {import("./sourcemaps").RawSourceMap}*/(JSON.parse(input.sourceMap));
-                    const lineStarts = /**@type {*}*/(ts).computeLineStarts(prependContent);
-                    let prependMappings = "";
-                    for (let i = 1; i < lineStarts.length; i++) {
-                        prependMappings += ";";
-                    }
-                    const offset = prependContent.length - lineStarts[lineStarts.length - 1];
-                    if (offset > 0) {
-                        prependMappings += base64VLQFormatEncode(offset) + ",";
-                    }
-                    output.sourceMap = {
-                        version: input.sourceMap.version,
-                        file: input.sourceMap.file,
-                        sources: input.sourceMap.sources,
-                        sourceRoot: input.sourceMap.sourceRoot,
-                        mappings: prependMappings + input.sourceMap.mappings,
-                        names: input.names,
-                        sourcesContent: input.sourcesContent
-                    };
-                }
-                // eslint-disable-next-line local/boolean-trivia, no-null/no-null
-                return cb(null, output);
-            }
-            catch (e) {
-                return cb(e);
-            }
-        }
-    });
-}
-exports.prepend = prepend;
-
-/**
- * @param {string | ((file: import("vinyl")) => string)} file
- */
-function prependFile(file) {
-    const data = typeof file === "string" ? fs.readFileSync(file, "utf8") :
-        vinyl => fs.readFileSync(file(vinyl), "utf8");
-    return prepend(data);
-}
-exports.prependFile = prependFile;
diff --git a/scripts/build/projects.js b/scripts/build/projects.js
index 7346607d3b..55559e9d1b 100644
--- a/scripts/build/projects.js
+++ b/scripts/build/projects.js
@@ -2,67 +2,57 @@
 const { exec, Debouncer } = require("./utils");
 const { resolve } = require("path");
 const { findUpRoot } = require("./findUpDir");
+const cmdLineOptions = require("./options");
 
 class ProjectQueue {
     /**
-     * @param {(projects: string[], lkg: boolean, force: boolean) => Promise<any>} action
+     * @param {(projects: string[]) => Promise<any>} action
      */
     constructor(action) {
-        /** @type {{ lkg: boolean, force: boolean, projects?: string[], debouncer: Debouncer }[]} */
-        this._debouncers = [];
-        this._action = action;
+        /** @type {string[] | undefined} */
+        this._projects = undefined;
+        this._debouncer = new Debouncer(100, async () => {
+            const projects = this._projects;
+            if (projects) {
+                this._projects = undefined;
+                await action(projects);
+            }
+        });
     }
 
     /**
      * @param {string} project
-     * @param {object} options
      */
-    enqueue(project, { lkg = true, force = false } = {}) {
-        let entry = this._debouncers.find(entry => entry.lkg === lkg && entry.force === force);
-        if (!entry) {
-            const debouncer = new Debouncer(100, async () => {
-                const projects = entry.projects;
-                if (projects) {
-                    entry.projects = undefined;
-                    await this._action(projects, lkg, force);
-                }
-            });
-            this._debouncers.push(entry = { lkg, force, debouncer });
-        }
-        if (!entry.projects) entry.projects = [];
-        entry.projects.push(project);
-        return entry.debouncer.enqueue();
+    enqueue(project) {
+        if (!this._projects) this._projects = [];
+        this._projects.push(project);
+        return this._debouncer.enqueue();
     }
 }
 
-const execTsc = (/** @type {boolean} */ lkg, /** @type {string[]} */ ...args) =>
+const execTsc = (/** @type {string[]} */ ...args) =>
     exec(process.execPath,
-         [resolve(findUpRoot(), lkg ? "./lib/tsc" : "./built/local/tsc"),
+         [resolve(findUpRoot(), cmdLineOptions.lkg ? "./lib/tsc" : "./built/local/tsc"),
           "-b", ...args],
          { hidePrompt: true });
 
-const projectBuilder = new ProjectQueue((projects, lkg, force) => execTsc(lkg, ...(force ? ["--force"] : []), ...projects));
+const projectBuilder = new ProjectQueue((projects) => execTsc(...projects));
 
 /**
  * @param {string} project
- * @param {object} options
- * @param {boolean} [options.lkg=true]
- * @param {boolean} [options.force=false]
  */
-exports.buildProject = (project, { lkg, force } = {}) => projectBuilder.enqueue(project, { lkg, force });
+exports.buildProject = (project) => projectBuilder.enqueue(project);
 
-const projectCleaner = new ProjectQueue((projects, lkg) => execTsc(lkg, "--clean", ...projects));
+const projectCleaner = new ProjectQueue((projects) => execTsc("--clean", ...projects));
 
 /**
  * @param {string} project
  */
 exports.cleanProject = (project) => projectCleaner.enqueue(project);
 
-const projectWatcher = new ProjectQueue((projects) => execTsc(/*lkg*/ true, "--watch", ...projects));
+const projectWatcher = new ProjectQueue((projects) => execTsc("--watch", ...projects));
 
 /**
  * @param {string} project
- * @param {object} options
- * @param {boolean} [options.lkg=true]
  */
-exports.watchProject = (project, { lkg } = {}) => projectWatcher.enqueue(project, { lkg });
+exports.watchProject = (project) => projectWatcher.enqueue(project);
diff --git a/scripts/build/tests.js b/scripts/build/tests.js
index 4dd76c1f62..f656034347 100644
--- a/scripts/build/tests.js
+++ b/scripts/build/tests.js
@@ -123,17 +123,17 @@ async function runConsoleTests(runJs, defaultReporter, runInParallel, watchMode)
             errorStatus = exitCode;
             error = new Error(`Process exited with status code ${errorStatus}.`);
         }
-        else if (cmdLineOptions.ci) {
-            // finally, do a sanity check and build the compiler with the built version of itself
-            log.info("Starting sanity check build...");
-            // Cleanup everything except lint rules (we'll need those later and would rather not waste time rebuilding them)
-            await exec("gulp", ["clean-tsc", "clean-services", "clean-tsserver", "clean-lssl", "clean-tests"]);
-            const { exitCode } = await exec("gulp", ["local", "--lkg=false"]);
-            if (exitCode !== 0) {
-                errorStatus = exitCode;
-                error = new Error(`Sanity check build process exited with status code ${errorStatus}.`);
-            }
-        }
+        // else if (cmdLineOptions.ci) {
+        //     // finally, do a sanity check and build the compiler with the built version of itself
+        //     log.info("Starting sanity check build...");
+        //     // Cleanup everything except lint rules (we'll need those later and would rather not waste time rebuilding them)
+        //     await exec("gulp", ["clean-tsc", "clean-services", "clean-tsserver", "clean-lssl", "clean-tests"]);
+        //     const { exitCode } = await exec("gulp", ["local", "--lkg=false"]);
+        //     if (exitCode !== 0) {
+        //         errorStatus = exitCode;
+        //         error = new Error(`Sanity check build process exited with status code ${errorStatus}.`);
+        //     }
+        // }
     }
     catch (e) {
         errorStatus = undefined;
diff --git a/scripts/build/utils.js b/scripts/build/utils.js
index 0e38a0b73d..378084f8c4 100644
--- a/scripts/build/utils.js
+++ b/scripts/build/utils.js
@@ -7,7 +7,6 @@
 const fs = require("fs");
 const path = require("path");
 const log = require("fancy-log");
-const mkdirp = require("mkdirp");
 const del = require("del");
 const File = require("vinyl");
 const ts = require("../../lib/typescript");
@@ -225,90 +224,6 @@ function getDirSize(root) {
 }
 exports.getDirSize = getDirSize;
 
-/**
- * Flattens a project with project references into a single project.
- * @param {string} projectSpec The path to a tsconfig.json file or its containing directory.
- * @param {string} flattenedProjectSpec The output path for the flattened tsconfig.json file.
- * @param {FlattenOptions} [options] Options used to flatten a project hierarchy.
- *
- * @typedef FlattenOptions
- * @property {string} [cwd] The path to use for the current working directory. Defaults to `process.cwd()`.
- * @property {import("../../lib/typescript").CompilerOptions} [compilerOptions] Compiler option overrides.
- * @property {boolean} [force] Forces creation of the output project.
- * @property {string[]} [exclude] Files to exclude (relative to `cwd`)
- */
-function flatten(projectSpec, flattenedProjectSpec, options = {}) {
-    const cwd = normalizeSlashes(options.cwd ? path.resolve(options.cwd) : process.cwd());
-    const files = [];
-    const resolvedOutputSpec = path.resolve(cwd, flattenedProjectSpec);
-    const resolvedOutputDirectory = path.dirname(resolvedOutputSpec);
-    const resolvedProjectSpec = resolveProjectSpec(projectSpec, cwd, /*referrer*/ undefined);
-    const project = readJson(resolvedProjectSpec);
-    const skipProjects = /**@type {Set<string>}*/(new Set());
-    const skipFiles = new Set(options && options.exclude && options.exclude.map(file => normalizeSlashes(path.resolve(cwd, file))));
-    recur(resolvedProjectSpec, project);
-
-    if (options.force || needsUpdate(files, resolvedOutputSpec)) {
-        const config = {
-            extends: normalizeSlashes(path.relative(resolvedOutputDirectory, resolvedProjectSpec)),
-            compilerOptions: options.compilerOptions || {},
-            files: files.map(file => normalizeSlashes(path.relative(resolvedOutputDirectory, file)))
-        };
-        mkdirp.sync(resolvedOutputDirectory);
-        fs.writeFileSync(resolvedOutputSpec, JSON.stringify(config, undefined, 2), "utf8");
-    }
-
-    /**
-     * @param {string} projectSpec
-     * @param {object} project
-     */
-    function recur(projectSpec, project) {
-        if (skipProjects.has(projectSpec)) return;
-        skipProjects.add(project);
-        if (project.references) {
-            for (const ref of project.references) {
-                const referencedSpec = resolveProjectSpec(ref.path, cwd, projectSpec);
-                const referencedProject = readJson(referencedSpec);
-                recur(referencedSpec, referencedProject);
-            }
-        }
-        if (project.include) {
-            throw new Error("Flattened project may not have an 'include' list.");
-        }
-        if (!project.files) {
-            throw new Error("Flattened project must have an explicit 'files' list.");
-        }
-        const projectDirectory = path.dirname(projectSpec);
-        for (let file of project.files) {
-            file = normalizeSlashes(path.resolve(projectDirectory, file));
-            if (skipFiles.has(file)) continue;
-            skipFiles.add(file);
-            files.push(file);
-        }
-    }
-}
-exports.flatten = flatten;
-
-/**
- * @param {string} file
- */
-function normalizeSlashes(file) {
-    return file.replace(/\\/g, "/");
-}
-
-/**
- * @param {string} projectSpec
- * @param {string} cwd
- * @param {string | undefined} referrer
- * @returns {string}
- */
-function resolveProjectSpec(projectSpec, cwd, referrer) {
-    const projectPath = normalizeSlashes(path.resolve(cwd, referrer ? path.dirname(referrer) : "", projectSpec));
-    const stats = fs.statSync(projectPath);
-    if (stats.isFile()) return normalizeSlashes(projectPath);
-    return normalizeSlashes(path.resolve(cwd, projectPath, "tsconfig.json"));
-}
-
 /**
  * @param {string | ((file: File) => string) | { cwd?: string }} [dest]
  * @param {{ cwd?: string }} [opts]
diff --git a/scripts/produceLKG.ts b/scripts/produceLKG.ts
index e4e37df028..35f0c45ea7 100644
--- a/scripts/produceLKG.ts
+++ b/scripts/produceLKG.ts
@@ -62,7 +62,6 @@ async function copyScriptOutputs() {
     await copyWithCopyright("cancellationToken.js");
     await copyWithCopyright("tsc.release.js", "tsc.js");
     await copyWithCopyright("tsserver.js");
-    await copyWithCopyright("dynamicImportCompat.js");
     await copyFromBuiltLocal("tsserverlibrary.js"); // copyright added by build
     await copyFromBuiltLocal("typescript.js"); // copyright added by build
     await copyFromBuiltLocal("typescriptServices.js"); // copyright added by build
diff --git a/src/cancellationToken/tsconfig.json b/src/cancellationToken/tsconfig.json
index 76eca8f56c..f12034bee9 100644
--- a/src/cancellationToken/tsconfig.json
+++ b/src/cancellationToken/tsconfig.json
@@ -1,7 +1,9 @@
 {
     "extends": "../tsconfig-base",
     "compilerOptions": {
-        "outDir": "../../built/local/cancellationToken",
+        "outDir": "../../built/local",
+        "tsBuildInfoFile": "../../built/local/cancellationToken.tsbuildinfo",
+        "rootDir": ".",
         "module": "commonjs",
         "types": [
             "node"
diff --git a/src/compiler/debug.ts b/src/compiler/debug.ts
index 591cd8945d..c766bf6875 100644
--- a/src/compiler/debug.ts
+++ b/src/compiler/debug.ts
@@ -721,7 +721,7 @@ export namespace Debug {
         try {
             if (sys && sys.require) {
                 const basePath = getDirectoryPath(resolvePath(sys.getExecutingFilePath()));
-                const result = sys.require(basePath, "./compiler-debug") as RequireResult<ExtendedDebugModule>;
+                const result = sys.require(basePath, "./compilerDebug") as RequireResult<ExtendedDebugModule>;
                 if (!result.error) {
                     result.module.init(ts);
                     extendedDebugModule = result.module;
diff --git a/src/compiler/sys.ts b/src/compiler/sys.ts
index 6a8d8fbd53..97e8a2fee2 100644
--- a/src/compiler/sys.ts
+++ b/src/compiler/sys.ts
@@ -1466,6 +1466,13 @@ export let sys: System = (() => {
         const useCaseSensitiveFileNames = isFileSystemCaseSensitive();
         const fsRealpath = !!_fs.realpathSync.native ? process.platform === "win32" ? fsRealPathHandlingLongPath : _fs.realpathSync.native : _fs.realpathSync;
 
+        // If our filename is "sys.js", then we are executing unbundled on the raw tsc output.
+        // In that case, simulate a faked path in the directory where a bundle would normally
+        // appear (e.g. the directory containing lib.*.d.ts files).
+        //
+        // Note that if we ever emit as files like cjs/mjs, this check will be wrong.
+        const executingFilePath = __filename.endsWith("sys.js") ? _path.join(_path.dirname(__dirname), "__fake__.js") : __filename;
+
         const fsSupportsRecursiveFsWatch = isNode4OrLater && (process.platform === "win32" || process.platform === "darwin");
         const getCurrentDirectory = memoize(() => process.cwd());
         const { watchFile, watchDirectory } = createSystemWatchFunctions({
@@ -1525,14 +1532,7 @@ export let sys: System = (() => {
                 }
             },
             getExecutingFilePath() {
-                // This function previously returned a path like `built/local/tsc.js`.
-                // Now, with a module output, this file is now `built/local/compiler/sys.js`.
-                // We want to return a file that looks like the old one, so that callers
-                // can locate other assets like the lib.d.ts files.
-                //
-                // TODO(jakebailey): replace this function with one that returns the path
-                // to the lib folder (or package path)?.
-                return _path.join(_path.dirname(__dirname), "fake.js");
+                return executingFilePath;
             },
             getCurrentDirectory,
             getDirectories,
@@ -1571,7 +1571,10 @@ export let sys: System = (() => {
             debugMode: !!process.env.NODE_INSPECTOR_IPC || !!process.env.VSCODE_INSPECTOR_OPTIONS || some(process.execArgv as string[], arg => /^--(inspect|debug)(-brk)?(=\d+)?$/i.test(arg)),
             tryEnableSourceMapsForHost() {
                 try {
-                    require("source-map-support").install();
+                    // Trick esbuild into not eagerly resolving a path to a JS file.
+                    // See: https://github.com/evanw/esbuild/issues/1958
+                    const moduleName = "source-map-support" as const;
+                    (require(moduleName) as typeof import("source-map-support")).install();
                 }
                 catch {
                     // Could not enable source maps.
diff --git a/src/debug/_namespaces/Debug.ts b/src/debug/_namespaces/Debug.ts
deleted file mode 100644
index 449c31bdae..0000000000
--- a/src/debug/_namespaces/Debug.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-/* Generated file to emulate the Debug namespace. */
-
-export * from "../dbg";
diff --git a/src/debug/dbg.ts b/src/debug/compilerDebug.ts
similarity index 95%
rename from src/debug/dbg.ts
rename to src/debug/compilerDebug.ts
index 3b531914d5..5eca399b05 100644
--- a/src/debug/dbg.ts
+++ b/src/debug/compilerDebug.ts
@@ -1,7 +1,3 @@
-import * as Debug from "./_namespaces/Debug";
-
-/// <reference lib="es2019" />
-
 interface Node {
     kind: number;
 }
@@ -510,9 +506,3 @@ export function formatControlFlowGraph(flowNode: FlowNode) {
         return s;
     }
 }
-
-// Export as a module. NOTE: Can't use module exports as this is built using --outFile
-declare const module: { exports: {} };
-if (typeof module !== "undefined" && module.exports) {
-    module.exports = Debug;
-}
diff --git a/src/debug/tsconfig.json b/src/debug/tsconfig.json
index 4f9a47f5af..d4eb364738 100644
--- a/src/debug/tsconfig.json
+++ b/src/debug/tsconfig.json
@@ -1,12 +1,13 @@
 {
     "extends": "../tsconfig-base",
     "compilerOptions": {
+        "outDir": "../../built/local",
+        "tsBuildInfoFile": "../../built/local/debug.tsbuildinfo",
+        "rootDir": ".",
         "target": "es2019",
         "lib": ["es2019"],
-        "outDir": "../../built/local/debug"
     },
     "files": [
-        "dbg.ts",
-        "_namespaces/Debug.ts"
+        "compilerDebug.ts",
     ]
 }
diff --git a/src/dynamicImportCompat/_namespaces/ts.server.ts b/src/dynamicImportCompat/_namespaces/ts.server.ts
deleted file mode 100644
index 729da9c24e..0000000000
--- a/src/dynamicImportCompat/_namespaces/ts.server.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-/* Generated file to emulate the ts.server namespace. */
-
-export * from "../dynamicImportCompat";
diff --git a/src/dynamicImportCompat/_namespaces/ts.ts b/src/dynamicImportCompat/_namespaces/ts.ts
deleted file mode 100644
index 91d7693414..0000000000
--- a/src/dynamicImportCompat/_namespaces/ts.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-/* Generated file to emulate the ts namespace. */
-
-import * as server from "./ts.server";
-export { server };
diff --git a/src/dynamicImportCompat/dynamicImportCompat.ts b/src/dynamicImportCompat/dynamicImportCompat.ts
deleted file mode 100644
index 5981d8c7e9..0000000000
--- a/src/dynamicImportCompat/dynamicImportCompat.ts
+++ /dev/null
@@ -1 +0,0 @@
-export const dynamicImport = (id: string) => import(id);
\ No newline at end of file
diff --git a/src/dynamicImportCompat/tsconfig.json b/src/dynamicImportCompat/tsconfig.json
deleted file mode 100644
index 3abacb2133..0000000000
--- a/src/dynamicImportCompat/tsconfig.json
+++ /dev/null
@@ -1,15 +0,0 @@
-{
-    "extends": "../tsconfig-base",
-    "compilerOptions": {
-        "outDir": "../../built/local/dynamicImportCompat",
-        "rootDir": ".",
-        "target": "esnext",
-        "module": "esnext",
-        "lib": ["esnext"]
-    },
-    "files": [
-        "dynamicImportCompat.ts",
-        "_namespaces/ts.server.ts",
-        "_namespaces/ts.ts"
-    ]
-}
diff --git a/src/harness/fourslashImpl.ts b/src/harness/fourslashImpl.ts
index 6283312cd0..d108c864ab 100644
--- a/src/harness/fourslashImpl.ts
+++ b/src/harness/fourslashImpl.ts
@@ -4059,7 +4059,7 @@ export function runFourSlashTestContent(basePath: string, testType: FourSlashTes
 function runCode(code: string, state: TestState, fileName: string): void {
     // Compile and execute the test
     const generatedFile = ts.changeExtension(fileName, ".js");
-    const wrappedCode = `(function(test, goTo, plugins, verify, edit, debug, format, cancellation, classification, completion, verifyOperationIsCancelled) {${code}\n//# sourceURL=${ts.getBaseFileName(generatedFile)}\n})`;
+    const wrappedCode = `(function(ts, test, goTo, config, verify, edit, debug, format, cancellation, classification, completion, verifyOperationIsCancelled, ignoreInterpolations) {${code}\n//# sourceURL=${ts.getBaseFileName(generatedFile)}\n})`;
 
     type SourceMapSupportModule = typeof import("source-map-support") & {
         // TODO(rbuckton): This is missing from the DT definitions and needs to be added.
@@ -4093,8 +4093,8 @@ function runCode(code: string, state: TestState, fileName: string): void {
         const format = new FourSlashInterface.Format(state);
         const cancellation = new FourSlashInterface.Cancellation(state);
         // eslint-disable-next-line no-eval
-        const f = eval(wrappedCode);
-        f(test, goTo, config, verify, edit, debug, format, cancellation, FourSlashInterface.classification, FourSlashInterface.Completion, verifyOperationIsCancelled);
+        const f = (0, eval)(wrappedCode);
+        f(ts, test, goTo, config, verify, edit, debug, format, cancellation, FourSlashInterface.classification, FourSlashInterface.Completion, verifyOperationIsCancelled, ignoreInterpolations);
     }
     catch (err) {
         // ensure 'source-map-support' is triggered while we still have the handler attached by accessing `error.stack`.
diff --git a/src/server/scriptVersionCache.ts b/src/server/scriptVersionCache.ts
index 6c99b15ecb..13a2fbe6a0 100644
--- a/src/server/scriptVersionCache.ts
+++ b/src/server/scriptVersionCache.ts
@@ -255,16 +255,16 @@ class TextChange {
 
 /** @internal */
 export class ScriptVersionCache {
+    private static readonly changeNumberThreshold = 8;
+    private static readonly changeLengthThreshold = 256;
+    private static readonly maxVersions = 8;
+
     private changes: TextChange[] = [];
     private readonly versions: LineIndexSnapshot[] = new Array<LineIndexSnapshot>(ScriptVersionCache.maxVersions);
     private minVersion = 0; // no versions earlier than min version will maintain change history
 
     private currentVersion = 0;
 
-    private static readonly changeNumberThreshold = 8;
-    private static readonly changeLengthThreshold = 256;
-    private static readonly maxVersions = 8;
-
     private versionToIndex(version: number) {
         if (version < this.minVersion || version > this.currentVersion) {
             return undefined;
diff --git a/src/services/_namespaces/ts.ts b/src/services/_namespaces/ts.ts
index eae114fd2e..55fca06914 100644
--- a/src/services/_namespaces/ts.ts
+++ b/src/services/_namespaces/ts.ts
@@ -17,6 +17,7 @@ export * from "../transpile";
 export * from "../services";
 export * from "../transform";
 export * from "../shims";
+export * from "../globalThisShim";
 import * as BreakpointResolver from "./ts.BreakpointResolver";
 export { BreakpointResolver };
 import * as CallHierarchy from "./ts.CallHierarchy";
diff --git a/src/services/exportAsModule.ts b/src/services/exportAsModule.ts
deleted file mode 100644
index 757f9f7cd3..0000000000
--- a/src/services/exportAsModule.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import * as ts from "./_namespaces/ts";
-
-// Here we expose the TypeScript services as an external module
-// so that it may be consumed easily like a node module.
-// @ts-ignore
-/** @internal */ declare const module: { exports: {} };
-if (typeof module !== "undefined" && module.exports) {
-    module.exports = ts;
-}
diff --git a/src/services/services.ts b/src/services/services.ts
index 09600bc485..b92a98a05a 100644
--- a/src/services/services.ts
+++ b/src/services/services.ts
@@ -484,9 +484,9 @@ class IdentifierObject extends TokenOrIdentifierObject implements Identifier {
 }
 IdentifierObject.prototype.kind = SyntaxKind.Identifier;
 class PrivateIdentifierObject extends TokenOrIdentifierObject implements PrivateIdentifier {
-    public kind!: SyntaxKind.PrivateIdentifier;
+    public kind: SyntaxKind.PrivateIdentifier = SyntaxKind.PrivateIdentifier;
     public escapedText!: __String;
-    public symbol!: Symbol;
+    // public symbol!: Symbol;
     _primaryExpressionBrand: any;
     _memberExpressionBrand: any;
     _leftHandSideExpressionBrand: any;
diff --git a/src/services/tsconfig.json b/src/services/tsconfig.json
index a70b4d47d7..e360b2f340 100644
--- a/src/services/tsconfig.json
+++ b/src/services/tsconfig.json
@@ -135,7 +135,6 @@
         "transform.ts",
         "shims.ts",
         "globalThisShim.ts",
-        "exportAsModule.ts",
         "_namespaces/ts.BreakpointResolver.ts",
         "_namespaces/ts.ts",
         "_namespaces/ts.CallHierarchy.ts",
diff --git a/src/testRunner/_namespaces/Harness.ts b/src/testRunner/_namespaces/Harness.ts
index caf03e950a..602d83e412 100644
--- a/src/testRunner/_namespaces/Harness.ts
+++ b/src/testRunner/_namespaces/Harness.ts
@@ -11,3 +11,9 @@ export * from "../compilerRunner";
 export * from "../externalCompileRunner";
 export * from "../test262Runner";
 export * from "../runner";
+
+// If running as emitted CJS, don't start executing the tests here; instead start in runner.ts.
+// If running bundled, we want this to be here so that esbuild places the tests after runner.ts.
+if (!__filename.endsWith("Harness.js")) {
+    require("./tests");
+}
diff --git a/src/testRunner/runner.ts b/src/testRunner/runner.ts
index afce965527..28bfd96983 100644
--- a/src/testRunner/runner.ts
+++ b/src/testRunner/runner.ts
@@ -293,4 +293,11 @@ function startTestEnvironment() {
 startTestEnvironment();
 
 // This brings in all of the unittests.
-import "./_namespaces/tests";
+// NOTE: if emitting CJS, uncomment this, and comment out the one in Harness.ts.
+// import "./_namespaces/tests";
+
+// If running as emitted CJS, we want to start the tests here after startTestEnvironment.
+// If running bundled, we will do this in Harness.ts.
+if (__filename.endsWith("runner.js")) {
+    require("./_namespaces/tests");
+}
diff --git a/src/tsconfig-base.json b/src/tsconfig-base.json
index d3ece6a19d..c07487870f 100644
--- a/src/tsconfig-base.json
+++ b/src/tsconfig-base.json
@@ -10,6 +10,7 @@
         "sourceMap": true,
         "composite": true,
         "noEmitOnError": true,
+        "emitDeclarationOnly": true,
 
         "strictNullChecks": true,
         "noImplicitAny": true,
diff --git a/src/tsconfig.json b/src/tsconfig.json
index f70352ca5e..79de8fdaa3 100644
--- a/src/tsconfig.json
+++ b/src/tsconfig.json
@@ -10,7 +10,6 @@
         { "path": "./watchGuard" },
         { "path": "./debug" },
         { "path": "./cancellationToken" },
-        { "path": "./dynamicImportCompat" },
         { "path": "./testRunner" },
     ]
 }
diff --git a/src/tsserver/nodeServer.ts b/src/tsserver/nodeServer.ts
index 9ea213f134..0f896e0e14 100644
--- a/src/tsserver/nodeServer.ts
+++ b/src/tsserver/nodeServer.ts
@@ -525,8 +525,9 @@ function startNodeSession(options: StartSessionOptions, logger: Logger, cancella
                 }
             }
 
-            // TODO(jakebailey): fix this for module transform
-            this.installer = childProcess.fork(combinePaths(__dirname, "..", "typingsInstaller", "nodeTypingsInstaller.js"), args, { execArgv });
+            // TODO(jakebailey): this is a little hacky; can we use sys?
+            const builtRoot = __filename.endsWith("nodeServer.js") ? combinePaths(__dirname, "..") : __dirname;
+            this.installer = childProcess.fork(combinePaths(builtRoot, "typingsInstaller.js"), args, { execArgv });
             this.installer.on("message", m => this.handleMessage(m));
 
             // We have to schedule this event to the next tick
diff --git a/src/watchGuard/tsconfig.json b/src/watchGuard/tsconfig.json
index eb1607930c..2276c1ad14 100644
--- a/src/watchGuard/tsconfig.json
+++ b/src/watchGuard/tsconfig.json
@@ -1,7 +1,9 @@
 {
     "extends": "../tsconfig-base",
     "compilerOptions": {
-        "outDir": "../../built/local/watchGuard",
+        "outDir": "../../built/local",
+        "tsBuildInfoFile": "../../built/local/watchGuard.tsbuildinfo",
+        "rootDir": ".",
         "types": [
             "node"
         ],
diff --git a/src/watchGuard/watchGuard.ts b/src/watchGuard/watchGuard.ts
index b66338f42e..c9589e048e 100644
--- a/src/watchGuard/watchGuard.ts
+++ b/src/watchGuard/watchGuard.ts
@@ -1,6 +1,6 @@
 /// <reference types="node" />
 
-import * as fs from "fs";
+import fs = require("fs");
 
 if (process.argv.length < 3) {
     process.exit(1);
diff --git a/src/webServer/webServer.ts b/src/webServer/webServer.ts
index ece05e4db6..4e8b241b28 100644
--- a/src/webServer/webServer.ts
+++ b/src/webServer/webServer.ts
@@ -1,4 +1,3 @@
-import * as server from "./_namespaces/ts.server";
 import {
     indent, Logger, LogLevel, ModuleImportResult, Msg, nowString, nullTypingsInstaller, protocol,
     ServerCancellationToken, ServerHost, Session, SessionOptions,
@@ -126,16 +125,11 @@ export class MainProcessLogger extends BaseLogger {
     }
 }
 
-// Attempt to load `dynamicImport`
-if (typeof importScripts === "function") {
-    try {
-        // NOTE: importScripts is synchronous
-        importScripts("dynamicImportCompat.js");
-    }
-    catch {
-        // ignored
-    }
-}
+/** @internal */
+// eslint-disable-next-line prefer-const
+export let dynamicImport = async (_id: string): Promise<any> => {
+    throw new Error("Dynamic import not implemented");
+};
 
 /** @internal */
 export function createWebSystem(host: WebHost, args: string[], getExecutingFilePath: () => string): ServerHost {
@@ -144,16 +138,6 @@ export function createWebSystem(host: WebHost, args: string[], getExecutingFileP
     // Later we could map ^memfs:/ to do something special if we want to enable more functionality like module resolution or something like that
     const getWebPath = (path: string) => startsWith(path, directorySeparator) ? path.replace(directorySeparator, getExecutingDirectoryPath()) : undefined;
 
-    const dynamicImport = async (id: string): Promise<any> => {
-        const serverDynamicImport: ((id: string) => Promise<any>) | undefined = (server as any).dynamicImport;
-        // Use syntactic dynamic import first, if available
-        if (serverDynamicImport) {
-            return serverDynamicImport(id);
-        }
-
-        throw new Error("Dynamic import not implemented");
-    };
-
     return {
         args,
         newLine: "\r\n", // This can be configured by clients
-- 
2.37.3

