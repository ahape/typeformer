From 5668c92c85f56f857568a1dd2f4fb5c9efa1e3e0 Mon Sep 17 00:00:00 2001
From: Alan Hape <ahape@brightmetrics.com>
Date: Thu, 24 Aug 2023 21:42:02 -0700
Subject: [PATCH] Add SystemJS library

---
 .../UI-2/scripts/libs/debug/system-6.14.2.js  | 1035 +++++++++++++++++
 .../UI-2/scripts/libs/system-6.14.2.min.js    |    5 +
 .../libs/types/system-6.13.0.d.ts/index.d.ts  |  114 ++
 3 files changed, 1154 insertions(+)
 create mode 100644 BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/debug/system-6.14.2.js
 create mode 100644 BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/system-6.14.2.min.js
 create mode 100644 BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/types/system-6.13.0.d.ts/index.d.ts

diff --git a/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/debug/system-6.14.2.js b/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/debug/system-6.14.2.js
new file mode 100644
index 0000000..1a1c0d5
--- /dev/null
+++ b/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/debug/system-6.14.2.js
@@ -0,0 +1,1035 @@
+/*!
+ * SystemJS 6.14.2
+ */
+(function () {
+
+  function errMsg(errCode, msg) {
+    return (msg || "") + " (SystemJS Error#" + errCode + " " + "https://github.com/systemjs/systemjs/blob/main/docs/errors.md#" + errCode + ")";
+  }
+
+  var hasSymbol = typeof Symbol !== 'undefined';
+  var hasSelf = typeof self !== 'undefined';
+  var hasDocument = typeof document !== 'undefined';
+
+  var envGlobal = hasSelf ? self : global;
+
+  var baseUrl;
+
+  if (hasDocument) {
+    var baseEl = document.querySelector('base[href]');
+    if (baseEl)
+      baseUrl = baseEl.href;
+  }
+
+  if (!baseUrl && typeof location !== 'undefined') {
+    baseUrl = location.href.split('#')[0].split('?')[0];
+    var lastSepIndex = baseUrl.lastIndexOf('/');
+    if (lastSepIndex !== -1)
+      baseUrl = baseUrl.slice(0, lastSepIndex + 1);
+  }
+
+  var backslashRegEx = /\\/g;
+  function resolveIfNotPlainOrUrl (relUrl, parentUrl) {
+    if (relUrl.indexOf('\\') !== -1)
+      relUrl = relUrl.replace(backslashRegEx, '/');
+    // protocol-relative
+    if (relUrl[0] === '/' && relUrl[1] === '/') {
+      return parentUrl.slice(0, parentUrl.indexOf(':') + 1) + relUrl;
+    }
+    // relative-url
+    else if (relUrl[0] === '.' && (relUrl[1] === '/' || relUrl[1] === '.' && (relUrl[2] === '/' || relUrl.length === 2 && (relUrl += '/')) ||
+        relUrl.length === 1  && (relUrl += '/')) ||
+        relUrl[0] === '/') {
+      var parentProtocol = parentUrl.slice(0, parentUrl.indexOf(':') + 1);
+      // Disabled, but these cases will give inconsistent results for deep backtracking
+      //if (parentUrl[parentProtocol.length] !== '/')
+      //  throw Error('Cannot resolve');
+      // read pathname from parent URL
+      // pathname taken to be part after leading "/"
+      var pathname;
+      if (parentUrl[parentProtocol.length + 1] === '/') {
+        // resolving to a :// so we need to read out the auth and host
+        if (parentProtocol !== 'file:') {
+          pathname = parentUrl.slice(parentProtocol.length + 2);
+          pathname = pathname.slice(pathname.indexOf('/') + 1);
+        }
+        else {
+          pathname = parentUrl.slice(8);
+        }
+      }
+      else {
+        // resolving to :/ so pathname is the /... part
+        pathname = parentUrl.slice(parentProtocol.length + (parentUrl[parentProtocol.length] === '/'));
+      }
+
+      if (relUrl[0] === '/')
+        return parentUrl.slice(0, parentUrl.length - pathname.length - 1) + relUrl;
+
+      // join together and split for removal of .. and . segments
+      // looping the string instead of anything fancy for perf reasons
+      // '../../../../../z' resolved to 'x/y' is just 'z'
+      var segmented = pathname.slice(0, pathname.lastIndexOf('/') + 1) + relUrl;
+
+      var output = [];
+      var segmentIndex = -1;
+      for (var i = 0; i < segmented.length; i++) {
+        // busy reading a segment - only terminate on '/'
+        if (segmentIndex !== -1) {
+          if (segmented[i] === '/') {
+            output.push(segmented.slice(segmentIndex, i + 1));
+            segmentIndex = -1;
+          }
+        }
+
+        // new segment - check if it is relative
+        else if (segmented[i] === '.') {
+          // ../ segment
+          if (segmented[i + 1] === '.' && (segmented[i + 2] === '/' || i + 2 === segmented.length)) {
+            output.pop();
+            i += 2;
+          }
+          // ./ segment
+          else if (segmented[i + 1] === '/' || i + 1 === segmented.length) {
+            i += 1;
+          }
+          else {
+            // the start of a new segment as below
+            segmentIndex = i;
+          }
+        }
+        // it is the start of a new segment
+        else {
+          segmentIndex = i;
+        }
+      }
+      // finish reading out the last segment
+      if (segmentIndex !== -1)
+        output.push(segmented.slice(segmentIndex));
+      return parentUrl.slice(0, parentUrl.length - pathname.length) + output.join('');
+    }
+  }
+
+  /*
+   * Import maps implementation
+   *
+   * To make lookups fast we pre-resolve the entire import map
+   * and then match based on backtracked hash lookups
+   *
+   */
+
+  function resolveUrl (relUrl, parentUrl) {
+    return resolveIfNotPlainOrUrl(relUrl, parentUrl) || (relUrl.indexOf(':') !== -1 ? relUrl : resolveIfNotPlainOrUrl('./' + relUrl, parentUrl));
+  }
+
+  function resolveAndComposePackages (packages, outPackages, baseUrl, parentMap, parentUrl) {
+    for (var p in packages) {
+      var resolvedLhs = resolveIfNotPlainOrUrl(p, baseUrl) || p;
+      var rhs = packages[p];
+      // package fallbacks not currently supported
+      if (typeof rhs !== 'string')
+        continue;
+      var mapped = resolveImportMap(parentMap, resolveIfNotPlainOrUrl(rhs, baseUrl) || rhs, parentUrl);
+      if (!mapped) {
+        targetWarning('W1', p, rhs, 'bare specifier did not resolve');
+      }
+      else
+        outPackages[resolvedLhs] = mapped;
+    }
+  }
+
+  function resolveAndComposeImportMap (json, baseUrl, outMap) {
+    if (json.imports)
+      resolveAndComposePackages(json.imports, outMap.imports, baseUrl, outMap, null);
+
+    var u;
+    for (u in json.scopes || {}) {
+      var resolvedScope = resolveUrl(u, baseUrl);
+      resolveAndComposePackages(json.scopes[u], outMap.scopes[resolvedScope] || (outMap.scopes[resolvedScope] = {}), baseUrl, outMap, resolvedScope);
+    }
+
+    for (u in json.depcache || {})
+      outMap.depcache[resolveUrl(u, baseUrl)] = json.depcache[u];
+    
+    for (u in json.integrity || {})
+      outMap.integrity[resolveUrl(u, baseUrl)] = json.integrity[u];
+  }
+
+  function getMatch (path, matchObj) {
+    if (matchObj[path])
+      return path;
+    var sepIndex = path.length;
+    do {
+      var segment = path.slice(0, sepIndex + 1);
+      if (segment in matchObj)
+        return segment;
+    } while ((sepIndex = path.lastIndexOf('/', sepIndex - 1)) !== -1)
+  }
+
+  function applyPackages (id, packages) {
+    var pkgName = getMatch(id, packages);
+    if (pkgName) {
+      var pkg = packages[pkgName];
+      if (pkg === null) return;
+      if (id.length > pkgName.length && pkg[pkg.length - 1] !== '/') {
+        targetWarning('W2', pkgName, pkg, "should have a trailing '/'");
+      }
+      else
+        return pkg + id.slice(pkgName.length);
+    }
+  }
+
+  function targetWarning (code, match, target, msg) {
+    console.warn(errMsg(code, "Package target " + msg + ", resolving target '" + target + "' for " + match));
+  }
+
+  function resolveImportMap (importMap, resolvedOrPlain, parentUrl) {
+    var scopes = importMap.scopes;
+    var scopeUrl = parentUrl && getMatch(parentUrl, scopes);
+    while (scopeUrl) {
+      var packageResolution = applyPackages(resolvedOrPlain, scopes[scopeUrl]);
+      if (packageResolution)
+        return packageResolution;
+      scopeUrl = getMatch(scopeUrl.slice(0, scopeUrl.lastIndexOf('/')), scopes);
+    }
+    return applyPackages(resolvedOrPlain, importMap.imports) || resolvedOrPlain.indexOf(':') !== -1 && resolvedOrPlain;
+  }
+
+  /*
+   * SystemJS Core
+   *
+   * Provides
+   * - System.import
+   * - System.register support for
+   *     live bindings, function hoisting through circular references,
+   *     reexports, dynamic import, import.meta.url, top-level await
+   * - System.getRegister to get the registration
+   * - Symbol.toStringTag support in Module objects
+   * - Hookable System.createContext to customize import.meta
+   * - System.onload(err, id, deps) handler for tracing / hot-reloading
+   *
+   * Core comes with no System.prototype.resolve or
+   * System.prototype.instantiate implementations
+   */
+
+  var toStringTag$1 = hasSymbol && Symbol.toStringTag;
+  var REGISTRY = hasSymbol ? Symbol() : '@';
+
+  function SystemJS () {
+    this[REGISTRY] = {};
+  }
+
+  var systemJSPrototype = SystemJS.prototype;
+
+  systemJSPrototype.import = function (id, parentUrl, meta) {
+    var loader = this;
+    (parentUrl && typeof parentUrl === 'object') && (meta = parentUrl, parentUrl = undefined);
+    return Promise.resolve(loader.prepareImport())
+    .then(function() {
+      return loader.resolve(id, parentUrl, meta);
+    })
+    .then(function (id) {
+      var load = getOrCreateLoad(loader, id, undefined, meta);
+      return load.C || topLevelLoad(loader, load);
+    });
+  };
+
+  // Hookable createContext function -> allowing eg custom import meta
+  systemJSPrototype.createContext = function (parentId) {
+    var loader = this;
+    return {
+      url: parentId,
+      resolve: function (id, parentUrl) {
+        return Promise.resolve(loader.resolve(id, parentUrl || parentId));
+      }
+    };
+  };
+
+  // onLoad(err, id, deps) provided for tracing / hot-reloading
+  systemJSPrototype.onload = function () {};
+  function loadToId (load) {
+    return load.id;
+  }
+  function triggerOnload (loader, load, err, isErrSource) {
+    loader.onload(err, load.id, load.d && load.d.map(loadToId), !!isErrSource);
+    if (err)
+      throw err;
+  }
+
+  var lastRegister;
+  systemJSPrototype.register = function (deps, declare, metas) {
+    lastRegister = [deps, declare, metas];
+  };
+
+  /*
+   * getRegister provides the last anonymous System.register call
+   */
+  systemJSPrototype.getRegister = function () {
+    var _lastRegister = lastRegister;
+    lastRegister = undefined;
+    return _lastRegister;
+  };
+
+  function getOrCreateLoad (loader, id, firstParentUrl, meta) {
+    var load = loader[REGISTRY][id];
+    if (load)
+      return load;
+
+    var importerSetters = [];
+    var ns = Object.create(null);
+    if (toStringTag$1)
+      Object.defineProperty(ns, toStringTag$1, { value: 'Module' });
+
+    var instantiatePromise = Promise.resolve()
+    .then(function () {
+      return loader.instantiate(id, firstParentUrl, meta);
+    })
+    .then(function (registration) {
+      if (!registration)
+        throw Error(errMsg(2, 'Module ' + id + ' did not instantiate'));
+      function _export (name, value) {
+        // note if we have hoisted exports (including reexports)
+        load.h = true;
+        var changed = false;
+        if (typeof name === 'string') {
+          if (!(name in ns) || ns[name] !== value) {
+            ns[name] = value;
+            changed = true;
+          }
+        }
+        else {
+          for (var p in name) {
+            var value = name[p];
+            if (!(p in ns) || ns[p] !== value) {
+              ns[p] = value;
+              changed = true;
+            }
+          }
+
+          if (name && name.__esModule) {
+            ns.__esModule = name.__esModule;
+          }
+        }
+        if (changed)
+          for (var i = 0; i < importerSetters.length; i++) {
+            var setter = importerSetters[i];
+            if (setter) setter(ns);
+          }
+        return value;
+      }
+      var declared = registration[1](_export, registration[1].length === 2 ? {
+        import: function (importId, meta) {
+          return loader.import(importId, id, meta);
+        },
+        meta: loader.createContext(id)
+      } : undefined);
+      load.e = declared.execute || function () {};
+      return [registration[0], declared.setters || [], registration[2] || []];
+    }, function (err) {
+      load.e = null;
+      load.er = err;
+      triggerOnload(loader, load, err, true);
+      throw err;
+    });
+
+    var linkPromise = instantiatePromise
+    .then(function (instantiation) {
+      return Promise.all(instantiation[0].map(function (dep, i) {
+        var setter = instantiation[1][i];
+        var meta = instantiation[2][i];
+        return Promise.resolve(loader.resolve(dep, id))
+        .then(function (depId) {
+          var depLoad = getOrCreateLoad(loader, depId, id, meta);
+          // depLoad.I may be undefined for already-evaluated
+          return Promise.resolve(depLoad.I)
+          .then(function () {
+            if (setter) {
+              depLoad.i.push(setter);
+              // only run early setters when there are hoisted exports of that module
+              // the timing works here as pending hoisted export calls will trigger through importerSetters
+              if (depLoad.h || !depLoad.I)
+                setter(depLoad.n);
+            }
+            return depLoad;
+          });
+        });
+      }))
+      .then(function (depLoads) {
+        load.d = depLoads;
+      });
+    });
+
+    // Capital letter = a promise function
+    return load = loader[REGISTRY][id] = {
+      id: id,
+      // importerSetters, the setters functions registered to this dependency
+      // we retain this to add more later
+      i: importerSetters,
+      // module namespace object
+      n: ns,
+      // extra module information for import assertion
+      // shape like: { assert: { type: 'xyz' } }
+      m: meta,
+
+      // instantiate
+      I: instantiatePromise,
+      // link
+      L: linkPromise,
+      // whether it has hoisted exports
+      h: false,
+
+      // On instantiate completion we have populated:
+      // dependency load records
+      d: undefined,
+      // execution function
+      e: undefined,
+
+      // On execution we have populated:
+      // the execution error if any
+      er: undefined,
+      // in the case of TLA, the execution promise
+      E: undefined,
+
+      // On execution, L, I, E cleared
+
+      // Promise for top-level completion
+      C: undefined,
+
+      // parent instantiator / executor
+      p: undefined
+    };
+  }
+
+  function instantiateAll (loader, load, parent, loaded) {
+    if (!loaded[load.id]) {
+      loaded[load.id] = true;
+      // load.L may be undefined for already-instantiated
+      return Promise.resolve(load.L)
+      .then(function () {
+        if (!load.p || load.p.e === null)
+          load.p = parent;
+        return Promise.all(load.d.map(function (dep) {
+          return instantiateAll(loader, dep, parent, loaded);
+        }));
+      })
+      .catch(function (err) {
+        if (load.er)
+          throw err;
+        load.e = null;
+        triggerOnload(loader, load, err, false);
+        throw err;
+      });
+    }
+  }
+
+  function topLevelLoad (loader, load) {
+    return load.C = instantiateAll(loader, load, load, {})
+    .then(function () {
+      return postOrderExec(loader, load, {});
+    })
+    .then(function () {
+      return load.n;
+    });
+  }
+
+  // the closest we can get to call(undefined)
+  var nullContext = Object.freeze(Object.create(null));
+
+  // returns a promise if and only if a top-level await subgraph
+  // throws on sync errors
+  function postOrderExec (loader, load, seen) {
+    if (seen[load.id])
+      return;
+    seen[load.id] = true;
+
+    if (!load.e) {
+      if (load.er)
+        throw load.er;
+      if (load.E)
+        return load.E;
+      return;
+    }
+
+    // From here we're about to execute the load.
+    // Because the execution may be async, we pop the `load.e` first.
+    // So `load.e === null` always means the load has been executed or is executing.
+    // To inspect the state:
+    // - If `load.er` is truthy, the execution has threw or has been rejected;
+    // - otherwise, either the `load.E` is a promise, means it's under async execution, or
+    // - the `load.E` is null, means the load has completed the execution or has been async resolved.
+    var exec = load.e;
+    load.e = null;
+
+    // deps execute first, unless circular
+    var depLoadPromises;
+    load.d.forEach(function (depLoad) {
+      try {
+        var depLoadPromise = postOrderExec(loader, depLoad, seen);
+        if (depLoadPromise)
+          (depLoadPromises = depLoadPromises || []).push(depLoadPromise);
+      }
+      catch (err) {
+        load.er = err;
+        triggerOnload(loader, load, err, false);
+        throw err;
+      }
+    });
+    if (depLoadPromises)
+      return Promise.all(depLoadPromises).then(doExec);
+
+    return doExec();
+
+    function doExec () {
+      try {
+        var execPromise = exec.call(nullContext);
+        if (execPromise) {
+          execPromise = execPromise.then(function () {
+            load.C = load.n;
+            load.E = null; // indicates completion
+            if (!false) triggerOnload(loader, load, null, true);
+          }, function (err) {
+            load.er = err;
+            load.E = null;
+            if (!false) triggerOnload(loader, load, err, true);
+            throw err;
+          });
+          return load.E = execPromise;
+        }
+        // (should be a promise, but a minify optimization to leave out Promise.resolve)
+        load.C = load.n;
+        load.L = load.I = undefined;
+      }
+      catch (err) {
+        load.er = err;
+        throw err;
+      }
+      finally {
+        triggerOnload(loader, load, load.er, true);
+      }
+    }
+  }
+
+  envGlobal.System = new SystemJS();
+
+  /*
+   * SystemJS browser attachments for script and import map processing
+   */
+
+  var importMapPromise = Promise.resolve();
+  var importMap = { imports: {}, scopes: {}, depcache: {}, integrity: {} };
+
+  // Scripts are processed immediately, on the first System.import, and on DOMReady.
+  // Import map scripts are processed only once (by being marked) and in order for each phase.
+  // This is to avoid using DOM mutation observers in core, although that would be an alternative.
+  var processFirst = hasDocument;
+  systemJSPrototype.prepareImport = function (doProcessScripts) {
+    if (processFirst || doProcessScripts) {
+      processScripts();
+      processFirst = false;
+    }
+    return importMapPromise;
+  };
+  if (hasDocument) {
+    processScripts();
+    window.addEventListener('DOMContentLoaded', processScripts);
+  }
+  systemJSPrototype.addImportMap = function (newMap, mapBase) {
+    resolveAndComposeImportMap(newMap, mapBase || baseUrl, importMap);
+  };
+
+  function processScripts () {
+    [].forEach.call(document.querySelectorAll('script'), function (script) {
+      if (script.sp) // sp marker = systemjs processed
+        return;
+      // TODO: deprecate systemjs-module in next major now that we have auto import
+      if (script.type === 'systemjs-module') {
+        script.sp = true;
+        if (!script.src)
+          return;
+        System.import(script.src.slice(0, 7) === 'import:' ? script.src.slice(7) : resolveUrl(script.src, baseUrl)).catch(function (e) {
+          // if there is a script load error, dispatch an "error" event
+          // on the script tag.
+          if (e.message.indexOf('https://github.com/systemjs/systemjs/blob/main/docs/errors.md#3') > -1) {
+            var event = document.createEvent('Event');
+            event.initEvent('error', false, false);
+            script.dispatchEvent(event);
+          }
+          return Promise.reject(e);
+        });
+      }
+      else if (script.type === 'systemjs-importmap') {
+        script.sp = true;
+        // The passThrough property is for letting the module types fetch implementation know that this is not a SystemJS module.
+        var fetchPromise = script.src ? (System.fetch || fetch)(script.src, { integrity: script.integrity, passThrough: true }).then(function (res) {
+          if (!res.ok)
+            throw Error('Invalid status code: ' + res.status);
+          return res.text();
+        }).catch(function (err) {
+          err.message = errMsg('W4', 'Error fetching systemjs-import map ' + script.src) + '\n' + err.message;
+          console.warn(err);
+          if (typeof script.onerror === 'function') {
+              script.onerror();
+          }
+          return '{}';
+        }) : script.innerHTML;
+        importMapPromise = importMapPromise.then(function () {
+          return fetchPromise;
+        }).then(function (text) {
+          extendImportMap(importMap, text, script.src || baseUrl);
+        });
+      }
+    });
+  }
+
+  function extendImportMap (importMap, newMapText, newMapUrl) {
+    var newMap = {};
+    try {
+      newMap = JSON.parse(newMapText);
+    } catch (err) {
+      console.warn(Error((errMsg('W5', "systemjs-importmap contains invalid JSON") + '\n\n' + newMapText + '\n' )));
+    }
+    resolveAndComposeImportMap(newMap, newMapUrl, importMap);
+  }
+
+  /*
+   * Script instantiation loading
+   */
+
+  if (hasDocument) {
+    window.addEventListener('error', function (evt) {
+      lastWindowErrorUrl = evt.filename;
+      lastWindowError = evt.error;
+    });
+    var baseOrigin = location.origin;
+  }
+
+  systemJSPrototype.createScript = function (url) {
+    var script = document.createElement('script');
+    script.async = true;
+    // Only add cross origin for actual cross origin
+    // this is because Safari triggers for all
+    // - https://bugs.webkit.org/show_bug.cgi?id=171566
+    if (url.indexOf(baseOrigin + '/'))
+      script.crossOrigin = 'anonymous';
+    var integrity = importMap.integrity[url];
+    if (integrity)
+      script.integrity = integrity;
+    script.src = url;
+    return script;
+  };
+
+  // Auto imports -> script tags can be inlined directly for load phase
+  var lastAutoImportDeps, lastAutoImportTimeout;
+  var autoImportCandidates = {};
+  var systemRegister = systemJSPrototype.register;
+  systemJSPrototype.register = function (deps, declare) {
+    if (hasDocument && document.readyState === 'loading' && typeof deps !== 'string') {
+      var scripts = document.querySelectorAll('script[src]');
+      var lastScript = scripts[scripts.length - 1];
+      if (lastScript) {
+        lastScript.src;
+        lastAutoImportDeps = deps;
+        // if this is already a System load, then the instantiate has already begun
+        // so this re-import has no consequence
+        var loader = this;
+        lastAutoImportTimeout = setTimeout(function () {
+          autoImportCandidates[lastScript.src] = [deps, declare];
+          loader.import(lastScript.src);
+        });
+      }
+    }
+    else {
+      lastAutoImportDeps = undefined;
+    }
+    return systemRegister.call(this, deps, declare);
+  };
+
+  var lastWindowErrorUrl, lastWindowError;
+  systemJSPrototype.instantiate = function (url, firstParentUrl) {
+    var autoImportRegistration = autoImportCandidates[url];
+    if (autoImportRegistration) {
+      delete autoImportCandidates[url];
+      return autoImportRegistration;
+    }
+    var loader = this;
+    return Promise.resolve(systemJSPrototype.createScript(url)).then(function (script) {
+      return new Promise(function (resolve, reject) {
+        script.addEventListener('error', function () {
+          reject(Error(errMsg(3, 'Error loading ' + url + (firstParentUrl ? ' from ' + firstParentUrl : ''))));
+        });
+        script.addEventListener('load', function () {
+          document.head.removeChild(script);
+          // Note that if an error occurs that isn't caught by this if statement,
+          // that getRegister will return null and a "did not instantiate" error will be thrown.
+          if (lastWindowErrorUrl === url) {
+            reject(lastWindowError);
+          }
+          else {
+            var register = loader.getRegister(url);
+            // Clear any auto import registration for dynamic import scripts during load
+            if (register && register[0] === lastAutoImportDeps)
+              clearTimeout(lastAutoImportTimeout);
+            resolve(register);
+          }
+        });
+        document.head.appendChild(script);
+      });
+    });
+  };
+
+  /*
+   * Fetch loader, sets up shouldFetch and fetch hooks
+   */
+  systemJSPrototype.shouldFetch = function () {
+    return false;
+  };
+  if (typeof fetch !== 'undefined')
+    systemJSPrototype.fetch = fetch;
+
+  var instantiate = systemJSPrototype.instantiate;
+  var jsContentTypeRegEx = /^(text|application)\/(x-)?javascript(;|$)/;
+  systemJSPrototype.instantiate = function (url, parent, meta) {
+    var loader = this;
+    if (!this.shouldFetch(url, parent, meta))
+      return instantiate.apply(this, arguments);
+    return this.fetch(url, {
+      credentials: 'same-origin',
+      integrity: importMap.integrity[url],
+      meta: meta,
+    })
+    .then(function (res) {
+      if (!res.ok)
+        throw Error(errMsg(7, res.status + ' ' + res.statusText + ', loading ' + url + (parent ? ' from ' + parent : '')));
+      var contentType = res.headers.get('content-type');
+      if (!contentType || !jsContentTypeRegEx.test(contentType))
+        throw Error(errMsg(4, 'Unknown Content-Type "' + contentType + '", loading ' + url + (parent ? ' from ' + parent : '')));
+      return res.text().then(function (source) {
+        if (source.indexOf('//# sourceURL=') < 0)
+          source += '\n//# sourceURL=' + url;
+        (0, eval)(source);
+        return loader.getRegister(url);
+      });
+    });
+  };
+
+  systemJSPrototype.resolve = function (id, parentUrl) {
+    parentUrl = parentUrl || !true  || baseUrl;
+    return resolveImportMap((importMap), resolveIfNotPlainOrUrl(id, parentUrl) || id, parentUrl) || throwUnresolved(id, parentUrl);
+  };
+
+  function throwUnresolved (id, parentUrl) {
+    throw Error(errMsg(8, "Unable to resolve bare specifier '" + id + (parentUrl ? "' from " + parentUrl : "'")));
+  }
+
+  var systemInstantiate = systemJSPrototype.instantiate;
+  systemJSPrototype.instantiate = function (url, firstParentUrl, meta) {
+    var preloads = (importMap).depcache[url];
+    if (preloads) {
+      for (var i = 0; i < preloads.length; i++)
+        getOrCreateLoad(this, this.resolve(preloads[i], url), url);
+    }
+    return systemInstantiate.call(this, url, firstParentUrl, meta);
+  };
+
+  /*
+   * Supports loading System.register in workers
+   */
+
+  if (hasSelf && typeof importScripts === 'function')
+    systemJSPrototype.instantiate = function (url) {
+      var loader = this;
+      return Promise.resolve().then(function () {
+        importScripts(url);
+        return loader.getRegister(url);
+      });
+    };
+
+  /*
+   * SystemJS global script loading support
+   * Extra for the s.js build only
+   * (Included by default in system.js build)
+   */
+  (function (global) {
+    var systemJSPrototype = global.System.constructor.prototype;
+
+    // safari unpredictably lists some new globals first or second in object order
+    var firstGlobalProp, secondGlobalProp, lastGlobalProp;
+    function getGlobalProp (useFirstGlobalProp) {
+      var cnt = 0;
+      var foundLastProp, result;
+      for (var p in global) {
+        // do not check frames cause it could be removed during import
+        if (shouldSkipProperty(p))
+          continue;
+        if (cnt === 0 && p !== firstGlobalProp || cnt === 1 && p !== secondGlobalProp)
+          return p;
+        if (foundLastProp) {
+          lastGlobalProp = p;
+          result = useFirstGlobalProp && result || p;
+        }
+        else {
+          foundLastProp = p === lastGlobalProp;
+        }
+        cnt++;
+      }
+      return result;
+    }
+
+    function noteGlobalProps () {
+      // alternatively Object.keys(global).pop()
+      // but this may be faster (pending benchmarks)
+      firstGlobalProp = secondGlobalProp = undefined;
+      for (var p in global) {
+        // do not check frames cause it could be removed during import
+        if (shouldSkipProperty(p))
+          continue;
+        if (!firstGlobalProp)
+          firstGlobalProp = p;
+        else if (!secondGlobalProp)
+          secondGlobalProp = p;
+        lastGlobalProp = p;
+      }
+      return lastGlobalProp;
+    }
+
+    var impt = systemJSPrototype.import;
+    systemJSPrototype.import = function (id, parentUrl, meta) {
+      noteGlobalProps();
+      return impt.call(this, id, parentUrl, meta);
+    };
+
+    var emptyInstantiation = [[], function () { return {} }];
+
+    var getRegister = systemJSPrototype.getRegister;
+    systemJSPrototype.getRegister = function () {
+      var lastRegister = getRegister.call(this);
+      if (lastRegister)
+        return lastRegister;
+
+      // no registration -> attempt a global detection as difference from snapshot
+      // when multiple globals, we take the global value to be the last defined new global object property
+      // for performance, this will not support multi-version / global collisions as previous SystemJS versions did
+      // note in Edge, deleting and re-adding a global does not change its ordering
+      var globalProp = getGlobalProp(this.firstGlobalProp);
+      if (!globalProp)
+        return emptyInstantiation;
+
+      var globalExport;
+      try {
+        globalExport = global[globalProp];
+      }
+      catch (e) {
+        return emptyInstantiation;
+      }
+
+      return [[], function (_export) {
+        return {
+          execute: function () {
+            _export(globalExport);
+            _export({ default: globalExport, __useDefault: true });
+          }
+        };
+      }];
+    };
+
+    var isIE11 = typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Trident') !== -1;
+
+    function shouldSkipProperty(p) {
+      return !global.hasOwnProperty(p)
+        || !isNaN(p) && p < global.length
+        || isIE11 && global[p] && typeof window !== 'undefined' && global[p].parent === window;
+    }
+  })(typeof self !== 'undefined' ? self : global);
+
+  /*
+   * Loads JSON, CSS, Wasm module types based on file extension
+   * filters and content type verifications
+   */
+  (function(global) {
+    var systemJSPrototype = global.System.constructor.prototype;
+
+    var moduleTypesRegEx = /^[^#?]+\.(css|html|json|wasm)([?#].*)?$/;
+    var _shouldFetch = systemJSPrototype.shouldFetch.bind(systemJSPrototype);
+    systemJSPrototype.shouldFetch = function (url) {
+      return _shouldFetch(url) || moduleTypesRegEx.test(url);
+    };
+
+    var jsonContentType = /^application\/json(;|$)/;
+    var cssContentType = /^text\/css(;|$)/;
+    var wasmContentType = /^application\/wasm(;|$)/;
+
+    var fetch = systemJSPrototype.fetch;
+    systemJSPrototype.fetch = function (url, options) {
+      return fetch(url, options)
+      .then(function (res) {
+        if (options.passThrough)
+          return res;
+
+        if (!res.ok)
+          return res;
+        var contentType = res.headers.get('content-type');
+        if (jsonContentType.test(contentType))
+          return res.json()
+          .then(function (json) {
+            return new Response(new Blob([
+              'System.register([],function(e){return{execute:function(){e("default",' + JSON.stringify(json) + ')}}})'
+            ], {
+              type: 'application/javascript'
+            }));
+          });
+        if (cssContentType.test(contentType))
+          return res.text()
+          .then(function (source) {
+            source = source.replace(/url\(\s*(?:(["'])((?:\\.|[^\n\\"'])+)\1|((?:\\.|[^\s,"'()\\])+))\s*\)/g, function (match, quotes, relUrl1, relUrl2) {
+              return ['url(', quotes, resolveUrl(relUrl1 || relUrl2, url), quotes, ')'].join('');
+            });
+            return new Response(new Blob([
+              'System.register([],function(e){return{execute:function(){var s=new CSSStyleSheet();s.replaceSync(' + JSON.stringify(source) + ');e("default",s)}}})'
+            ], {
+              type: 'application/javascript'
+            }));
+          });
+        if (wasmContentType.test(contentType))
+          return (WebAssembly.compileStreaming ? WebAssembly.compileStreaming(res) : res.arrayBuffer().then(WebAssembly.compile))
+          .then(function (module) {
+            if (!global.System.wasmModules)
+              global.System.wasmModules = Object.create(null);
+            global.System.wasmModules[url] = module;
+            // we can only set imports if supported (eg early Safari doesnt support)
+            var deps = [];
+            var setterSources = [];
+            if (WebAssembly.Module.imports)
+              WebAssembly.Module.imports(module).forEach(function (impt) {
+                var key = JSON.stringify(impt.module);
+                if (deps.indexOf(key) === -1) {
+                  deps.push(key);
+                  setterSources.push('function(m){i[' + key + ']=m}');
+                }
+              });
+            return new Response(new Blob([
+              'System.register([' + deps.join(',') + '],function(e){var i={};return{setters:[' + setterSources.join(',') +
+              '],execute:function(){return WebAssembly.instantiate(System.wasmModules[' + JSON.stringify(url) +
+              '],i).then(function(m){e(m.exports)})}}})'
+            ], {
+              type: 'application/javascript'
+            }));
+          });
+        return res;
+      });
+    };
+  })(typeof self !== 'undefined' ? self : global);
+
+  var toStringTag = typeof Symbol !== 'undefined' && Symbol.toStringTag;
+
+  systemJSPrototype.get = function (id) {
+    var load = this[REGISTRY][id];
+    if (load && load.e === null && !load.E) {
+      if (load.er)
+        return null;
+      return load.n;
+    }
+  };
+
+  systemJSPrototype.set = function (id, module) {
+    {
+      try {
+        // No page-relative URLs allowed
+        new URL(id);
+      } catch (err) {
+        console.warn(Error(errMsg('W3', '"' + id + '" is not a valid URL to set in the module registry')));
+      }
+    }
+    var ns;
+    if (toStringTag && module[toStringTag] === 'Module') {
+      ns = module;
+    }
+    else {
+      ns = Object.assign(Object.create(null), module);
+      if (toStringTag)
+        Object.defineProperty(ns, toStringTag, { value: 'Module' });
+    }
+
+    var done = Promise.resolve(ns);
+
+    var load = this[REGISTRY][id] || (this[REGISTRY][id] = {
+      id: id,
+      i: [],
+      h: false,
+      d: [],
+      e: null,
+      er: undefined,
+      E: undefined
+    });
+
+    if (load.e || load.E)
+      return false;
+    
+    Object.assign(load, {
+      n: ns,
+      I: undefined,
+      L: undefined,
+      C: done
+    });
+    return ns;
+  };
+
+  systemJSPrototype.has = function (id) {
+    var load = this[REGISTRY][id];
+    return !!load;
+  };
+
+  // Delete function provided for hot-reloading use cases
+  systemJSPrototype.delete = function (id) {
+    var registry = this[REGISTRY];
+    var load = registry[id];
+    // in future we can support load.E case by failing load first
+    // but that will require TLA callbacks to be implemented
+    if (!load || (load.p && load.p.e !== null) || load.E)
+      return false;
+
+    var importerSetters = load.i;
+    // remove from importerSetters
+    // (release for gc)
+    if (load.d)
+      load.d.forEach(function (depLoad) {
+        var importerIndex = depLoad.i.indexOf(load);
+        if (importerIndex !== -1)
+          depLoad.i.splice(importerIndex, 1);
+      });
+    delete registry[id];
+    return function () {
+      var load = registry[id];
+      if (!load || !importerSetters || load.e !== null || load.E)
+        return false;
+      // add back the old setters
+      importerSetters.forEach(function (setter) {
+        load.i.push(setter);
+        setter(load.n);
+      });
+      importerSetters = null;
+    };
+  };
+
+  var iterator = typeof Symbol !== 'undefined' && Symbol.iterator;
+
+  systemJSPrototype.entries = function () {
+    var loader = this, keys = Object.keys(loader[REGISTRY]);
+    var index = 0, ns, key;
+    var result = {
+      next: function () {
+        while (
+          (key = keys[index++]) !== undefined && 
+          (ns = loader.get(key)) === undefined
+        );
+        return {
+          done: key === undefined,
+          value: key !== undefined && [key, ns]
+        };
+      }
+    };
+
+    result[iterator] = function() { return this };
+
+    return result;
+  };
+
+})();
diff --git a/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/system-6.14.2.min.js b/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/system-6.14.2.min.js
new file mode 100644
index 0000000..4b089ee
--- /dev/null
+++ b/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/system-6.14.2.min.js
@@ -0,0 +1,5 @@
+/*!
+ * SystemJS 6.14.2
+ */
+!function(){function e(e,t){return(t||"")+" (SystemJS Error#"+e+" https://github.com/systemjs/systemjs/blob/main/docs/errors.md#"+e+")"}function t(e,t){if(-1!==e.indexOf("\\")&&(e=e.replace(j,"/")),"/"===e[0]&&"/"===e[1])return t.slice(0,t.indexOf(":")+1)+e;if("."===e[0]&&("/"===e[1]||"."===e[1]&&("/"===e[2]||2===e.length&&(e+="/"))||1===e.length&&(e+="/"))||"/"===e[0]){var n,r=t.slice(0,t.indexOf(":")+1);if(n="/"===t[r.length+1]?"file:"!==r?(n=t.slice(r.length+2)).slice(n.indexOf("/")+1):t.slice(8):t.slice(r.length+("/"===t[r.length])),"/"===e[0])return t.slice(0,t.length-n.length-1)+e;for(var i=n.slice(0,n.lastIndexOf("/")+1)+e,o=[],s=-1,u=0;u<i.length;u++)-1!==s?"/"===i[u]&&(o.push(i.slice(s,u+1)),s=-1):"."===i[u]?"."!==i[u+1]||"/"!==i[u+2]&&u+2!==i.length?"/"===i[u+1]||u+1===i.length?u+=1:s=u:(o.pop(),u+=2):s=u;return-1!==s&&o.push(i.slice(s)),t.slice(0,t.length-n.length)+o.join("")}}function n(e,n){return t(e,n)||(-1!==e.indexOf(":")?e:t("./"+e,n))}function r(e,n,r,i,o){for(var s in e){var a=t(s,r)||s,f=e[s];if("string"==typeof f){var l=c(i,t(f,r)||f,o);l?n[a]=l:u("W1",s,f,"bare specifier did not resolve")}}}function i(e,t,i){var o;for(o in e.imports&&r(e.imports,i.imports,t,i,null),e.scopes||{}){var s=n(o,t);r(e.scopes[o],i.scopes[s]||(i.scopes[s]={}),t,i,s)}for(o in e.depcache||{})i.depcache[n(o,t)]=e.depcache[o];for(o in e.integrity||{})i.integrity[n(o,t)]=e.integrity[o]}function o(e,t){if(t[e])return e;var n=e.length;do{var r=e.slice(0,n+1);if(r in t)return r}while(-1!==(n=e.lastIndexOf("/",n-1)))}function s(e,t){var n=o(e,t);if(n){var r=t[n];if(null===r)return;if(!(e.length>n.length&&"/"!==r[r.length-1]))return r+e.slice(n.length);u("W2",n,r,"should have a trailing '/'")}}function u(t,n,r,i){console.warn(e(t,"Package target "+i+", resolving target '"+r+"' for "+n))}function c(e,t,n){for(var r=e.scopes,i=n&&o(n,r);i;){var u=s(t,r[i]);if(u)return u;i=o(i.slice(0,i.lastIndexOf("/")),r)}return s(t,e.imports)||-1!==t.indexOf(":")&&t}function a(){this[M]={}}function f(e){return e.id}function l(e,t,n,r){if(e.onload(n,t.id,t.d&&t.d.map(f),!!r),n)throw n}function d(t,n,r,i){var o=t[M][n];if(o)return o;var s=[],u=Object.create(null);P&&Object.defineProperty(u,P,{value:"Module"});var c=Promise.resolve().then((function(){return t.instantiate(n,r,i)})).then((function(r){if(!r)throw Error(e(2,"Module "+n+" did not instantiate"));var i=r[1]((function(e,t){o.h=!0;var n=!1;if("string"==typeof e)e in u&&u[e]===t||(u[e]=t,n=!0);else{for(var r in e)t=e[r],r in u&&u[r]===t||(u[r]=t,n=!0);e&&e.__esModule&&(u.__esModule=e.__esModule)}if(n)for(var i=0;i<s.length;i++){var c=s[i];c&&c(u)}return t}),2===r[1].length?{import:function(e,r){return t.import(e,n,r)},meta:t.createContext(n)}:void 0);return o.e=i.execute||function(){},[r[0],i.setters||[],r[2]||[]]}),(function(e){throw o.e=null,o.er=e,l(t,o,e,!0),e})),a=c.then((function(e){return Promise.all(e[0].map((function(r,i){var o=e[1][i],s=e[2][i];return Promise.resolve(t.resolve(r,n)).then((function(e){var r=d(t,e,n,s);return Promise.resolve(r.I).then((function(){return o&&(r.i.push(o),!r.h&&r.I||o(r.n)),r}))}))}))).then((function(e){o.d=e}))}));return o=t[M][n]={id:n,i:s,n:u,m:i,I:c,L:a,h:!1,d:void 0,e:void 0,er:void 0,E:void 0,C:void 0,p:void 0}}function h(e,t,n,r){if(!r[t.id])return r[t.id]=!0,Promise.resolve(t.L).then((function(){return t.p&&null!==t.p.e||(t.p=n),Promise.all(t.d.map((function(t){return h(e,t,n,r)})))})).catch((function(n){if(t.er)throw n;throw t.e=null,l(e,t,n,!1),n}))}function p(e,t){return t.C=h(e,t,t,{}).then((function(){return v(e,t,{})})).then((function(){return t.n}))}function v(e,t,n){function r(){try{var n=o.call(C);if(n)return n=n.then((function(){t.C=t.n,t.E=null,l(e,t,null,!0)}),(function(n){throw t.er=n,t.E=null,l(e,t,n,!0),n})),t.E=n;t.C=t.n,t.L=t.I=void 0}catch(r){throw t.er=r,r}finally{l(e,t,t.er,!0)}}if(!n[t.id]){if(n[t.id]=!0,!t.e){if(t.er)throw t.er;return t.E?t.E:void 0}var i,o=t.e;return t.e=null,t.d.forEach((function(r){try{var o=v(e,r,n);o&&(i=i||[]).push(o)}catch(s){throw t.er=s,l(e,t,s,!1),s}})),i?Promise.all(i).then(r):r()}}function m(){[].forEach.call(document.querySelectorAll("script"),(function(t){if(!t.sp)if("systemjs-module"===t.type){if(t.sp=!0,!t.src)return;System.import("import:"===t.src.slice(0,7)?t.src.slice(7):n(t.src,g)).catch((function(e){if(e.message.indexOf("https://github.com/systemjs/systemjs/blob/main/docs/errors.md#3")>-1){var n=document.createEvent("Event");n.initEvent("error",!1,!1),t.dispatchEvent(n)}return Promise.reject(e)}))}else if("systemjs-importmap"===t.type){t.sp=!0;var r=t.src?(System.fetch||fetch)(t.src,{integrity:t.integrity,passThrough:!0}).then((function(e){if(!e.ok)throw Error("Invalid status code: "+e.status);return e.text()})).catch((function(n){return n.message=e("W4","Error fetching systemjs-import map "+t.src)+"\n"+n.message,console.warn(n),"function"==typeof t.onerror&&t.onerror(),"{}"})):t.innerHTML;W=W.then((function(){return r})).then((function(n){!function(t,n,r){var o={};try{o=JSON.parse(n)}catch(s){console.warn(Error(e("W5","systemjs-importmap contains invalid JSON")+"\n\n"+n+"\n"))}i(o,r,t)}(T,n,t.src||g)}))}}))}var g,y="undefined"!=typeof Symbol,b="undefined"!=typeof self,w="undefined"!=typeof document,S=b?self:global;if(w){var E=document.querySelector("base[href]");E&&(g=E.href)}if(!g&&"undefined"!=typeof location){var O=(g=location.href.split("#")[0].split("?")[0]).lastIndexOf("/");-1!==O&&(g=g.slice(0,O+1))}var x,j=/\\/g,P=y&&Symbol.toStringTag,M=y?Symbol():"@",L=a.prototype;L.import=function(e,t,n){var r=this;return t&&"object"==typeof t&&(n=t,t=void 0),Promise.resolve(r.prepareImport()).then((function(){return r.resolve(e,t,n)})).then((function(e){var t=d(r,e,void 0,n);return t.C||p(r,t)}))},L.createContext=function(e){var t=this;return{url:e,resolve:function(n,r){return Promise.resolve(t.resolve(n,r||e))}}},L.onload=function(){},L.register=function(e,t,n){x=[e,t,n]},L.getRegister=function(){var e=x;return x=void 0,e};var C=Object.freeze(Object.create(null));S.System=new a;var I,R,W=Promise.resolve(),T={imports:{},scopes:{},depcache:{},integrity:{}},A=w;if(L.prepareImport=function(e){return(A||e)&&(m(),A=!1),W},w&&(m(),window.addEventListener("DOMContentLoaded",m)),L.addImportMap=function(e,t){i(e,t||g,T)},w){window.addEventListener("error",(function(e){_=e.filename,J=e.error}));var N=location.origin}L.createScript=function(e){var t=document.createElement("script");t.async=!0,e.indexOf(N+"/")&&(t.crossOrigin="anonymous");var n=T.integrity[e];return n&&(t.integrity=n),t.src=e,t};var _,J,k={},U=L.register;L.register=function(e,t){if(w&&"loading"===document.readyState&&"string"!=typeof e){var n=document.querySelectorAll("script[src]"),r=n[n.length-1];if(r){I=e;var i=this;R=setTimeout((function(){k[r.src]=[e,t],i.import(r.src)}))}}else I=void 0;return U.call(this,e,t)},L.instantiate=function(t,n){var r=k[t];if(r)return delete k[t],r;var i=this;return Promise.resolve(L.createScript(t)).then((function(r){return new Promise((function(o,s){r.addEventListener("error",(function(){s(Error(e(3,"Error loading "+t+(n?" from "+n:""))))})),r.addEventListener("load",(function(){if(document.head.removeChild(r),_===t)s(J);else{var e=i.getRegister(t);e&&e[0]===I&&clearTimeout(R),o(e)}})),document.head.appendChild(r)}))}))},L.shouldFetch=function(){return!1},"undefined"!=typeof fetch&&(L.fetch=fetch);var $=L.instantiate,B=/^(text|application)\/(x-)?javascript(;|$)/;L.instantiate=function(t,n,r){var i=this;return this.shouldFetch(t,n,r)?this.fetch(t,{credentials:"same-origin",integrity:T.integrity[t],meta:r}).then((function(r){if(!r.ok)throw Error(e(7,r.status+" "+r.statusText+", loading "+t+(n?" from "+n:"")));var o=r.headers.get("content-type");if(!o||!B.test(o))throw Error(e(4,'Unknown Content-Type "'+o+'", loading '+t+(n?" from "+n:"")));return r.text().then((function(e){return e.indexOf("//# sourceURL=")<0&&(e+="\n//# sourceURL="+t),(0,eval)(e),i.getRegister(t)}))})):$.apply(this,arguments)},L.resolve=function(n,r){return c(T,t(n,r=r||g)||n,r)||function(t,n){throw Error(e(8,"Unable to resolve bare specifier '"+t+(n?"' from "+n:"'")))}(n,r)};var F=L.instantiate;L.instantiate=function(e,t,n){var r=T.depcache[e];if(r)for(var i=0;i<r.length;i++)d(this,this.resolve(r[i],e),e);return F.call(this,e,t,n)},b&&"function"==typeof importScripts&&(L.instantiate=function(e){var t=this;return Promise.resolve().then((function(){return importScripts(e),t.getRegister(e)}))}),function(e){function t(t){return!e.hasOwnProperty(t)||!isNaN(t)&&t<e.length||a&&e[t]&&"undefined"!=typeof window&&e[t].parent===window}var n,r,i,o=e.System.constructor.prototype,s=o.import;o.import=function(o,u,c){return function(){for(var o in n=r=void 0,e)t(o)||(n?r||(r=o):n=o,i=o)}(),s.call(this,o,u,c)};var u=[[],function(){return{}}],c=o.getRegister;o.getRegister=function(){var o=c.call(this);if(o)return o;var s,a=function(o){var s,u,c=0;for(var a in e)if(!t(a)){if(0===c&&a!==n||1===c&&a!==r)return a;s?(i=a,u=o&&u||a):s=a===i,c++}return u}(this.firstGlobalProp);if(!a)return u;try{s=e[a]}catch(f){return u}return[[],function(e){return{execute:function(){e(s),e({default:s,__useDefault:!0})}}}]};var a="undefined"!=typeof navigator&&-1!==navigator.userAgent.indexOf("Trident")}("undefined"!=typeof self?self:global),function(e){var t=e.System.constructor.prototype,r=/^[^#?]+\.(css|html|json|wasm)([?#].*)?$/,i=t.shouldFetch.bind(t);t.shouldFetch=function(e){return i(e)||r.test(e)};var o=/^application\/json(;|$)/,s=/^text\/css(;|$)/,u=/^application\/wasm(;|$)/,c=t.fetch;t.fetch=function(t,r){return c(t,r).then((function(i){if(r.passThrough)return i;if(!i.ok)return i;var c=i.headers.get("content-type");return o.test(c)?i.json().then((function(e){return new Response(new Blob(['System.register([],function(e){return{execute:function(){e("default",'+JSON.stringify(e)+")}}})"],{type:"application/javascript"}))})):s.test(c)?i.text().then((function(e){return e=e.replace(/url\(\s*(?:(["'])((?:\\.|[^\n\\"'])+)\1|((?:\\.|[^\s,"'()\\])+))\s*\)/g,(function(e,r,i,o){return"url("+r+n(i||o,t)+r+")"})),new Response(new Blob(["System.register([],function(e){return{execute:function(){var s=new CSSStyleSheet();s.replaceSync("+JSON.stringify(e)+');e("default",s)}}})'],{type:"application/javascript"}))})):u.test(c)?(WebAssembly.compileStreaming?WebAssembly.compileStreaming(i):i.arrayBuffer().then(WebAssembly.compile)).then((function(n){e.System.wasmModules||(e.System.wasmModules=Object.create(null)),e.System.wasmModules[t]=n;var r=[],i=[];return WebAssembly.Module.imports&&WebAssembly.Module.imports(n).forEach((function(e){var t=JSON.stringify(e.module);-1===r.indexOf(t)&&(r.push(t),i.push("function(m){i["+t+"]=m}"))})),new Response(new Blob(["System.register(["+r.join(",")+"],function(e){var i={};return{setters:["+i.join(",")+"],execute:function(){return WebAssembly.instantiate(System.wasmModules["+JSON.stringify(t)+"],i).then(function(m){e(m.exports)})}}})"],{type:"application/javascript"}))})):i}))}}("undefined"!=typeof self?self:global);var q="undefined"!=typeof Symbol&&Symbol.toStringTag;L.get=function(e){var t=this[M][e];if(t&&null===t.e&&!t.E)return t.er?null:t.n},L.set=function(t,n){try{new URL(t)}catch(s){console.warn(Error(e("W3",'"'+t+'" is not a valid URL to set in the module registry')))}var r;q&&"Module"===n[q]?r=n:(r=Object.assign(Object.create(null),n),q&&Object.defineProperty(r,q,{value:"Module"}));var i=Promise.resolve(r),o=this[M][t]||(this[M][t]={id:t,i:[],h:!1,d:[],e:null,er:void 0,E:void 0});return!o.e&&!o.E&&(Object.assign(o,{n:r,I:void 0,L:void 0,C:i}),r)},L.has=function(e){return!!this[M][e]},L.delete=function(e){var t=this[M],n=t[e];if(!n||n.p&&null!==n.p.e||n.E)return!1;var r=n.i;return n.d&&n.d.forEach((function(e){var t=e.i.indexOf(n);-1!==t&&e.i.splice(t,1)})),delete t[e],function(){var n=t[e];if(!n||!r||null!==n.e||n.E)return!1;r.forEach((function(e){n.i.push(e),e(n.n)})),r=null}};var D="undefined"!=typeof Symbol&&Symbol.iterator;L.entries=function(){var e,t,n=this,r=Object.keys(n[M]),i=0,o={next:function(){for(;void 0!==(t=r[i++])&&void 0===(e=n.get(t)););return{done:void 0===t,value:void 0!==t&&[t,e]}}};return o[D]=function(){return this},o}}();
+//# sourceMappingURL=system.min.js.map
diff --git a/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/types/system-6.13.0.d.ts/index.d.ts b/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/types/system-6.13.0.d.ts/index.d.ts
new file mode 100644
index 0000000..65b0878
--- /dev/null
+++ b/BrightMetricsWeb/BrightMetricsWeb.BrightMetricsWebUI/UI-2/scripts/libs/types/system-6.13.0.d.ts/index.d.ts
@@ -0,0 +1,114 @@
+// Type definitions for SystemJS 6.13
+// Project: https://github.com/systemjs/systemjs
+// Definitions by: Joel Denning <https://github.com/joeldenning>
+// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
+// TypeScript Version: 3.5
+
+declare const System: {
+  /**
+   * Loads a javascript module from either a url or bare specifier that is in an import map.
+   * You may optionally provide a parentUrl that will be used for resolving relative urls.
+   */
+  import: System.ImportFn;
+
+  /**
+   * Inserts a new module into the SystemJS module registry. The System.register format is
+   * the underlying implementation that allows for ESM emulation.
+   * See https://github.com/systemjs/systemjs/blob/master/docs/system-register.md for more details.
+   * Register may be called with a name argument if you are using the named-register extra. (See
+   * https://github.com/systemjs/systemjs#extras).
+   */
+  register(dependencies: string[], declare: System.DeclareFn): void;
+  register(name: string, dependencies: string[], declare: System.DeclareFn): void;
+
+  /**
+   * Resolve any moduleId to its full URL. For a moduleId that is in the import map, this will resolve
+   * the full import map URL. For a moduleId that is a relative url, the returned url will be resolved
+   * relative to the parentUrl or the current browser page's base url. For a full url, resolve() is
+   * a no-op.
+   */
+  resolve(moduleId: string, parentUrl?: string): string;
+
+  /**
+   * Delete a module from the module registry. Note that the moduleId almost always must be a full url and that
+   * you might need to call System.resolve() to obtain the moduleId for modules in an import map.
+   * The returned function is intended for use after re-importing the module. Calling the function
+   * will re-bind all the exports of the re-imported module to every module that depends on the module.
+   */
+  delete(moduleId: string): false | System.UpdateModuleFn;
+
+  /**
+   * Get a module from the SystemJS module registry. Note that the moduleId almost always must be a full url
+   * and that you might need to call System.resolve() to obtain the moduleId. If the module does not exist in
+   * the registry, null is returned.
+   */
+  get(moduleId: string): System.Module | null;
+  // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
+  get<T>(moduleId: string): T | null;
+
+  /**
+   * Indicates whether the SystemJS module registry contains a module. Note that the moduleId almost always
+   * must be a full url and that you might need to call System.resolve() to obtain the moduleId.
+   */
+  has(moduleId: string): boolean;
+
+  /**
+   * An alternative to System.register(), this allows you to insert a module into the module registry. Note that
+   * the moduleId you provide will go straight into the registry without being resolved first.
+   */
+  set(moduleId: string, module: System.Module): void;
+
+  /**
+   * Use for (let entry of System.entries()) to access all of the modules in the SystemJS registry.
+   */
+  entries(): Iterable<[string, System.Module]>;
+
+  /**
+   * Dynamically extend additional mappings into the import map at any time.
+   * Any existing map entries will be overridden with the new values.
+   */
+  addImportMap(importMap: System.ImportMap): void;
+};
+
+declare namespace System {
+  // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
+  type ImportFn = <T extends Module>(moduleId: string, parentUrl?: string) => Promise<T>;
+
+  type DeclareFn = (_export: ExportFn, _context: Context) => Declare;
+  interface Declare {
+    setters?: SetterFn[] | undefined;
+    execute?(): any;
+  }
+  type SetterFn = (moduleValue: Module) => any;
+  type ExecuteFn = () => any;
+
+  interface ExportFn {
+    (exportName: string, value: any): void;
+    (exports: object): void;
+  }
+
+  type UpdateModuleFn = () => void;
+
+  type GetFn = GetFnModule | GetFnGeneric;
+  type GetFnModule = (moduleId: string) => Module;
+  // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
+  type GetFnGeneric = <T>(moduleId: string) => T;
+
+  interface Context {
+    import: ImportFn;
+    meta: {
+      url: string;
+    };
+  }
+
+  interface Module {
+    default?: any;
+    [exportName: string]: any;
+  }
+
+  /** The importmap standard is defined here: https://github.com/WICG/import-maps */
+  interface ImportMap {
+    imports?: Record<string, string>;
+    scopes?: Record<string, Record<string, string>>;
+  }
+}
-- 
2.39.2 (Apple Git-143)

