From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Bailey <5341706+jakebailey@users.noreply.github.com>
Date: Mon, 26 Sep 2022 14:43:00 -0700
Subject: [PATCH] Fix APISample tests to not depend on the existence of the ts
 namespace

The way we pull in the types for typescript in these tests only works
when we include typescriptServices.d.ts into the project, which declares
a global namespace, which then is reexported as the typescript package.

This reexport is already what the current typescript.d.ts does, but now
that we don't have the namespace at all, we can't do this. Instead,
simulate the typescript package directly and point it at the correct
d.ts file.

This is a good chagne regardless of the module transform, and could be
cherry-picked back to main early.
---
 tests/baselines/reference/APISample_Watch.js  |  7 ++--
 .../reference/APISample_WatchWithDefaults.js  |  7 ++--
 .../APISample_WatchWithOwnWatchHost.js        |  7 ++--
 .../baselines/reference/APISample_compile.js  |  9 ++---
 tests/baselines/reference/APISample_jsdoc.js  | 15 ++++----
 tests/baselines/reference/APISample_linter.js | 34 ++++++++++---------
 .../reference/APISample_parseConfig.js        | 10 +++---
 .../reference/APISample_transform.js          | 10 +++---
 .../baselines/reference/APISample_watcher.js  |  7 ++--
 tests/cases/compiler/APISample_Watch.ts       |  8 ++---
 .../compiler/APISample_WatchWithDefaults.ts   |  8 ++---
 .../APISample_WatchWithOwnWatchHost.ts        |  8 ++---
 tests/cases/compiler/APISample_compile.ts     |  8 ++---
 tests/cases/compiler/APISample_jsdoc.ts       |  8 ++---
 tests/cases/compiler/APISample_linter.ts      | 10 +++---
 tests/cases/compiler/APISample_parseConfig.ts | 10 +++---
 tests/cases/compiler/APISample_transform.ts   | 10 +++---
 tests/cases/compiler/APISample_watcher.ts     |  8 ++---
 18 files changed, 98 insertions(+), 86 deletions(-)

diff --git a/tests/baselines/reference/APISample_Watch.js b/tests/baselines/reference/APISample_Watch.js
index e675f2ec4e..5c9ad996f7 100644
--- a/tests/baselines/reference/APISample_Watch.js
+++ b/tests/baselines/reference/APISample_Watch.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_Watch.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_Watch.ts]
diff --git a/tests/baselines/reference/APISample_WatchWithDefaults.js b/tests/baselines/reference/APISample_WatchWithDefaults.js
index 63bfa4965e..3961a1367e 100644
--- a/tests/baselines/reference/APISample_WatchWithDefaults.js
+++ b/tests/baselines/reference/APISample_WatchWithDefaults.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_WatchWithDefaults.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_WatchWithDefaults.ts]
diff --git a/tests/baselines/reference/APISample_WatchWithOwnWatchHost.js b/tests/baselines/reference/APISample_WatchWithOwnWatchHost.js
index 75444a614f..56286921e7 100644
--- a/tests/baselines/reference/APISample_WatchWithOwnWatchHost.js
+++ b/tests/baselines/reference/APISample_WatchWithOwnWatchHost.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_WatchWithOwnWatchHost.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_WatchWithOwnWatchHost.ts]
diff --git a/tests/baselines/reference/APISample_compile.js b/tests/baselines/reference/APISample_compile.js
index b19bc06d1e..2f4cb4c89b 100644
--- a/tests/baselines/reference/APISample_compile.js
+++ b/tests/baselines/reference/APISample_compile.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_compile.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_compile.ts]
@@ -75,5 +76,5 @@ function compile(fileNames, options) {
 exports.compile = compile;
 compile(process.argv.slice(2), {
     noEmitOnError: true, noImplicitAny: true,
-    target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS
+    target: 1 /* ts.ScriptTarget.ES5 */, module: ts.ModuleKind.CommonJS
 });
diff --git a/tests/baselines/reference/APISample_jsdoc.js b/tests/baselines/reference/APISample_jsdoc.js
index 50288c1237..a525771c5f 100644
--- a/tests/baselines/reference/APISample_jsdoc.js
+++ b/tests/baselines/reference/APISample_jsdoc.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_jsdoc.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_jsdoc.ts]
@@ -177,10 +178,10 @@ function getAnnotations(node) {
 }
 // these examples are artificial and mostly nonsensical
 function parseSpecificTags(node) {
-    if (node.kind === ts.SyntaxKind.Parameter) {
+    if (node.kind === 166 /* ts.SyntaxKind.Parameter */) {
         return ts.getJSDocParameterTags(node);
     }
-    if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
+    if (node.kind === 259 /* ts.SyntaxKind.FunctionDeclaration */) {
         var func = node;
         if (ts.hasJSDocParameterTags(func)) {
             var flat = [];
@@ -194,11 +195,11 @@ function parseSpecificTags(node) {
     }
 }
 function getReturnTypeFromJSDoc(node) {
-    if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
+    if (node.kind === 259 /* ts.SyntaxKind.FunctionDeclaration */) {
         return ts.getJSDocReturnType(node);
     }
     var type = ts.getJSDocType(node);
-    if (type && type.kind === ts.SyntaxKind.FunctionType) {
+    if (type && type.kind === 181 /* ts.SyntaxKind.FunctionType */) {
         return type.type;
     }
 }
diff --git a/tests/baselines/reference/APISample_linter.js b/tests/baselines/reference/APISample_linter.js
index 65e03d339e..69eab7271e 100644
--- a/tests/baselines/reference/APISample_linter.js
+++ b/tests/baselines/reference/APISample_linter.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_linter.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_linter.ts]
@@ -68,7 +69,8 @@ fileNames.forEach(fileName => {
 
     // delint it
     delint(sourceFile);
-});
+});
+
 
 //// [APISample_linter.js]
 "use strict";
@@ -84,28 +86,28 @@ function delint(sourceFile) {
     delintNode(sourceFile);
     function delintNode(node) {
         switch (node.kind) {
-            case ts.SyntaxKind.ForStatement:
-            case ts.SyntaxKind.ForInStatement:
-            case ts.SyntaxKind.WhileStatement:
-            case ts.SyntaxKind.DoStatement:
-                if (node.statement.kind !== ts.SyntaxKind.Block) {
+            case 245 /* ts.SyntaxKind.ForStatement */:
+            case 246 /* ts.SyntaxKind.ForInStatement */:
+            case 244 /* ts.SyntaxKind.WhileStatement */:
+            case 243 /* ts.SyntaxKind.DoStatement */:
+                if (node.statement.kind !== 238 /* ts.SyntaxKind.Block */) {
                     report(node, "A looping statement's contents should be wrapped in a block body.");
                 }
                 break;
-            case ts.SyntaxKind.IfStatement:
+            case 242 /* ts.SyntaxKind.IfStatement */:
                 var ifStatement = node;
-                if (ifStatement.thenStatement.kind !== ts.SyntaxKind.Block) {
+                if (ifStatement.thenStatement.kind !== 238 /* ts.SyntaxKind.Block */) {
                     report(ifStatement.thenStatement, "An if statement's contents should be wrapped in a block body.");
                 }
                 if (ifStatement.elseStatement &&
-                    ifStatement.elseStatement.kind !== ts.SyntaxKind.Block &&
-                    ifStatement.elseStatement.kind !== ts.SyntaxKind.IfStatement) {
+                    ifStatement.elseStatement.kind !== 238 /* ts.SyntaxKind.Block */ &&
+                    ifStatement.elseStatement.kind !== 242 /* ts.SyntaxKind.IfStatement */) {
                     report(ifStatement.elseStatement, "An else statement's contents should be wrapped in a block body.");
                 }
                 break;
-            case ts.SyntaxKind.BinaryExpression:
+            case 223 /* ts.SyntaxKind.BinaryExpression */:
                 var op = node.operatorToken.kind;
-                if (op === ts.SyntaxKind.EqualsEqualsToken || op == ts.SyntaxKind.ExclamationEqualsToken) {
+                if (op === 34 /* ts.SyntaxKind.EqualsEqualsToken */ || op == 35 /* ts.SyntaxKind.ExclamationEqualsToken */) {
                     report(node, "Use '===' and '!=='.");
                 }
                 break;
@@ -121,7 +123,7 @@ exports.delint = delint;
 var fileNames = process.argv.slice(2);
 fileNames.forEach(function (fileName) {
     // Parse a file
-    var sourceFile = ts.createSourceFile(fileName, readFileSync(fileName).toString(), ts.ScriptTarget.ES2015, /*setParentNodes */ true);
+    var sourceFile = ts.createSourceFile(fileName, readFileSync(fileName).toString(), 2 /* ts.ScriptTarget.ES2015 */, /*setParentNodes */ true);
     // delint it
     delint(sourceFile);
 });
diff --git a/tests/baselines/reference/APISample_parseConfig.js b/tests/baselines/reference/APISample_parseConfig.js
index e9dc119417..422ac5c188 100644
--- a/tests/baselines/reference/APISample_parseConfig.js
+++ b/tests/baselines/reference/APISample_parseConfig.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_parseConfig.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_parseConfig.ts]
@@ -40,7 +41,8 @@ export function createProgram(rootFiles: string[], compilerOptionsJson: string):
         return undefined;
     }
     return ts.createProgram(rootFiles, settings.options);
-}
+}
+
 
 //// [APISample_parseConfig.js]
 "use strict";
diff --git a/tests/baselines/reference/APISample_transform.js b/tests/baselines/reference/APISample_transform.js
index db25c1bd1d..12f2f4ca12 100644
--- a/tests/baselines/reference/APISample_transform.js
+++ b/tests/baselines/reference/APISample_transform.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_transform.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_transform.ts]
@@ -20,7 +21,8 @@ const source = "let x: string  = 'string'";
 
 let result = ts.transpile(source, { module: ts.ModuleKind.CommonJS });
 
-console.log(JSON.stringify(result));
+console.log(JSON.stringify(result));
+
 
 //// [APISample_transform.js]
 "use strict";
diff --git a/tests/baselines/reference/APISample_watcher.js b/tests/baselines/reference/APISample_watcher.js
index d86eb60e67..a66fb1cc3f 100644
--- a/tests/baselines/reference/APISample_watcher.js
+++ b/tests/baselines/reference/APISample_watcher.js
@@ -1,8 +1,9 @@
 //// [tests/cases/compiler/APISample_watcher.ts] ////
 
-//// [index.d.ts]
-declare module "typescript" {
-    export = ts;
+//// [package.json]
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 //// [APISample_watcher.ts]
diff --git a/tests/cases/compiler/APISample_Watch.ts b/tests/cases/compiler/APISample_Watch.ts
index 154e5f90b0..fccc413756 100644
--- a/tests/cases/compiler/APISample_Watch.ts
+++ b/tests/cases/compiler/APISample_Watch.ts
@@ -1,12 +1,12 @@
 ﻿// @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_Watch.ts
diff --git a/tests/cases/compiler/APISample_WatchWithDefaults.ts b/tests/cases/compiler/APISample_WatchWithDefaults.ts
index d028d10927..7efada18db 100644
--- a/tests/cases/compiler/APISample_WatchWithDefaults.ts
+++ b/tests/cases/compiler/APISample_WatchWithDefaults.ts
@@ -1,12 +1,12 @@
 ﻿// @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_WatchWithDefaults.ts
diff --git a/tests/cases/compiler/APISample_WatchWithOwnWatchHost.ts b/tests/cases/compiler/APISample_WatchWithOwnWatchHost.ts
index 18cb5766ce..794be55855 100644
--- a/tests/cases/compiler/APISample_WatchWithOwnWatchHost.ts
+++ b/tests/cases/compiler/APISample_WatchWithOwnWatchHost.ts
@@ -1,12 +1,12 @@
 ﻿// @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_WatchWithOwnWatchHost.ts
diff --git a/tests/cases/compiler/APISample_compile.ts b/tests/cases/compiler/APISample_compile.ts
index 49d821fae1..ed5d5723f3 100644
--- a/tests/cases/compiler/APISample_compile.ts
+++ b/tests/cases/compiler/APISample_compile.ts
@@ -1,12 +1,12 @@
 ﻿// @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_compile.ts
diff --git a/tests/cases/compiler/APISample_jsdoc.ts b/tests/cases/compiler/APISample_jsdoc.ts
index 22f98f4797..d166e435fe 100644
--- a/tests/cases/compiler/APISample_jsdoc.ts
+++ b/tests/cases/compiler/APISample_jsdoc.ts
@@ -1,12 +1,12 @@
 // @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_jsdoc.ts
diff --git a/tests/cases/compiler/APISample_linter.ts b/tests/cases/compiler/APISample_linter.ts
index a6ae00944b..7d485e4d85 100644
--- a/tests/cases/compiler/APISample_linter.ts
+++ b/tests/cases/compiler/APISample_linter.ts
@@ -1,12 +1,12 @@
 ﻿// @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_linter.ts
@@ -72,4 +72,4 @@ fileNames.forEach(fileName => {
 
     // delint it
     delint(sourceFile);
-});
\ No newline at end of file
+});
diff --git a/tests/cases/compiler/APISample_parseConfig.ts b/tests/cases/compiler/APISample_parseConfig.ts
index 243e25f995..a4bcbc4aea 100644
--- a/tests/cases/compiler/APISample_parseConfig.ts
+++ b/tests/cases/compiler/APISample_parseConfig.ts
@@ -1,12 +1,12 @@
 // @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_parseConfig.ts
@@ -44,4 +44,4 @@ export function createProgram(rootFiles: string[], compilerOptionsJson: string):
         return undefined;
     }
     return ts.createProgram(rootFiles, settings.options);
-}
\ No newline at end of file
+}
diff --git a/tests/cases/compiler/APISample_transform.ts b/tests/cases/compiler/APISample_transform.ts
index a750d0d359..b2e001071b 100644
--- a/tests/cases/compiler/APISample_transform.ts
+++ b/tests/cases/compiler/APISample_transform.ts
@@ -1,12 +1,12 @@
 ﻿// @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_transform.ts
@@ -24,4 +24,4 @@ const source = "let x: string  = 'string'";
 
 let result = ts.transpile(source, { module: ts.ModuleKind.CommonJS });
 
-console.log(JSON.stringify(result));
\ No newline at end of file
+console.log(JSON.stringify(result));
diff --git a/tests/cases/compiler/APISample_watcher.ts b/tests/cases/compiler/APISample_watcher.ts
index dfae23488c..824b083b6b 100644
--- a/tests/cases/compiler/APISample_watcher.ts
+++ b/tests/cases/compiler/APISample_watcher.ts
@@ -1,12 +1,12 @@
 ﻿// @module: commonjs
 // @skipLibCheck: true
-// @includebuiltfile: typescriptServices.d.ts
 // @noImplicitAny:true
 // @strictNullChecks:true
 
-// @filename: node_modules/typescript/index.d.ts
-declare module "typescript" {
-    export = ts;
+// @filename: node_modules/typescript/package.json
+{
+    "name": "typescript",
+    "types": "/.ts/typescript.d.ts"
 }
 
 // @filename: APISample_watcher.ts
-- 
2.37.3

